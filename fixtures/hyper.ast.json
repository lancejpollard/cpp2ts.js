{
  "type": "translation_unit",
  "text": "// Hyperbolic Rogue -- main header file\n// Copyright (C) 2011-2019 Zeno Rogue, see 'hyper.cpp' for details\n\n/** \\file hyper.h\n *  \\brief The main header file of HyperRogue\n *\n *  Contains general utility macros, various value macros, using clauses for standard library functions,\n *  implementation of the basic connection_table, walker, cell and heptagon classes,\n *  and general routines which did not fit elsewhere\n */\n\n#ifndef _HYPER_H_\n#define _HYPER_H_\n\n// version numbers\n#define VER \"12.1h\"\n#define VERNUM_HEX 0xA928\n\n#include \"sysconfig.h\"\n\n#include <stdarg.h>\n#include \"hyper_function.h\"\n\n/** \\brief the main namespace of HyperRogue */\nnamespace hr {\n\n/** \\brief A helper structure that acts as a boolean which is always false. Helpful when disabling stuff with compiler flags. */\nstruct always_false {\n  operator bool() const { return false; }\n  bool operator = (bool b) const { return b; }\n  };\n\n/** \\brief placate GCC's overzealous -Wunused-result */\ntemplate<class T>\nvoid ignore(T&&) {\n  }\n\n/** \\brief a simple static_cast<void*> for use with printf(\"%p\") */\ninline const void *voidp(const void *p) {\n  return p;\n  }\n\n/** \\brief Is the value of first parameter equal to one of the remaining parameters? */\ntemplate<class T, class V, class... U> bool among(T x, V y) { return x == y; }\ntemplate<class T, class V, class... U> bool among(T x, V y, U... u) { return x==y || among(x,u...); }\n\n// functions and types used from the standard library\nusing std::vector;\nusing std::map;\nusing std::array;\nusing std::sort;\nusing std::multimap;\nusing std::set;\nusing std::string;\nusing std::pair;\nusing std::tuple;\nusing std::shared_ptr;\nusing std::make_shared;\nusing std::min;\nusing std::max;\nusing std::make_pair;\nusing std::tie;\nusing std::queue;\nusing std::swap;\nusing std::complex;\nusing std::reverse;\nusing std::real;\nusing std::imag;\nusing std::stable_sort;\nusing std::out_of_range;\nusing std::get;\nusing std::move;\nusing std::make_tuple;\nusing std::unique_ptr;\n\nusing std::abs;\nusing std::isfinite;\nusing std::isnan;\nusing std::isinf;\nusing std::log;\nusing std::exp;\nusing std::sin;\nusing std::cos;\nusing std::sinh;\nusing std::asin;\nusing std::acos;\nusing std::tan;\nusing std::atan;\nusing std::atan2;\nusing std::tanh;\nusing std::sqrt;\nusing std::pow;\nusing std::floor;\nusing std::ceil;\n#ifndef NO_STD_HYPOT\nusing std::hypot;\nusing std::asinh;\nusing std::acosh;\n#endif\n\nstruct hr_exception : std::runtime_error {\n    explicit hr_exception() : std::runtime_error(\"hr_exception\") {}\n    explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}\n};\n\nstruct hr_shortest_path_exception { };\n\n// genus (in grammar)\n#define GEN_M 0\n#define GEN_F 1\n#define GEN_N 2\n#define GEN_O 3\n#define GEN_BASE_MASK   7\n\n#define GENF_ELISION    (1 << 3)\n#define GENF_PLURALONLY (1 << 4)\n#define GENF_PROPER     (1 << 5)\n\n// Add a message to the GUI.\n// If multiple messages appear with the same spamtype != 0, the older ones disappear quickly\nvoid addMessage(string s, char spamtype = 0);\n\n// geometry-dependent constants\n\n#define cginf ginf[geometry]\n\n#define S7 cginf.sides\n#define S3 cginf.vertex\n#define hyperbolic_37 (S7 == 7 && S3 == 3 && !bt::in() && !arcm::in())\n#define hyperbolic_not37 ((S7 > 7 || S3 > 3 || bt::in() || arcm::in()) && hyperbolic)\n#define weirdhyperbolic ((S7 > 7 || S3 > 3 || !STDVAR || bt::in() || arcm::in() || arb::in()) && hyperbolic)\n#define stdhyperbolic (S7 == 7 && S3 == 3 && STDVAR && !bt::in() && !arcm::in() && !arb::in())\n\n#define cgflags cginf.flags\n\n#define cryst (cgflags & qCRYSTAL)\n\n/** convenience flag for geometries with major aspects missing */\n#define experimental (cgflags & qEXPERIMENTAL)\n\n// these geometries do not feature alternate structures for horocycles\n#define eubinary (euclid || bt::in() || cryst || nil)\n\n#define cgclass (cginf.cclass)\n#define euclid (cgclass == gcEuclid)\n#define sphere (cgclass == gcSphere)\n#define sol (among(cgclass, gcSol, gcSolN))\n#define nih (among(cgclass, gcNIH, gcSolN))\n#define nil (cgclass == gcNil)\n#define sl2 (cgclass == gcSL2)\n#define rotspace (geometry == gRotSpace)\n#define hyperbolic (cgclass == gcHyperbolic)\n#define nonisotropic (among(cgclass, gcSol, gcSolN, gcNIH, gcSL2, gcNil))\n#define translatable (euclid || nonisotropic)\n#define nonorientable (cgflags & qNONORIENTABLE)\n#define elliptic (cgflags & qELLIPTIC)\n#define quotient (cgflags & qANYQ)\n#define smallbounded ((cgflags & qSMALL) || disksize)\n#define closed_manifold (cgflags & qCLOSED)\n#define closed_or_bounded (closed_manifold || disksize)\n/** the actual map has hybrid geometry, not just the graphics */\n#define mhybrid (cgflags & qHYBRID)\n/** graphics based on a product geometry -- either embedded or actual hybrid product */\n#define gproduct (cgclass == gcProduct)\n\n/** 2D geometry embedded in 3D */\n#define embedded_plane (WDIM == 2 && GDIM == 3)\n/** the actual map is product, not just the graphics */\n#define mproduct (gproduct && !embedded_plane)\n/** the actual map is product, not just the graphics */\n#define meuclid (geom3::mgclass() == gcEuclid)\n#define msphere (geom3::mgclass() == gcSphere)\n#define mhyperbolic (geom3::mgclass() == gcHyperbolic)\n\n// Dry Forest burning, heat transfer, etc. are performed on the whole universe\n#define doall (closed_or_bounded)\n\n#define sphere_narcm (sphere && !arcm::in())\n\n#define a4 (S3 == 4)\n#define a45 (S3 == 4 && S7 == 5)\n#define a46 (S3 == 4 && S7 == 6)\n#define a47 (S3 == 4 && S7 == 7)\n#define a457 (S3 == 4 && S7 != 6)\n#define a467 (S3 == 4 && S7 >= 6)\n#define a38 (S3 == 3 && S7 == 8)\n#define sphere4 (sphere && S7 == 4)\n#define stdeuc (geometry == gNormal || geometry == gEuclid || geometry == gEuclidSquare)\n#define smallsphere (sphere_narcm && S7 < 5)\n#define bigsphere (sphere_narcm && S7 == 5)\n\n#define S6 (S3*2)\n#define MAX_S3 4\n\n#define SG6 (S3==3?6:4)\n#define SG3 (S3==3?3:2)\n#define SG2 (S3==3?2:1)\n\n#define GOLDBERG_INV (GOLDBERG || INVERSE)\n\n#define INVERSE among(variation, eVariation::unrectified, eVariation::warped, eVariation::untruncated )\n\n#define UNRECTIFIED (variation == eVariation::unrectified)\n#define WARPED (variation == eVariation::warped)\n#define UNTRUNCATED (variation == eVariation::untruncated)\n\n#define GOLDBERG (variation == eVariation::goldberg)\n#define IRREGULAR (variation == eVariation::irregular)\n#define PURE (variation == eVariation::pure)\n#define BITRUNCATED (variation == eVariation::bitruncated)\n#define DUAL (variation == eVariation::dual)\n#define DUALMUL (DUAL ? 2 : 1)\n\n#define CHANGED_VARIATION (variation != cginf.default_variation)\n\n#define STDVAR (PURE || BITRUNCATED)\n#define NONSTDVAR (!STDVAR)\n\n#define VALENCE current_valence()\n\n#define NUMWITCH 7\n\n// achievements\n\n#define LB_YENDOR_CHALLENGE 40\n#define LB_PURE_TACTICS 41\n#define NUMLEADER 87\n#define LB_PURE_TACTICS_SHMUP 49\n#define LB_PURE_TACTICS_COOP 50\n#define LB_RACING 81\n\n#if ISMOBILE || ISWEB || ISPANDORA || 1\ntypedef double ld;\n#define LDF \"%lf\"\n#define PLDF \"lf\"\n#else\ntypedef long double ld;\n#define LDF \"%Lf\"\n#define PLDF \"Lf\"\n#endif\n\ntypedef complex<ld> cld;\n\ntypedef unsigned color_t;\n\nstruct charstyle {\n  int charid;\n  color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;\n  bool lefthanded;\n  };\n\nenum eStereo { sOFF, sAnaglyph, sLR, sODS };\n\nenum eModel : int;\n\n/** configuration of the projection */\nstruct projection_configuration {\n  eModel model;            /**< which projection, see classes.cpp */\n  ld xposition, yposition; /**< move the center to another position */\n  ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;\n  ld clip_min, clip_max;\n  ld model_orientation, halfplane_scale, model_orientation_yz;\n  ld collignon_parameter;\n  ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;\n  bool show_hyperboloid_flat;\n  bool collignon_reflected;\n  string formula;\n  eModel basic_model;\n  ld top_z;\n  ld model_transition;\n  ld spiral_angle;\n  ld spiral_x;\n  ld spiral_y;\n  bool use_atan;\n  ld right_spiral_multiplier;\n  ld any_spiral_multiplier;\n  ld sphere_spiral_multiplier;\n  ld spiral_cone;\n  ld skiprope;\n  ld product_z_scale;\n  ld rotational_nil;\n\n  ld depth_scaling;\n  ld hyperboloid_scaling;\n  ld vr_angle, vr_zshift, vr_scale_factor;\n  bool dualfocus_autoscale;\n\n  int back_and_front; /* 0 = do not, 1 = do, 2 = only back */\n\n  projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }\n  };\n\nenum eThreatLevel { tlNoThreat, tlSpam, tlNormal, tlHighThreat };\n\nstruct videopar {\n  projection_configuration projection_config, rug_config;\n  ld yshift;\n  ld sspeed, mspeed;\n  ld binary_width, fixed_facing_dir;\n  int mobilecompasssize;\n  int radarsize; // radar for 3D geometries\n  ld radarrange;\n  int aurastr, aurasmoothen;\n  bool fixed_facing;\n  bool fixed_yz;\n  bool use_wall_radar;\n\n  int linequality;\n\n  bool want_fullscreen;\n  bool full;\n  bool change_fullscr;\n  bool relative_window_size;\n  bool want_vsync;\n  bool current_vsync;\n\n  int graphglyph; // graphical glyphs\n  bool darkhepta;\n  int shifttarget;\n\n  int xres, yres, framelimit;\n\n  int xscr, yscr;\n\n  int fullscreen_x, fullscreen_y;\n  int window_x, window_y;\n  ld window_rel_x, window_rel_y;\n\n  bool grid;\n  bool particles;\n\n  bool relative_font;\n  int fsize, abs_fsize, fontscale;\n  int flashtime;\n\n  int wallmode, monmode, axes, highlightmode, orbmode;\n  bool axes3;\n  bool revcontrol;\n\n  int msgleft, msglimit;\n\n  bool wantGL;\n  int want_antialias;\n  bool fineline;\n\n  bool usingGL;\n  int antialias;\n  #define AA_NOGL      1\n  #define AA_VERSION   2\n  #define AA_LINES     4\n  #define AA_POLY      8\n  #define AA_FONT      32\n  #define AA_MULTI     64\n  #define AA_MULTI16   128 // not configurable\n  ld linewidth;\n\n  ld multiplier_grid, multiplier_ring;\n\n  int joyvalue, joyvalue2, joypanthreshold;\n  ld joypanspeed;\n\n  charstyle cs;\n\n  bool samegender; // same gender for the Princess?\n  int language;\n\n  bool backeffects; // background particle effects\n\n  int killreduction, itemreduction, portreduction;\n\n  int steamscore;\n  bool drawmousecircle; // draw the circle around the mouse\n  bool skipstart;       // skip the start menu\n  bool quickmouse;      // quick mouse on the map\n  bool sloppy_3d;       // make 3D faster but ugly\n  int timeformat;       // time format used in the message log\n\n  int use_smart_range;  // 0 = distance-based, 1 = model-based, 2 = model-based and generate\n  ld smart_range_detail;// minimum visible cell for modes 1 and 2\n  ld smart_range_detail_3;// minimum visible cell in 3D (for mode 2, there is no mode 1)\n  bool smart_area_based;// based on area or length?\n  int cells_drawn_limit;\n  int cells_generated_limit; // limit on cells generated per frame\n\n  eStereo stereo_mode;\n  ld ipd;\n  ld lr_eyewidth, anaglyph_eyewidth;\n  ld fov;\n  bool consider_shader_projection;\n  int desaturate;\n  int texture_step;\n\n\n  bool always3;  // always use the 3D engine\n  ld depth;      // world level below the plane\n  ld camera;     // camera level above the plane\n  ld wall_height, creature_scale, height_width;\n  ld lake_top, lake_bottom;\n  ld rock_wall_ratio;\n  ld human_wall_ratio;\n  bool pseudohedral; // in 3D modes\n  ld depth_bonus;   // to fiix the placement of 3D models in pseudogonal -- not working currently\n\n  int tc_alpha, tc_depth, tc_camera;\n  ld highdetail, middetail;\n  bool gp_autoscale_heights;\n\n  ld eye;\n  bool auto_eye;\n\n  ld plevel_factor;\n  bool bubbles_special, bubbles_threshold, bubbles_all;\n  int joysmooth;\n\n  eThreatLevel faraway_highlight; // draw attention to monsters on the horizon\n  int faraway_highlight_color; // 0 = monster color, 100 = red-green oscillation\n\n  ld ispeed;\n  bool flasheffects;\n  };\n\nextern videopar vid;\n\n/** \\brief How many dimensional is the gameplay. In the FPP mode of a 2D geometry, WDIM is 2 */\n#define WDIM cginf.g.gameplay_dimension\n/** \\brief How many dimensional is the graphical representation. In the FPP mode of a 2D geometry, MDIM is 3 */\n#define GDIM cginf.g.graphical_dimension\n/** \\brief How many dimensions of the matrix representation are used. It is usually 3 in 2D geometries (not FPP) and in product geometries, 4 in 3D geometries */\n#define MDIM (MAXMDIM == 3 ? 3 : cginf.g.homogeneous_dimension)\n/** \\brief What dimension of matrices is used in loops (the 'extra' dimensions have values 0 or 1 as in Id)\n *  Even if MDIM==3, it may be faster to keep 4x4 matrices and perform computations using them (rather than having another condition due to the variable loop size).\n *  The experiments on my computer show it to be the case, but the effect is not significant, and it may be different on another computer.\n */\n#define MXDIM (CAP_MDIM_FIXED ? MAXMDIM : MDIM)\n/** \\brief The 'homogeneous' dimension index */\n#define LDIM (MDIM-1)\n#define cclass g.kind\n\n#define self (*this)\n\n#define BUGCOLORS 3\n\n#define big_unlock (inv::on && !ls::any_chaos())\n\n// land completion for shared unlocking\n#define U5 (big_unlock ? 10 : 5)\n// land completion for advanced unlocking\n#define U10 (big_unlock ? 25 : 10)\n\n// land completion\n#define R10 (big_unlock ? 50 : 10)\n// intermediate lands\n#define R30 (big_unlock ? 100 : 30)\n// advanced lands\n#define R60 (big_unlock ? 200 : 60)\n// advanced lands II\n#define R90 (big_unlock ? 300 : 90)\n// Crossroads IV\n#define R200 (big_unlock ? 800 : 200)\n// Crossroads V\n#define R300 (big_unlock ? 1200 : 300)\n// kill types for Dragon Chasms\n#define R20 (big_unlock ? 30 : 20)\n// kill count for Graveyard/Hive\n#define R100 (big_unlock ? 500 : 100)\n\n// size casted to int, to prevent warnings and actual errors caused by the unsignedness of x.size()\ntemplate<class T> int isize(const T& x) {return x.size(); }\n\n// automatically growing vector\ntemplate<class T> struct grow_vector : public vector<T> {\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  };\n\n// game forward declarations\n\nnamespace anticheat { extern bool tampered; }\n#define HRANDMAX 0x7FFFFFFF\n\nstruct movedir {\n  int d;\n  // non-negative numbers denote 'rotate +d steps and act in this direction\n  // negative numbers have the following meanings (warning: not used consistently):\n  #define MD_WAIT (-1)\n  #define MD_DROP (-2)\n  #define MD_UNDECIDED (-3)\n  #define MD_USE_ORB (-4)\n  int subdir; // for normal movement (0+): turn left or right\n  struct cell *tgt;  // for MD_USE_ORB: target cell\n  };\n\n// shmup\n\ntemplate<class T>\nclass hookset {\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n};\n\nusing purehookset = hookset<void()>;\n\nstatic const int NOHINT = -1;\n\ntypedef function<void()> reaction_t;\ntypedef function<bool()> bool_reaction_t;\n\nvoid offer_choose_file(reaction_t r);\n\n#define HELPFUN(x) (help_delegate = x, \"HELPFUN\")\n\ntypedef function<int(struct cell*)> cellfunction;\n\n// passable flags\n\n#define SAGEMELT .1\n#define PT(x, y) ((tactic::on || quotient == 2 || daily::on) ? (y) : inv::on ? min(2*(y),x) : (x))\n#define ROCKSNAKELENGTH 50\n#define WORMLENGTH 15\n#define PRIZEMUL 7\n\n#define INF  9999\n#define INFD 60\n#define PINFD 125\n#ifndef BARLEV\n#define BARLEV ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)\n#endif\n#define BUGLEV 15\n// #define BARLEV 9\n\n#define YDIST 101\n#define MODECODES (1ll<<61)\n\n#define GUNRANGE 3\n\n// loops\n\n#define fakecellloop(ct) for(cell *ct = (cell*)1; ct; ct=NULL)\n\n#define forCellIdAll(ct, i, cf) fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=(cf)->move(i),true); i++)\n#define forCellIdCM(ct, i, cf)  fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=createMov((cf),i),true); i++)\n#define forCellIdEx(ct, i, cf)  forCellIdAll(ct,i,cf) if(ct)\n\n#define forCellEx(ct, cf) forCellIdEx(ct,forCellEx ## __LINE__,cf)\n#define forCellCM(ct, cf) forCellIdCM(ct,forCellCM ## __LINE__,cf)\n#define forCellAll(ct, cf) forCellIdCM(ct,forCellAll ## __LINE__,cf)\n\n// canAttack/moveval flags\n\n#define AF_NORMAL            0          // nothing special about this attack\n\n#define AF_TOUGH             Flag(0)    // tough attacks: Hyperbugs\n#define AF_MAGIC             Flag(1)    // magical attacks: Flash\n#define AF_STAB              Flag(2)    // stabbing attacks (usually ignored except Hedgehogs)\n#define AF_LANCE             Flag(3)    // lance attacks (used by Lancers)\n#define AF_ONLY_ENEMY        Flag(4)    // only say YES if it is an enemy\n#define AF_ONLY_FRIEND       Flag(5)    // only say YES if it is a friend\n#define AF_ONLY_FBUG         Flag(6)    // only say YES if it is a bug_or friend\n#define AF_BACK              Flag(7)    // backward attacks (ignored except Viziers and Flailers)\n#define AF_APPROACH          Flag(8)    // approach attacks (ignored except Lancers)\n#define AF_IGNORE_UNARMED    Flag(9)    // ignore the UNARMED flag\n#define AF_NOSHIELD          Flag(10)   // ignore the shielded status\n#define AF_GETPLAYER         Flag(11)   // check for player (replace m2 with moPlayer for player position)\n#define AF_GUN               Flag(12)   // revolver attack\n#define AF_FAST              Flag(13)   // fast attack\n#define AF_EAT               Flag(17)   // eating attacks from Worm-likes\n\n#define MF_NOATTACKS         Flag(14)   // don't do any attacks\n#define MF_PATHDIST          Flag(15)   // consider pathdist for moveval\n#define MF_ONLYEAGLE         Flag(16)   // do this only for Eagles\n#define MF_MOUNT             Flag(18)   // don't do\n#define MF_NOFRIEND          Flag(19)   // don't do it for friends\n\n#define AF_SWORD             Flag(20)   // big sword\n#define AF_SWORD_INTO        Flag(21)   // moving into big sword\n#define AF_MSG               Flag(22)   // produce a message\n#define AF_MUSTKILL          Flag(23)   // when TRUE, stunning attacks are not accepted by canAttack\n#define AF_NEXTTURN          Flag(24)   // next turn -- don't count shield at power 1\n#define AF_FALL              Flag(25)   // death by falling\n#define MF_STUNNED           Flag(26)   // edgeunstable: ignore ladders (as stunned monsters do)\n#define MF_IVY               Flag(27)   // edgeunstable: ignore ivy (ivy cannot climb ivy)\n#define AF_HORNS             Flag(28)   // spear attack (always has APPROACH too)\n#define AF_BULL              Flag(29)   // bull attack\n#define AF_SIDE              Flag(30)   // side attack\n#define AF_CRUSH             Flag(31)   // Crusher's delayed attack\n#define AF_PLAGUE            Flag(32)   // Orb of Plague (do not check adjacency)\n#define AF_PSI               Flag(33)   // Orb of the Mind\n#define AF_WEAK              Flag(34)   // Curse of Weakness\n\n#if CAP_SDL\n\n#if CAP_PNG\n#include \"savepng.h\"\n#define IMAGEEXT \".png\"\nvoid IMAGESAVE(SDL_Surface *s, const char *fname);\n#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n#endif\n\n#endif\n\ntemplate<class T> struct dynamicval {\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  };\n\nstruct finalizer {\n  reaction_t f;\n  finalizer(reaction_t r) : f(r) {}\n  ~finalizer() { f(); }\n  };\n\nstatic const int MAXPLAYER = 7;\n\n#define DEFAULTCONTROL (multi::players == 1 && !shmup::on && !multi::alwaysuse)\n#define DEFAULTNOR(sym) (DEFAULTCONTROL || multi::notremapped(sym))\n\n#define CAP_MENUSCALING (ISPANDORA || ISMOBILE)\n\n#if CAP_MENUSCALING\n#define displayfrZ dialog::zoom::displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#else\n#define displayfrZ displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#endif\n\n// just in case if I change my mind about when Orbs lose their power\n#define ORBBASE 0\n\n#define SHADOW_WALL 0x60\n#define SHADOW_SL   0x18\n#define SHADOW_MON  0x30\n\n// ranks:\nenum class PPR {\n  ZERO, EUCLIDEAN_SKY, OUTCIRCLE, MOVESTAR,\n  MINUSINF,\n  BELOWBOTTOMm,\n  BELOWBOTTOM,\n  BELOWBOTTOMp,\n  BELOWBOTTOM_FALLANIM,\n  LAKEBOTTOM, HELLSPIKE,\n  INLAKEWALLm, INLAKEWALL, INLAKEWALLp,\n  INLAKEWALL_FALLANIM,\n  BSHALLOW, SHALLOW, ASHALLOW,\n  SUBLAKELEV, LAKELEV, BOATLEV, BOATLEV2, BOATLEV3,\n  LAKEWALLm, LAKEWALL, LAKEWALLp,\n  LAKEWALL_FALLANIM,\n  FLOOR_TOWER,\n  FLOOR,\n  FLOOR_DRAGON,\n  FLOORa, FLOORb, FLOORc, FLOORd,\n  LIZEYE,\n  BFLOOR,\n  GFLOORa, GFLOORb, GFLOORc,\n  WALLSHADOW,\n  STRUCT0, STRUCT1, STRUCT2, STRUCT3,\n  THORNS, WALL,\n  REDWALLm, REDWALLs, REDWALLp, REDWALL,\n  REDWALLm2, REDWALLs2, REDWALLp2, REDWALLt2,\n  REDWALLm3, REDWALLs3, REDWALLp3, REDWALLt3,\n  HEPTAMARK,\n  ITEM_BELOW,\n  ITEM, ITEMa, ITEMb,\n  BIGSTATUE,\n\n  WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n\n// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n  HIDDEN, GIANTSHADOW,\n  TENTACLE0, TENTACLE1,\n  ONTENTACLE, ONTENTACLE_EYES, ONTENTACLE_EYES2,\n  MONSTER_SHADOW,\n  MONSTER_FOOT, MONSTER_LEG, MONSTER_GROIN,\n  MONSTER_SUBWPN, MONSTER_WPN,\n  MONSTER_BODY, MONSTER_ARMOR0, MONSTER_ARMOR1,\n  MONSTER_CLOAK, MONSTER_NECK,\n  MONSTER_HEAD, MONSTER_FACE, MONSTER_EYE0, MONSTER_EYE1,\n  MONSTER_HAIR, MONSTER_HAT0, MONSTER_HAT1,\n  MONSTER_HOODCLOAK1, MONSTER_HOODCLOAK2,\n  STUNSTARS,\n  CARRIED, CARRIEDa, CARRIEDb,\n  PARTICLE, SWORDMARK, MAGICSWORD, MISSILE, SKY,\n  MINEMARK, ARROW,\n  MOBILE_ARROW,\n  LINE,\n  // in depth tested models transparent surfaces need to be depth sorted by HyperRogue\n  // and set to PPR::TRANSPARENT_* to draw them after all the opaque ones\n  TRANSPARENT_LAKE, TRANSPARENT_SHADOW, TRANSPARENT_WALL,\n  // no depth testing for SUPERLINE and above\n  SUPERLINE, TEXT, CIRCLE,\n  MAX,\n  DEFAULT = -1\n  };\n\ninline PPR operator + (PPR x, int y) { return PPR(int(x) + y); }\ninline PPR operator - (PPR x, int y) { return PPR(int(x) - y); }\ninline int operator - (PPR x, PPR y) { return int(x) - int(y); }\n\n#define OUTLINE_NONE     0x000000FF\n#define OUTLINE_FRIEND   0x00FF00FF\n#define OUTLINE_ENEMY    0xFF0000FF\n#define OUTLINE_TREASURE 0xFFFF00FF\n#define OUTLINE_ORB      0xFF8000FF\n#define OUTLINE_OTHER    0xFFFFFFFF\n#define OUTLINE_DEAD     0x800000FF\n#define OUTLINE_TRANS    0\n#define OUTLINE_DEFAULT  ((bordcolor << 8) + 0xFF)\n#define OUTLINE_FORE     ((forecolor << 8) + 0xFF)\n#define OUTLINE_BACK     ((backcolor << 8) + 0xFF)\n\nenum orbAction { roMouse, roKeyboard, roCheck, roMouseForce, roMultiCheck, roMultiGo };\n\n#define MODELCOUNT ((int) mdGUARD)\n\n#define pconf vid.projection_config\n#if CAP_RUG\n#define vpconf (rug::rugged ? vid.rug_config : vid.projection_config)\n#else\n#define vpconf pconf\n#endif\n#define pmodel (pconf.model)\n\nstatic const int DISTANCE_UNKNOWN = 127;\n\ntemplate<class T, class U> int addHook(hookset<T>& m, int prio, U&& hook) {\n  return m.add(prio, static_cast<U&&>(hook));\n  }\n\ntemplate<class T> void delHook(hookset<T>& m, int prio) {\n  m.del(prio);\n  }\n\ntemplate<class T, class... U> void callhooks(const hookset<T>& h, U&&... args) {\n  return h.callhooks(static_cast<U&&>(args)...);\n  }\n\ntemplate<class T, class V, class... U> V callhandlers(V zero, const hookset<T>& h, U&&... args) {\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }\n\nstring XLAT(string);\n\n#define GLERR(call) glError(call, __FILE__, __LINE__)\n\n#define SHMUPTITLE \"shoot'em up mode\"\n\n// check for a plain number key\n#define NUMBERKEY (interpret_as_direction(sym, uni) ? 0 : uni)\n#define DKEY (get_direction_key(sym, uni))\n#define DIRECTIONKEY (interpret_as_direction(sym, uni) ? uni : 0)\n\nnamespace scores { void load(); }\n\n#if ISMOBILE\nnamespace leader { void showMenu(); void handleKey(int sym, int uni); }\n#endif\n\nint textwidth(int siz, const string &str);\n#if CAP_GL\nint gl_width(int size, const char *s);\n#endif\n\n#if ISMOBILE\nextern int andmode;\nextern bool longclick;\nextern bool useRangedOrb;\n#endif\n\n#ifndef GL\ntypedef float GLfloat;\n#endif\n\ntypedef array<GLfloat, 2> glvec2;\ntypedef array<GLfloat, 3> glvec3;\ntypedef array<GLfloat, 4> glvec4;\n\n#if MAXMDIM == 4\n#define SHDIM 4\ntypedef glvec4 glvertex;\n#else\n#define SHDIM 3\ntypedef glvec3 glvertex;\n#endif\n\nextern int emeraldtable[100][7];\n\n// extern cell *cwpeek(cellwalker cw, int dir);\n\n#define HAUNTED_RADIUS getDistLimit()\n#define UNKNOWN 65535\n\n#define GRAIL_FOUND 0x4000\n#define GRAIL_RADIUS_MASK 0x3FFF\n\nextern vector<cell*> dcal;\n\n// z to close to this limit => do not draw\n\n#define BEHIND_LIMIT 1e-6\n\ntemplate<class T, class U> void eliminate_if(vector<T>& data, U pred) {\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }\n\ntemplate<class T> array<T, 4> make_array(T a, T b, T c, T d) { array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }\ntemplate<class T> array<T, 3> make_array(T a, T b, T c) { array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }\ntemplate<class T> array<T, 2> make_array(T a, T b) { array<T,2> x; x[0] = a; x[1] = b; return x; }\n\n// Find in a std::map or std::unordered_map, or return null.\ntemplate<class Map, class Key>\nconst typename Map::mapped_type *at_or_null(const Map& map, const Key& key) {\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }\n\nnamespace daily {\n  extern bool on;\n  extern int daily_id;\n  void setup();\n  void split();\n  void gifts();\n  void turnoff();\n  void showMenu();\n  int find_daily_lbid(int id);\n  bool prevent_spawn_treasure_on(cell *c);\n  void handleQuit(int sev);\n  void uploadscore(bool really_final);\n  }\n\n#define RING(i) for(double i=0; i<=cgi.S84+1e-6; i+=SD3 * pow(.5, vid.linequality))\n#define REVRING(i) for(double i=cgi.S84; i>=-1e-6; i-=SD3 * pow(.5, vid.linequality))\n#define PRING(i) for(double i=0; i<=cgi.S84+1e-6; i+= pow(.5, vid.linequality))\n#define REVPRING(i) for(double i=cgi.S84; i>=-1e-6; i-=pow(.5, vid.linequality))\n\n#define ONEMPTY if(d == 7 && passable(c, NULL, 0) && !safety && !reptilecheat)\n\ntemplate <class T> void texture_order(const T& f) {\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }\n\n/** find the smallest value of x in range [dmin..dmax] such that f(x) returns true */\n\ntemplate<class T> ld binsearch(ld dmin, ld dmax, const T& f, int iterations = 200) {\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }\n\n  static const int max_vec = (1<<14);\n  extern bool needConfirmationEvenIfSaved();\n\ntypedef unsigned long long flagtype;\n#define Flag(i) (flagtype(1ull<<i))\nstatic inline void set_flag(flagtype& f, flagtype which, bool b) {\n  if(b) f |= which;\n  else f &= ~which;\n  }\n\n}\n\n/** this macro is used to delay performing the action in case if everything is rolled back */\n#define LATE(x) \\\n  if(changes.on) { changes.at_commit([=] { x; }); return; }\n\n// assert macro\n#ifdef NDEBUG\n#define hassert(condition) if(!(condition)) __builtin_unreachable()\n#else\n#define hassert(condition) if(!(condition)) printf(\"%s:%d:%s: assertion failed: %s\\n\", __FILE__, __LINE__, __func__, #condition)\n#endif\n\n#define IS(z) = z\n#include \"autohdr.h\"\n#undef IS\n#define IS(z)\n#define EX\n\n#endif\n",
  "children": [
    {
      "type": "comment",
      "text": "// Hyperbolic Rogue -- main header file",
      "children": []
    },
    {
      "type": "comment",
      "text": "// Copyright (C) 2011-2019 Zeno Rogue, see 'hyper.cpp' for details",
      "children": []
    },
    {
      "type": "comment",
      "text": "/** \\file hyper.h\n *  \\brief The main header file of HyperRogue\n *\n *  Contains general utility macros, various value macros, using clauses for standard library functions,\n *  implementation of the basic connection_table, walker, cell and heptagon classes,\n *  and general routines which did not fit elsewhere\n */",
      "children": []
    },
    {
      "type": "preproc_ifdef",
      "text": "#ifndef _HYPER_H_\n#define _HYPER_H_\n\n// version numbers\n#define VER \"12.1h\"\n#define VERNUM_HEX 0xA928\n\n#include \"sysconfig.h\"\n\n#include <stdarg.h>\n#include \"hyper_function.h\"\n\n/** \\brief the main namespace of HyperRogue */\nnamespace hr {\n\n/** \\brief A helper structure that acts as a boolean which is always false. Helpful when disabling stuff with compiler flags. */\nstruct always_false {\n  operator bool() const { return false; }\n  bool operator = (bool b) const { return b; }\n  };\n\n/** \\brief placate GCC's overzealous -Wunused-result */\ntemplate<class T>\nvoid ignore(T&&) {\n  }\n\n/** \\brief a simple static_cast<void*> for use with printf(\"%p\") */\ninline const void *voidp(const void *p) {\n  return p;\n  }\n\n/** \\brief Is the value of first parameter equal to one of the remaining parameters? */\ntemplate<class T, class V, class... U> bool among(T x, V y) { return x == y; }\ntemplate<class T, class V, class... U> bool among(T x, V y, U... u) { return x==y || among(x,u...); }\n\n// functions and types used from the standard library\nusing std::vector;\nusing std::map;\nusing std::array;\nusing std::sort;\nusing std::multimap;\nusing std::set;\nusing std::string;\nusing std::pair;\nusing std::tuple;\nusing std::shared_ptr;\nusing std::make_shared;\nusing std::min;\nusing std::max;\nusing std::make_pair;\nusing std::tie;\nusing std::queue;\nusing std::swap;\nusing std::complex;\nusing std::reverse;\nusing std::real;\nusing std::imag;\nusing std::stable_sort;\nusing std::out_of_range;\nusing std::get;\nusing std::move;\nusing std::make_tuple;\nusing std::unique_ptr;\n\nusing std::abs;\nusing std::isfinite;\nusing std::isnan;\nusing std::isinf;\nusing std::log;\nusing std::exp;\nusing std::sin;\nusing std::cos;\nusing std::sinh;\nusing std::asin;\nusing std::acos;\nusing std::tan;\nusing std::atan;\nusing std::atan2;\nusing std::tanh;\nusing std::sqrt;\nusing std::pow;\nusing std::floor;\nusing std::ceil;\n#ifndef NO_STD_HYPOT\nusing std::hypot;\nusing std::asinh;\nusing std::acosh;\n#endif\n\nstruct hr_exception : std::runtime_error {\n    explicit hr_exception() : std::runtime_error(\"hr_exception\") {}\n    explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}\n};\n\nstruct hr_shortest_path_exception { };\n\n// genus (in grammar)\n#define GEN_M 0\n#define GEN_F 1\n#define GEN_N 2\n#define GEN_O 3\n#define GEN_BASE_MASK   7\n\n#define GENF_ELISION    (1 << 3)\n#define GENF_PLURALONLY (1 << 4)\n#define GENF_PROPER     (1 << 5)\n\n// Add a message to the GUI.\n// If multiple messages appear with the same spamtype != 0, the older ones disappear quickly\nvoid addMessage(string s, char spamtype = 0);\n\n// geometry-dependent constants\n\n#define cginf ginf[geometry]\n\n#define S7 cginf.sides\n#define S3 cginf.vertex\n#define hyperbolic_37 (S7 == 7 && S3 == 3 && !bt::in() && !arcm::in())\n#define hyperbolic_not37 ((S7 > 7 || S3 > 3 || bt::in() || arcm::in()) && hyperbolic)\n#define weirdhyperbolic ((S7 > 7 || S3 > 3 || !STDVAR || bt::in() || arcm::in() || arb::in()) && hyperbolic)\n#define stdhyperbolic (S7 == 7 && S3 == 3 && STDVAR && !bt::in() && !arcm::in() && !arb::in())\n\n#define cgflags cginf.flags\n\n#define cryst (cgflags & qCRYSTAL)\n\n/** convenience flag for geometries with major aspects missing */\n#define experimental (cgflags & qEXPERIMENTAL)\n\n// these geometries do not feature alternate structures for horocycles\n#define eubinary (euclid || bt::in() || cryst || nil)\n\n#define cgclass (cginf.cclass)\n#define euclid (cgclass == gcEuclid)\n#define sphere (cgclass == gcSphere)\n#define sol (among(cgclass, gcSol, gcSolN))\n#define nih (among(cgclass, gcNIH, gcSolN))\n#define nil (cgclass == gcNil)\n#define sl2 (cgclass == gcSL2)\n#define rotspace (geometry == gRotSpace)\n#define hyperbolic (cgclass == gcHyperbolic)\n#define nonisotropic (among(cgclass, gcSol, gcSolN, gcNIH, gcSL2, gcNil))\n#define translatable (euclid || nonisotropic)\n#define nonorientable (cgflags & qNONORIENTABLE)\n#define elliptic (cgflags & qELLIPTIC)\n#define quotient (cgflags & qANYQ)\n#define smallbounded ((cgflags & qSMALL) || disksize)\n#define closed_manifold (cgflags & qCLOSED)\n#define closed_or_bounded (closed_manifold || disksize)\n/** the actual map has hybrid geometry, not just the graphics */\n#define mhybrid (cgflags & qHYBRID)\n/** graphics based on a product geometry -- either embedded or actual hybrid product */\n#define gproduct (cgclass == gcProduct)\n\n/** 2D geometry embedded in 3D */\n#define embedded_plane (WDIM == 2 && GDIM == 3)\n/** the actual map is product, not just the graphics */\n#define mproduct (gproduct && !embedded_plane)\n/** the actual map is product, not just the graphics */\n#define meuclid (geom3::mgclass() == gcEuclid)\n#define msphere (geom3::mgclass() == gcSphere)\n#define mhyperbolic (geom3::mgclass() == gcHyperbolic)\n\n// Dry Forest burning, heat transfer, etc. are performed on the whole universe\n#define doall (closed_or_bounded)\n\n#define sphere_narcm (sphere && !arcm::in())\n\n#define a4 (S3 == 4)\n#define a45 (S3 == 4 && S7 == 5)\n#define a46 (S3 == 4 && S7 == 6)\n#define a47 (S3 == 4 && S7 == 7)\n#define a457 (S3 == 4 && S7 != 6)\n#define a467 (S3 == 4 && S7 >= 6)\n#define a38 (S3 == 3 && S7 == 8)\n#define sphere4 (sphere && S7 == 4)\n#define stdeuc (geometry == gNormal || geometry == gEuclid || geometry == gEuclidSquare)\n#define smallsphere (sphere_narcm && S7 < 5)\n#define bigsphere (sphere_narcm && S7 == 5)\n\n#define S6 (S3*2)\n#define MAX_S3 4\n\n#define SG6 (S3==3?6:4)\n#define SG3 (S3==3?3:2)\n#define SG2 (S3==3?2:1)\n\n#define GOLDBERG_INV (GOLDBERG || INVERSE)\n\n#define INVERSE among(variation, eVariation::unrectified, eVariation::warped, eVariation::untruncated )\n\n#define UNRECTIFIED (variation == eVariation::unrectified)\n#define WARPED (variation == eVariation::warped)\n#define UNTRUNCATED (variation == eVariation::untruncated)\n\n#define GOLDBERG (variation == eVariation::goldberg)\n#define IRREGULAR (variation == eVariation::irregular)\n#define PURE (variation == eVariation::pure)\n#define BITRUNCATED (variation == eVariation::bitruncated)\n#define DUAL (variation == eVariation::dual)\n#define DUALMUL (DUAL ? 2 : 1)\n\n#define CHANGED_VARIATION (variation != cginf.default_variation)\n\n#define STDVAR (PURE || BITRUNCATED)\n#define NONSTDVAR (!STDVAR)\n\n#define VALENCE current_valence()\n\n#define NUMWITCH 7\n\n// achievements\n\n#define LB_YENDOR_CHALLENGE 40\n#define LB_PURE_TACTICS 41\n#define NUMLEADER 87\n#define LB_PURE_TACTICS_SHMUP 49\n#define LB_PURE_TACTICS_COOP 50\n#define LB_RACING 81\n\n#if ISMOBILE || ISWEB || ISPANDORA || 1\ntypedef double ld;\n#define LDF \"%lf\"\n#define PLDF \"lf\"\n#else\ntypedef long double ld;\n#define LDF \"%Lf\"\n#define PLDF \"Lf\"\n#endif\n\ntypedef complex<ld> cld;\n\ntypedef unsigned color_t;\n\nstruct charstyle {\n  int charid;\n  color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;\n  bool lefthanded;\n  };\n\nenum eStereo { sOFF, sAnaglyph, sLR, sODS };\n\nenum eModel : int;\n\n/** configuration of the projection */\nstruct projection_configuration {\n  eModel model;            /**< which projection, see classes.cpp */\n  ld xposition, yposition; /**< move the center to another position */\n  ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;\n  ld clip_min, clip_max;\n  ld model_orientation, halfplane_scale, model_orientation_yz;\n  ld collignon_parameter;\n  ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;\n  bool show_hyperboloid_flat;\n  bool collignon_reflected;\n  string formula;\n  eModel basic_model;\n  ld top_z;\n  ld model_transition;\n  ld spiral_angle;\n  ld spiral_x;\n  ld spiral_y;\n  bool use_atan;\n  ld right_spiral_multiplier;\n  ld any_spiral_multiplier;\n  ld sphere_spiral_multiplier;\n  ld spiral_cone;\n  ld skiprope;\n  ld product_z_scale;\n  ld rotational_nil;\n\n  ld depth_scaling;\n  ld hyperboloid_scaling;\n  ld vr_angle, vr_zshift, vr_scale_factor;\n  bool dualfocus_autoscale;\n\n  int back_and_front; /* 0 = do not, 1 = do, 2 = only back */\n\n  projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }\n  };\n\nenum eThreatLevel { tlNoThreat, tlSpam, tlNormal, tlHighThreat };\n\nstruct videopar {\n  projection_configuration projection_config, rug_config;\n  ld yshift;\n  ld sspeed, mspeed;\n  ld binary_width, fixed_facing_dir;\n  int mobilecompasssize;\n  int radarsize; // radar for 3D geometries\n  ld radarrange;\n  int aurastr, aurasmoothen;\n  bool fixed_facing;\n  bool fixed_yz;\n  bool use_wall_radar;\n\n  int linequality;\n\n  bool want_fullscreen;\n  bool full;\n  bool change_fullscr;\n  bool relative_window_size;\n  bool want_vsync;\n  bool current_vsync;\n\n  int graphglyph; // graphical glyphs\n  bool darkhepta;\n  int shifttarget;\n\n  int xres, yres, framelimit;\n\n  int xscr, yscr;\n\n  int fullscreen_x, fullscreen_y;\n  int window_x, window_y;\n  ld window_rel_x, window_rel_y;\n\n  bool grid;\n  bool particles;\n\n  bool relative_font;\n  int fsize, abs_fsize, fontscale;\n  int flashtime;\n\n  int wallmode, monmode, axes, highlightmode, orbmode;\n  bool axes3;\n  bool revcontrol;\n\n  int msgleft, msglimit;\n\n  bool wantGL;\n  int want_antialias;\n  bool fineline;\n\n  bool usingGL;\n  int antialias;\n  #define AA_NOGL      1\n  #define AA_VERSION   2\n  #define AA_LINES     4\n  #define AA_POLY      8\n  #define AA_FONT      32\n  #define AA_MULTI     64\n  #define AA_MULTI16   128 // not configurable\n  ld linewidth;\n\n  ld multiplier_grid, multiplier_ring;\n\n  int joyvalue, joyvalue2, joypanthreshold;\n  ld joypanspeed;\n\n  charstyle cs;\n\n  bool samegender; // same gender for the Princess?\n  int language;\n\n  bool backeffects; // background particle effects\n\n  int killreduction, itemreduction, portreduction;\n\n  int steamscore;\n  bool drawmousecircle; // draw the circle around the mouse\n  bool skipstart;       // skip the start menu\n  bool quickmouse;      // quick mouse on the map\n  bool sloppy_3d;       // make 3D faster but ugly\n  int timeformat;       // time format used in the message log\n\n  int use_smart_range;  // 0 = distance-based, 1 = model-based, 2 = model-based and generate\n  ld smart_range_detail;// minimum visible cell for modes 1 and 2\n  ld smart_range_detail_3;// minimum visible cell in 3D (for mode 2, there is no mode 1)\n  bool smart_area_based;// based on area or length?\n  int cells_drawn_limit;\n  int cells_generated_limit; // limit on cells generated per frame\n\n  eStereo stereo_mode;\n  ld ipd;\n  ld lr_eyewidth, anaglyph_eyewidth;\n  ld fov;\n  bool consider_shader_projection;\n  int desaturate;\n  int texture_step;\n\n\n  bool always3;  // always use the 3D engine\n  ld depth;      // world level below the plane\n  ld camera;     // camera level above the plane\n  ld wall_height, creature_scale, height_width;\n  ld lake_top, lake_bottom;\n  ld rock_wall_ratio;\n  ld human_wall_ratio;\n  bool pseudohedral; // in 3D modes\n  ld depth_bonus;   // to fiix the placement of 3D models in pseudogonal -- not working currently\n\n  int tc_alpha, tc_depth, tc_camera;\n  ld highdetail, middetail;\n  bool gp_autoscale_heights;\n\n  ld eye;\n  bool auto_eye;\n\n  ld plevel_factor;\n  bool bubbles_special, bubbles_threshold, bubbles_all;\n  int joysmooth;\n\n  eThreatLevel faraway_highlight; // draw attention to monsters on the horizon\n  int faraway_highlight_color; // 0 = monster color, 100 = red-green oscillation\n\n  ld ispeed;\n  bool flasheffects;\n  };\n\nextern videopar vid;\n\n/** \\brief How many dimensional is the gameplay. In the FPP mode of a 2D geometry, WDIM is 2 */\n#define WDIM cginf.g.gameplay_dimension\n/** \\brief How many dimensional is the graphical representation. In the FPP mode of a 2D geometry, MDIM is 3 */\n#define GDIM cginf.g.graphical_dimension\n/** \\brief How many dimensions of the matrix representation are used. It is usually 3 in 2D geometries (not FPP) and in product geometries, 4 in 3D geometries */\n#define MDIM (MAXMDIM == 3 ? 3 : cginf.g.homogeneous_dimension)\n/** \\brief What dimension of matrices is used in loops (the 'extra' dimensions have values 0 or 1 as in Id)\n *  Even if MDIM==3, it may be faster to keep 4x4 matrices and perform computations using them (rather than having another condition due to the variable loop size).\n *  The experiments on my computer show it to be the case, but the effect is not significant, and it may be different on another computer.\n */\n#define MXDIM (CAP_MDIM_FIXED ? MAXMDIM : MDIM)\n/** \\brief The 'homogeneous' dimension index */\n#define LDIM (MDIM-1)\n#define cclass g.kind\n\n#define self (*this)\n\n#define BUGCOLORS 3\n\n#define big_unlock (inv::on && !ls::any_chaos())\n\n// land completion for shared unlocking\n#define U5 (big_unlock ? 10 : 5)\n// land completion for advanced unlocking\n#define U10 (big_unlock ? 25 : 10)\n\n// land completion\n#define R10 (big_unlock ? 50 : 10)\n// intermediate lands\n#define R30 (big_unlock ? 100 : 30)\n// advanced lands\n#define R60 (big_unlock ? 200 : 60)\n// advanced lands II\n#define R90 (big_unlock ? 300 : 90)\n// Crossroads IV\n#define R200 (big_unlock ? 800 : 200)\n// Crossroads V\n#define R300 (big_unlock ? 1200 : 300)\n// kill types for Dragon Chasms\n#define R20 (big_unlock ? 30 : 20)\n// kill count for Graveyard/Hive\n#define R100 (big_unlock ? 500 : 100)\n\n// size casted to int, to prevent warnings and actual errors caused by the unsignedness of x.size()\ntemplate<class T> int isize(const T& x) {return x.size(); }\n\n// automatically growing vector\ntemplate<class T> struct grow_vector : public vector<T> {\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  };\n\n// game forward declarations\n\nnamespace anticheat { extern bool tampered; }\n#define HRANDMAX 0x7FFFFFFF\n\nstruct movedir {\n  int d;\n  // non-negative numbers denote 'rotate +d steps and act in this direction\n  // negative numbers have the following meanings (warning: not used consistently):\n  #define MD_WAIT (-1)\n  #define MD_DROP (-2)\n  #define MD_UNDECIDED (-3)\n  #define MD_USE_ORB (-4)\n  int subdir; // for normal movement (0+): turn left or right\n  struct cell *tgt;  // for MD_USE_ORB: target cell\n  };\n\n// shmup\n\ntemplate<class T>\nclass hookset {\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n};\n\nusing purehookset = hookset<void()>;\n\nstatic const int NOHINT = -1;\n\ntypedef function<void()> reaction_t;\ntypedef function<bool()> bool_reaction_t;\n\nvoid offer_choose_file(reaction_t r);\n\n#define HELPFUN(x) (help_delegate = x, \"HELPFUN\")\n\ntypedef function<int(struct cell*)> cellfunction;\n\n// passable flags\n\n#define SAGEMELT .1\n#define PT(x, y) ((tactic::on || quotient == 2 || daily::on) ? (y) : inv::on ? min(2*(y),x) : (x))\n#define ROCKSNAKELENGTH 50\n#define WORMLENGTH 15\n#define PRIZEMUL 7\n\n#define INF  9999\n#define INFD 60\n#define PINFD 125\n#ifndef BARLEV\n#define BARLEV ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)\n#endif\n#define BUGLEV 15\n// #define BARLEV 9\n\n#define YDIST 101\n#define MODECODES (1ll<<61)\n\n#define GUNRANGE 3\n\n// loops\n\n#define fakecellloop(ct) for(cell *ct = (cell*)1; ct; ct=NULL)\n\n#define forCellIdAll(ct, i, cf) fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=(cf)->move(i),true); i++)\n#define forCellIdCM(ct, i, cf)  fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=createMov((cf),i),true); i++)\n#define forCellIdEx(ct, i, cf)  forCellIdAll(ct,i,cf) if(ct)\n\n#define forCellEx(ct, cf) forCellIdEx(ct,forCellEx ## __LINE__,cf)\n#define forCellCM(ct, cf) forCellIdCM(ct,forCellCM ## __LINE__,cf)\n#define forCellAll(ct, cf) forCellIdCM(ct,forCellAll ## __LINE__,cf)\n\n// canAttack/moveval flags\n\n#define AF_NORMAL            0          // nothing special about this attack\n\n#define AF_TOUGH             Flag(0)    // tough attacks: Hyperbugs\n#define AF_MAGIC             Flag(1)    // magical attacks: Flash\n#define AF_STAB              Flag(2)    // stabbing attacks (usually ignored except Hedgehogs)\n#define AF_LANCE             Flag(3)    // lance attacks (used by Lancers)\n#define AF_ONLY_ENEMY        Flag(4)    // only say YES if it is an enemy\n#define AF_ONLY_FRIEND       Flag(5)    // only say YES if it is a friend\n#define AF_ONLY_FBUG         Flag(6)    // only say YES if it is a bug_or friend\n#define AF_BACK              Flag(7)    // backward attacks (ignored except Viziers and Flailers)\n#define AF_APPROACH          Flag(8)    // approach attacks (ignored except Lancers)\n#define AF_IGNORE_UNARMED    Flag(9)    // ignore the UNARMED flag\n#define AF_NOSHIELD          Flag(10)   // ignore the shielded status\n#define AF_GETPLAYER         Flag(11)   // check for player (replace m2 with moPlayer for player position)\n#define AF_GUN               Flag(12)   // revolver attack\n#define AF_FAST              Flag(13)   // fast attack\n#define AF_EAT               Flag(17)   // eating attacks from Worm-likes\n\n#define MF_NOATTACKS         Flag(14)   // don't do any attacks\n#define MF_PATHDIST          Flag(15)   // consider pathdist for moveval\n#define MF_ONLYEAGLE         Flag(16)   // do this only for Eagles\n#define MF_MOUNT             Flag(18)   // don't do\n#define MF_NOFRIEND          Flag(19)   // don't do it for friends\n\n#define AF_SWORD             Flag(20)   // big sword\n#define AF_SWORD_INTO        Flag(21)   // moving into big sword\n#define AF_MSG               Flag(22)   // produce a message\n#define AF_MUSTKILL          Flag(23)   // when TRUE, stunning attacks are not accepted by canAttack\n#define AF_NEXTTURN          Flag(24)   // next turn -- don't count shield at power 1\n#define AF_FALL              Flag(25)   // death by falling\n#define MF_STUNNED           Flag(26)   // edgeunstable: ignore ladders (as stunned monsters do)\n#define MF_IVY               Flag(27)   // edgeunstable: ignore ivy (ivy cannot climb ivy)\n#define AF_HORNS             Flag(28)   // spear attack (always has APPROACH too)\n#define AF_BULL              Flag(29)   // bull attack\n#define AF_SIDE              Flag(30)   // side attack\n#define AF_CRUSH             Flag(31)   // Crusher's delayed attack\n#define AF_PLAGUE            Flag(32)   // Orb of Plague (do not check adjacency)\n#define AF_PSI               Flag(33)   // Orb of the Mind\n#define AF_WEAK              Flag(34)   // Curse of Weakness\n\n#if CAP_SDL\n\n#if CAP_PNG\n#include \"savepng.h\"\n#define IMAGEEXT \".png\"\nvoid IMAGESAVE(SDL_Surface *s, const char *fname);\n#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n#endif\n\n#endif\n\ntemplate<class T> struct dynamicval {\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  };\n\nstruct finalizer {\n  reaction_t f;\n  finalizer(reaction_t r) : f(r) {}\n  ~finalizer() { f(); }\n  };\n\nstatic const int MAXPLAYER = 7;\n\n#define DEFAULTCONTROL (multi::players == 1 && !shmup::on && !multi::alwaysuse)\n#define DEFAULTNOR(sym) (DEFAULTCONTROL || multi::notremapped(sym))\n\n#define CAP_MENUSCALING (ISPANDORA || ISMOBILE)\n\n#if CAP_MENUSCALING\n#define displayfrZ dialog::zoom::displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#else\n#define displayfrZ displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#endif\n\n// just in case if I change my mind about when Orbs lose their power\n#define ORBBASE 0\n\n#define SHADOW_WALL 0x60\n#define SHADOW_SL   0x18\n#define SHADOW_MON  0x30\n\n// ranks:\nenum class PPR {\n  ZERO, EUCLIDEAN_SKY, OUTCIRCLE, MOVESTAR,\n  MINUSINF,\n  BELOWBOTTOMm,\n  BELOWBOTTOM,\n  BELOWBOTTOMp,\n  BELOWBOTTOM_FALLANIM,\n  LAKEBOTTOM, HELLSPIKE,\n  INLAKEWALLm, INLAKEWALL, INLAKEWALLp,\n  INLAKEWALL_FALLANIM,\n  BSHALLOW, SHALLOW, ASHALLOW,\n  SUBLAKELEV, LAKELEV, BOATLEV, BOATLEV2, BOATLEV3,\n  LAKEWALLm, LAKEWALL, LAKEWALLp,\n  LAKEWALL_FALLANIM,\n  FLOOR_TOWER,\n  FLOOR,\n  FLOOR_DRAGON,\n  FLOORa, FLOORb, FLOORc, FLOORd,\n  LIZEYE,\n  BFLOOR,\n  GFLOORa, GFLOORb, GFLOORc,\n  WALLSHADOW,\n  STRUCT0, STRUCT1, STRUCT2, STRUCT3,\n  THORNS, WALL,\n  REDWALLm, REDWALLs, REDWALLp, REDWALL,\n  REDWALLm2, REDWALLs2, REDWALLp2, REDWALLt2,\n  REDWALLm3, REDWALLs3, REDWALLp3, REDWALLt3,\n  HEPTAMARK,\n  ITEM_BELOW,\n  ITEM, ITEMa, ITEMb,\n  BIGSTATUE,\n\n  WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n\n// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n  HIDDEN, GIANTSHADOW,\n  TENTACLE0, TENTACLE1,\n  ONTENTACLE, ONTENTACLE_EYES, ONTENTACLE_EYES2,\n  MONSTER_SHADOW,\n  MONSTER_FOOT, MONSTER_LEG, MONSTER_GROIN,\n  MONSTER_SUBWPN, MONSTER_WPN,\n  MONSTER_BODY, MONSTER_ARMOR0, MONSTER_ARMOR1,\n  MONSTER_CLOAK, MONSTER_NECK,\n  MONSTER_HEAD, MONSTER_FACE, MONSTER_EYE0, MONSTER_EYE1,\n  MONSTER_HAIR, MONSTER_HAT0, MONSTER_HAT1,\n  MONSTER_HOODCLOAK1, MONSTER_HOODCLOAK2,\n  STUNSTARS,\n  CARRIED, CARRIEDa, CARRIEDb,\n  PARTICLE, SWORDMARK, MAGICSWORD, MISSILE, SKY,\n  MINEMARK, ARROW,\n  MOBILE_ARROW,\n  LINE,\n  // in depth tested models transparent surfaces need to be depth sorted by HyperRogue\n  // and set to PPR::TRANSPARENT_* to draw them after all the opaque ones\n  TRANSPARENT_LAKE, TRANSPARENT_SHADOW, TRANSPARENT_WALL,\n  // no depth testing for SUPERLINE and above\n  SUPERLINE, TEXT, CIRCLE,\n  MAX,\n  DEFAULT = -1\n  };\n\ninline PPR operator + (PPR x, int y) { return PPR(int(x) + y); }\ninline PPR operator - (PPR x, int y) { return PPR(int(x) - y); }\ninline int operator - (PPR x, PPR y) { return int(x) - int(y); }\n\n#define OUTLINE_NONE     0x000000FF\n#define OUTLINE_FRIEND   0x00FF00FF\n#define OUTLINE_ENEMY    0xFF0000FF\n#define OUTLINE_TREASURE 0xFFFF00FF\n#define OUTLINE_ORB      0xFF8000FF\n#define OUTLINE_OTHER    0xFFFFFFFF\n#define OUTLINE_DEAD     0x800000FF\n#define OUTLINE_TRANS    0\n#define OUTLINE_DEFAULT  ((bordcolor << 8) + 0xFF)\n#define OUTLINE_FORE     ((forecolor << 8) + 0xFF)\n#define OUTLINE_BACK     ((backcolor << 8) + 0xFF)\n\nenum orbAction { roMouse, roKeyboard, roCheck, roMouseForce, roMultiCheck, roMultiGo };\n\n#define MODELCOUNT ((int) mdGUARD)\n\n#define pconf vid.projection_config\n#if CAP_RUG\n#define vpconf (rug::rugged ? vid.rug_config : vid.projection_config)\n#else\n#define vpconf pconf\n#endif\n#define pmodel (pconf.model)\n\nstatic const int DISTANCE_UNKNOWN = 127;\n\ntemplate<class T, class U> int addHook(hookset<T>& m, int prio, U&& hook) {\n  return m.add(prio, static_cast<U&&>(hook));\n  }\n\ntemplate<class T> void delHook(hookset<T>& m, int prio) {\n  m.del(prio);\n  }\n\ntemplate<class T, class... U> void callhooks(const hookset<T>& h, U&&... args) {\n  return h.callhooks(static_cast<U&&>(args)...);\n  }\n\ntemplate<class T, class V, class... U> V callhandlers(V zero, const hookset<T>& h, U&&... args) {\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }\n\nstring XLAT(string);\n\n#define GLERR(call) glError(call, __FILE__, __LINE__)\n\n#define SHMUPTITLE \"shoot'em up mode\"\n\n// check for a plain number key\n#define NUMBERKEY (interpret_as_direction(sym, uni) ? 0 : uni)\n#define DKEY (get_direction_key(sym, uni))\n#define DIRECTIONKEY (interpret_as_direction(sym, uni) ? uni : 0)\n\nnamespace scores { void load(); }\n\n#if ISMOBILE\nnamespace leader { void showMenu(); void handleKey(int sym, int uni); }\n#endif\n\nint textwidth(int siz, const string &str);\n#if CAP_GL\nint gl_width(int size, const char *s);\n#endif\n\n#if ISMOBILE\nextern int andmode;\nextern bool longclick;\nextern bool useRangedOrb;\n#endif\n\n#ifndef GL\ntypedef float GLfloat;\n#endif\n\ntypedef array<GLfloat, 2> glvec2;\ntypedef array<GLfloat, 3> glvec3;\ntypedef array<GLfloat, 4> glvec4;\n\n#if MAXMDIM == 4\n#define SHDIM 4\ntypedef glvec4 glvertex;\n#else\n#define SHDIM 3\ntypedef glvec3 glvertex;\n#endif\n\nextern int emeraldtable[100][7];\n\n// extern cell *cwpeek(cellwalker cw, int dir);\n\n#define HAUNTED_RADIUS getDistLimit()\n#define UNKNOWN 65535\n\n#define GRAIL_FOUND 0x4000\n#define GRAIL_RADIUS_MASK 0x3FFF\n\nextern vector<cell*> dcal;\n\n// z to close to this limit => do not draw\n\n#define BEHIND_LIMIT 1e-6\n\ntemplate<class T, class U> void eliminate_if(vector<T>& data, U pred) {\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }\n\ntemplate<class T> array<T, 4> make_array(T a, T b, T c, T d) { array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }\ntemplate<class T> array<T, 3> make_array(T a, T b, T c) { array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }\ntemplate<class T> array<T, 2> make_array(T a, T b) { array<T,2> x; x[0] = a; x[1] = b; return x; }\n\n// Find in a std::map or std::unordered_map, or return null.\ntemplate<class Map, class Key>\nconst typename Map::mapped_type *at_or_null(const Map& map, const Key& key) {\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }\n\nnamespace daily {\n  extern bool on;\n  extern int daily_id;\n  void setup();\n  void split();\n  void gifts();\n  void turnoff();\n  void showMenu();\n  int find_daily_lbid(int id);\n  bool prevent_spawn_treasure_on(cell *c);\n  void handleQuit(int sev);\n  void uploadscore(bool really_final);\n  }\n\n#define RING(i) for(double i=0; i<=cgi.S84+1e-6; i+=SD3 * pow(.5, vid.linequality))\n#define REVRING(i) for(double i=cgi.S84; i>=-1e-6; i-=SD3 * pow(.5, vid.linequality))\n#define PRING(i) for(double i=0; i<=cgi.S84+1e-6; i+= pow(.5, vid.linequality))\n#define REVPRING(i) for(double i=cgi.S84; i>=-1e-6; i-=pow(.5, vid.linequality))\n\n#define ONEMPTY if(d == 7 && passable(c, NULL, 0) && !safety && !reptilecheat)\n\ntemplate <class T> void texture_order(const T& f) {\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }\n\n/** find the smallest value of x in range [dmin..dmax] such that f(x) returns true */\n\ntemplate<class T> ld binsearch(ld dmin, ld dmax, const T& f, int iterations = 200) {\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }\n\n  static const int max_vec = (1<<14);\n  extern bool needConfirmationEvenIfSaved();\n\ntypedef unsigned long long flagtype;\n#define Flag(i) (flagtype(1ull<<i))\nstatic inline void set_flag(flagtype& f, flagtype which, bool b) {\n  if(b) f |= which;\n  else f &= ~which;\n  }\n\n}\n\n/** this macro is used to delay performing the action in case if everything is rolled back */\n#define LATE(x) \\\n  if(changes.on) { changes.at_commit([=] { x; }); return; }\n\n// assert macro\n#ifdef NDEBUG\n#define hassert(condition) if(!(condition)) __builtin_unreachable()\n#else\n#define hassert(condition) if(!(condition)) printf(\"%s:%d:%s: assertion failed: %s\\n\", __FILE__, __LINE__, __func__, #condition)\n#endif\n\n#define IS(z) = z\n#include \"autohdr.h\"\n#undef IS\n#define IS(z)\n#define EX\n\n#endif",
      "children": [
        {
          "type": "#ifndef",
          "text": "#ifndef",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_HYPER_H_",
          "children": []
        },
        {
          "type": "preproc_def",
          "text": "#define _HYPER_H_\n\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_HYPER_H_",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n\n",
              "children": []
            }
          ]
        },
        {
          "type": "comment",
          "text": "// version numbers",
          "children": []
        },
        {
          "type": "preproc_def",
          "text": "#define VER \"12.1h\"\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "VER",
              "children": []
            },
            {
              "type": "preproc_arg",
              "text": " \"12.1h\"",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_def",
          "text": "#define VERNUM_HEX 0xA928\n\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "VERNUM_HEX",
              "children": []
            },
            {
              "type": "preproc_arg",
              "text": " 0xA928",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_include",
          "text": "#include \"sysconfig.h\"\n\n",
          "children": [
            {
              "type": "#include",
              "text": "#include",
              "children": []
            },
            {
              "type": "string_literal",
              "text": "\"sysconfig.h\"",
              "children": [
                {
                  "type": "\"",
                  "text": "\"",
                  "children": []
                },
                {
                  "type": "\"",
                  "text": "\"",
                  "children": []
                }
              ]
            },
            {
              "type": "\n",
              "text": "\n\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_include",
          "text": "#include <stdarg.h>\n",
          "children": [
            {
              "type": "#include",
              "text": "#include",
              "children": []
            },
            {
              "type": "system_lib_string",
              "text": "<stdarg.h>",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_include",
          "text": "#include \"hyper_function.h\"\n\n",
          "children": [
            {
              "type": "#include",
              "text": "#include",
              "children": []
            },
            {
              "type": "string_literal",
              "text": "\"hyper_function.h\"",
              "children": [
                {
                  "type": "\"",
                  "text": "\"",
                  "children": []
                },
                {
                  "type": "\"",
                  "text": "\"",
                  "children": []
                }
              ]
            },
            {
              "type": "\n",
              "text": "\n\n",
              "children": []
            }
          ]
        },
        {
          "type": "comment",
          "text": "/** \\brief the main namespace of HyperRogue */",
          "children": []
        },
        {
          "type": "namespace_definition",
          "text": "namespace hr {\n\n/** \\brief A helper structure that acts as a boolean which is always false. Helpful when disabling stuff with compiler flags. */\nstruct always_false {\n  operator bool() const { return false; }\n  bool operator = (bool b) const { return b; }\n  };\n\n/** \\brief placate GCC's overzealous -Wunused-result */\ntemplate<class T>\nvoid ignore(T&&) {\n  }\n\n/** \\brief a simple static_cast<void*> for use with printf(\"%p\") */\ninline const void *voidp(const void *p) {\n  return p;\n  }\n\n/** \\brief Is the value of first parameter equal to one of the remaining parameters? */\ntemplate<class T, class V, class... U> bool among(T x, V y) { return x == y; }\ntemplate<class T, class V, class... U> bool among(T x, V y, U... u) { return x==y || among(x,u...); }\n\n// functions and types used from the standard library\nusing std::vector;\nusing std::map;\nusing std::array;\nusing std::sort;\nusing std::multimap;\nusing std::set;\nusing std::string;\nusing std::pair;\nusing std::tuple;\nusing std::shared_ptr;\nusing std::make_shared;\nusing std::min;\nusing std::max;\nusing std::make_pair;\nusing std::tie;\nusing std::queue;\nusing std::swap;\nusing std::complex;\nusing std::reverse;\nusing std::real;\nusing std::imag;\nusing std::stable_sort;\nusing std::out_of_range;\nusing std::get;\nusing std::move;\nusing std::make_tuple;\nusing std::unique_ptr;\n\nusing std::abs;\nusing std::isfinite;\nusing std::isnan;\nusing std::isinf;\nusing std::log;\nusing std::exp;\nusing std::sin;\nusing std::cos;\nusing std::sinh;\nusing std::asin;\nusing std::acos;\nusing std::tan;\nusing std::atan;\nusing std::atan2;\nusing std::tanh;\nusing std::sqrt;\nusing std::pow;\nusing std::floor;\nusing std::ceil;\n#ifndef NO_STD_HYPOT\nusing std::hypot;\nusing std::asinh;\nusing std::acosh;\n#endif\n\nstruct hr_exception : std::runtime_error {\n    explicit hr_exception() : std::runtime_error(\"hr_exception\") {}\n    explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}\n};\n\nstruct hr_shortest_path_exception { };\n\n// genus (in grammar)\n#define GEN_M 0\n#define GEN_F 1\n#define GEN_N 2\n#define GEN_O 3\n#define GEN_BASE_MASK   7\n\n#define GENF_ELISION    (1 << 3)\n#define GENF_PLURALONLY (1 << 4)\n#define GENF_PROPER     (1 << 5)\n\n// Add a message to the GUI.\n// If multiple messages appear with the same spamtype != 0, the older ones disappear quickly\nvoid addMessage(string s, char spamtype = 0);\n\n// geometry-dependent constants\n\n#define cginf ginf[geometry]\n\n#define S7 cginf.sides\n#define S3 cginf.vertex\n#define hyperbolic_37 (S7 == 7 && S3 == 3 && !bt::in() && !arcm::in())\n#define hyperbolic_not37 ((S7 > 7 || S3 > 3 || bt::in() || arcm::in()) && hyperbolic)\n#define weirdhyperbolic ((S7 > 7 || S3 > 3 || !STDVAR || bt::in() || arcm::in() || arb::in()) && hyperbolic)\n#define stdhyperbolic (S7 == 7 && S3 == 3 && STDVAR && !bt::in() && !arcm::in() && !arb::in())\n\n#define cgflags cginf.flags\n\n#define cryst (cgflags & qCRYSTAL)\n\n/** convenience flag for geometries with major aspects missing */\n#define experimental (cgflags & qEXPERIMENTAL)\n\n// these geometries do not feature alternate structures for horocycles\n#define eubinary (euclid || bt::in() || cryst || nil)\n\n#define cgclass (cginf.cclass)\n#define euclid (cgclass == gcEuclid)\n#define sphere (cgclass == gcSphere)\n#define sol (among(cgclass, gcSol, gcSolN))\n#define nih (among(cgclass, gcNIH, gcSolN))\n#define nil (cgclass == gcNil)\n#define sl2 (cgclass == gcSL2)\n#define rotspace (geometry == gRotSpace)\n#define hyperbolic (cgclass == gcHyperbolic)\n#define nonisotropic (among(cgclass, gcSol, gcSolN, gcNIH, gcSL2, gcNil))\n#define translatable (euclid || nonisotropic)\n#define nonorientable (cgflags & qNONORIENTABLE)\n#define elliptic (cgflags & qELLIPTIC)\n#define quotient (cgflags & qANYQ)\n#define smallbounded ((cgflags & qSMALL) || disksize)\n#define closed_manifold (cgflags & qCLOSED)\n#define closed_or_bounded (closed_manifold || disksize)\n/** the actual map has hybrid geometry, not just the graphics */\n#define mhybrid (cgflags & qHYBRID)\n/** graphics based on a product geometry -- either embedded or actual hybrid product */\n#define gproduct (cgclass == gcProduct)\n\n/** 2D geometry embedded in 3D */\n#define embedded_plane (WDIM == 2 && GDIM == 3)\n/** the actual map is product, not just the graphics */\n#define mproduct (gproduct && !embedded_plane)\n/** the actual map is product, not just the graphics */\n#define meuclid (geom3::mgclass() == gcEuclid)\n#define msphere (geom3::mgclass() == gcSphere)\n#define mhyperbolic (geom3::mgclass() == gcHyperbolic)\n\n// Dry Forest burning, heat transfer, etc. are performed on the whole universe\n#define doall (closed_or_bounded)\n\n#define sphere_narcm (sphere && !arcm::in())\n\n#define a4 (S3 == 4)\n#define a45 (S3 == 4 && S7 == 5)\n#define a46 (S3 == 4 && S7 == 6)\n#define a47 (S3 == 4 && S7 == 7)\n#define a457 (S3 == 4 && S7 != 6)\n#define a467 (S3 == 4 && S7 >= 6)\n#define a38 (S3 == 3 && S7 == 8)\n#define sphere4 (sphere && S7 == 4)\n#define stdeuc (geometry == gNormal || geometry == gEuclid || geometry == gEuclidSquare)\n#define smallsphere (sphere_narcm && S7 < 5)\n#define bigsphere (sphere_narcm && S7 == 5)\n\n#define S6 (S3*2)\n#define MAX_S3 4\n\n#define SG6 (S3==3?6:4)\n#define SG3 (S3==3?3:2)\n#define SG2 (S3==3?2:1)\n\n#define GOLDBERG_INV (GOLDBERG || INVERSE)\n\n#define INVERSE among(variation, eVariation::unrectified, eVariation::warped, eVariation::untruncated )\n\n#define UNRECTIFIED (variation == eVariation::unrectified)\n#define WARPED (variation == eVariation::warped)\n#define UNTRUNCATED (variation == eVariation::untruncated)\n\n#define GOLDBERG (variation == eVariation::goldberg)\n#define IRREGULAR (variation == eVariation::irregular)\n#define PURE (variation == eVariation::pure)\n#define BITRUNCATED (variation == eVariation::bitruncated)\n#define DUAL (variation == eVariation::dual)\n#define DUALMUL (DUAL ? 2 : 1)\n\n#define CHANGED_VARIATION (variation != cginf.default_variation)\n\n#define STDVAR (PURE || BITRUNCATED)\n#define NONSTDVAR (!STDVAR)\n\n#define VALENCE current_valence()\n\n#define NUMWITCH 7\n\n// achievements\n\n#define LB_YENDOR_CHALLENGE 40\n#define LB_PURE_TACTICS 41\n#define NUMLEADER 87\n#define LB_PURE_TACTICS_SHMUP 49\n#define LB_PURE_TACTICS_COOP 50\n#define LB_RACING 81\n\n#if ISMOBILE || ISWEB || ISPANDORA || 1\ntypedef double ld;\n#define LDF \"%lf\"\n#define PLDF \"lf\"\n#else\ntypedef long double ld;\n#define LDF \"%Lf\"\n#define PLDF \"Lf\"\n#endif\n\ntypedef complex<ld> cld;\n\ntypedef unsigned color_t;\n\nstruct charstyle {\n  int charid;\n  color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;\n  bool lefthanded;\n  };\n\nenum eStereo { sOFF, sAnaglyph, sLR, sODS };\n\nenum eModel : int;\n\n/** configuration of the projection */\nstruct projection_configuration {\n  eModel model;            /**< which projection, see classes.cpp */\n  ld xposition, yposition; /**< move the center to another position */\n  ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;\n  ld clip_min, clip_max;\n  ld model_orientation, halfplane_scale, model_orientation_yz;\n  ld collignon_parameter;\n  ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;\n  bool show_hyperboloid_flat;\n  bool collignon_reflected;\n  string formula;\n  eModel basic_model;\n  ld top_z;\n  ld model_transition;\n  ld spiral_angle;\n  ld spiral_x;\n  ld spiral_y;\n  bool use_atan;\n  ld right_spiral_multiplier;\n  ld any_spiral_multiplier;\n  ld sphere_spiral_multiplier;\n  ld spiral_cone;\n  ld skiprope;\n  ld product_z_scale;\n  ld rotational_nil;\n\n  ld depth_scaling;\n  ld hyperboloid_scaling;\n  ld vr_angle, vr_zshift, vr_scale_factor;\n  bool dualfocus_autoscale;\n\n  int back_and_front; /* 0 = do not, 1 = do, 2 = only back */\n\n  projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }\n  };\n\nenum eThreatLevel { tlNoThreat, tlSpam, tlNormal, tlHighThreat };\n\nstruct videopar {\n  projection_configuration projection_config, rug_config;\n  ld yshift;\n  ld sspeed, mspeed;\n  ld binary_width, fixed_facing_dir;\n  int mobilecompasssize;\n  int radarsize; // radar for 3D geometries\n  ld radarrange;\n  int aurastr, aurasmoothen;\n  bool fixed_facing;\n  bool fixed_yz;\n  bool use_wall_radar;\n\n  int linequality;\n\n  bool want_fullscreen;\n  bool full;\n  bool change_fullscr;\n  bool relative_window_size;\n  bool want_vsync;\n  bool current_vsync;\n\n  int graphglyph; // graphical glyphs\n  bool darkhepta;\n  int shifttarget;\n\n  int xres, yres, framelimit;\n\n  int xscr, yscr;\n\n  int fullscreen_x, fullscreen_y;\n  int window_x, window_y;\n  ld window_rel_x, window_rel_y;\n\n  bool grid;\n  bool particles;\n\n  bool relative_font;\n  int fsize, abs_fsize, fontscale;\n  int flashtime;\n\n  int wallmode, monmode, axes, highlightmode, orbmode;\n  bool axes3;\n  bool revcontrol;\n\n  int msgleft, msglimit;\n\n  bool wantGL;\n  int want_antialias;\n  bool fineline;\n\n  bool usingGL;\n  int antialias;\n  #define AA_NOGL      1\n  #define AA_VERSION   2\n  #define AA_LINES     4\n  #define AA_POLY      8\n  #define AA_FONT      32\n  #define AA_MULTI     64\n  #define AA_MULTI16   128 // not configurable\n  ld linewidth;\n\n  ld multiplier_grid, multiplier_ring;\n\n  int joyvalue, joyvalue2, joypanthreshold;\n  ld joypanspeed;\n\n  charstyle cs;\n\n  bool samegender; // same gender for the Princess?\n  int language;\n\n  bool backeffects; // background particle effects\n\n  int killreduction, itemreduction, portreduction;\n\n  int steamscore;\n  bool drawmousecircle; // draw the circle around the mouse\n  bool skipstart;       // skip the start menu\n  bool quickmouse;      // quick mouse on the map\n  bool sloppy_3d;       // make 3D faster but ugly\n  int timeformat;       // time format used in the message log\n\n  int use_smart_range;  // 0 = distance-based, 1 = model-based, 2 = model-based and generate\n  ld smart_range_detail;// minimum visible cell for modes 1 and 2\n  ld smart_range_detail_3;// minimum visible cell in 3D (for mode 2, there is no mode 1)\n  bool smart_area_based;// based on area or length?\n  int cells_drawn_limit;\n  int cells_generated_limit; // limit on cells generated per frame\n\n  eStereo stereo_mode;\n  ld ipd;\n  ld lr_eyewidth, anaglyph_eyewidth;\n  ld fov;\n  bool consider_shader_projection;\n  int desaturate;\n  int texture_step;\n\n\n  bool always3;  // always use the 3D engine\n  ld depth;      // world level below the plane\n  ld camera;     // camera level above the plane\n  ld wall_height, creature_scale, height_width;\n  ld lake_top, lake_bottom;\n  ld rock_wall_ratio;\n  ld human_wall_ratio;\n  bool pseudohedral; // in 3D modes\n  ld depth_bonus;   // to fiix the placement of 3D models in pseudogonal -- not working currently\n\n  int tc_alpha, tc_depth, tc_camera;\n  ld highdetail, middetail;\n  bool gp_autoscale_heights;\n\n  ld eye;\n  bool auto_eye;\n\n  ld plevel_factor;\n  bool bubbles_special, bubbles_threshold, bubbles_all;\n  int joysmooth;\n\n  eThreatLevel faraway_highlight; // draw attention to monsters on the horizon\n  int faraway_highlight_color; // 0 = monster color, 100 = red-green oscillation\n\n  ld ispeed;\n  bool flasheffects;\n  };\n\nextern videopar vid;\n\n/** \\brief How many dimensional is the gameplay. In the FPP mode of a 2D geometry, WDIM is 2 */\n#define WDIM cginf.g.gameplay_dimension\n/** \\brief How many dimensional is the graphical representation. In the FPP mode of a 2D geometry, MDIM is 3 */\n#define GDIM cginf.g.graphical_dimension\n/** \\brief How many dimensions of the matrix representation are used. It is usually 3 in 2D geometries (not FPP) and in product geometries, 4 in 3D geometries */\n#define MDIM (MAXMDIM == 3 ? 3 : cginf.g.homogeneous_dimension)\n/** \\brief What dimension of matrices is used in loops (the 'extra' dimensions have values 0 or 1 as in Id)\n *  Even if MDIM==3, it may be faster to keep 4x4 matrices and perform computations using them (rather than having another condition due to the variable loop size).\n *  The experiments on my computer show it to be the case, but the effect is not significant, and it may be different on another computer.\n */\n#define MXDIM (CAP_MDIM_FIXED ? MAXMDIM : MDIM)\n/** \\brief The 'homogeneous' dimension index */\n#define LDIM (MDIM-1)\n#define cclass g.kind\n\n#define self (*this)\n\n#define BUGCOLORS 3\n\n#define big_unlock (inv::on && !ls::any_chaos())\n\n// land completion for shared unlocking\n#define U5 (big_unlock ? 10 : 5)\n// land completion for advanced unlocking\n#define U10 (big_unlock ? 25 : 10)\n\n// land completion\n#define R10 (big_unlock ? 50 : 10)\n// intermediate lands\n#define R30 (big_unlock ? 100 : 30)\n// advanced lands\n#define R60 (big_unlock ? 200 : 60)\n// advanced lands II\n#define R90 (big_unlock ? 300 : 90)\n// Crossroads IV\n#define R200 (big_unlock ? 800 : 200)\n// Crossroads V\n#define R300 (big_unlock ? 1200 : 300)\n// kill types for Dragon Chasms\n#define R20 (big_unlock ? 30 : 20)\n// kill count for Graveyard/Hive\n#define R100 (big_unlock ? 500 : 100)\n\n// size casted to int, to prevent warnings and actual errors caused by the unsignedness of x.size()\ntemplate<class T> int isize(const T& x) {return x.size(); }\n\n// automatically growing vector\ntemplate<class T> struct grow_vector : public vector<T> {\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  };\n\n// game forward declarations\n\nnamespace anticheat { extern bool tampered; }\n#define HRANDMAX 0x7FFFFFFF\n\nstruct movedir {\n  int d;\n  // non-negative numbers denote 'rotate +d steps and act in this direction\n  // negative numbers have the following meanings (warning: not used consistently):\n  #define MD_WAIT (-1)\n  #define MD_DROP (-2)\n  #define MD_UNDECIDED (-3)\n  #define MD_USE_ORB (-4)\n  int subdir; // for normal movement (0+): turn left or right\n  struct cell *tgt;  // for MD_USE_ORB: target cell\n  };\n\n// shmup\n\ntemplate<class T>\nclass hookset {\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n};\n\nusing purehookset = hookset<void()>;\n\nstatic const int NOHINT = -1;\n\ntypedef function<void()> reaction_t;\ntypedef function<bool()> bool_reaction_t;\n\nvoid offer_choose_file(reaction_t r);\n\n#define HELPFUN(x) (help_delegate = x, \"HELPFUN\")\n\ntypedef function<int(struct cell*)> cellfunction;\n\n// passable flags\n\n#define SAGEMELT .1\n#define PT(x, y) ((tactic::on || quotient == 2 || daily::on) ? (y) : inv::on ? min(2*(y),x) : (x))\n#define ROCKSNAKELENGTH 50\n#define WORMLENGTH 15\n#define PRIZEMUL 7\n\n#define INF  9999\n#define INFD 60\n#define PINFD 125\n#ifndef BARLEV\n#define BARLEV ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)\n#endif\n#define BUGLEV 15\n// #define BARLEV 9\n\n#define YDIST 101\n#define MODECODES (1ll<<61)\n\n#define GUNRANGE 3\n\n// loops\n\n#define fakecellloop(ct) for(cell *ct = (cell*)1; ct; ct=NULL)\n\n#define forCellIdAll(ct, i, cf) fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=(cf)->move(i),true); i++)\n#define forCellIdCM(ct, i, cf)  fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=createMov((cf),i),true); i++)\n#define forCellIdEx(ct, i, cf)  forCellIdAll(ct,i,cf) if(ct)\n\n#define forCellEx(ct, cf) forCellIdEx(ct,forCellEx ## __LINE__,cf)\n#define forCellCM(ct, cf) forCellIdCM(ct,forCellCM ## __LINE__,cf)\n#define forCellAll(ct, cf) forCellIdCM(ct,forCellAll ## __LINE__,cf)\n\n// canAttack/moveval flags\n\n#define AF_NORMAL            0          // nothing special about this attack\n\n#define AF_TOUGH             Flag(0)    // tough attacks: Hyperbugs\n#define AF_MAGIC             Flag(1)    // magical attacks: Flash\n#define AF_STAB              Flag(2)    // stabbing attacks (usually ignored except Hedgehogs)\n#define AF_LANCE             Flag(3)    // lance attacks (used by Lancers)\n#define AF_ONLY_ENEMY        Flag(4)    // only say YES if it is an enemy\n#define AF_ONLY_FRIEND       Flag(5)    // only say YES if it is a friend\n#define AF_ONLY_FBUG         Flag(6)    // only say YES if it is a bug_or friend\n#define AF_BACK              Flag(7)    // backward attacks (ignored except Viziers and Flailers)\n#define AF_APPROACH          Flag(8)    // approach attacks (ignored except Lancers)\n#define AF_IGNORE_UNARMED    Flag(9)    // ignore the UNARMED flag\n#define AF_NOSHIELD          Flag(10)   // ignore the shielded status\n#define AF_GETPLAYER         Flag(11)   // check for player (replace m2 with moPlayer for player position)\n#define AF_GUN               Flag(12)   // revolver attack\n#define AF_FAST              Flag(13)   // fast attack\n#define AF_EAT               Flag(17)   // eating attacks from Worm-likes\n\n#define MF_NOATTACKS         Flag(14)   // don't do any attacks\n#define MF_PATHDIST          Flag(15)   // consider pathdist for moveval\n#define MF_ONLYEAGLE         Flag(16)   // do this only for Eagles\n#define MF_MOUNT             Flag(18)   // don't do\n#define MF_NOFRIEND          Flag(19)   // don't do it for friends\n\n#define AF_SWORD             Flag(20)   // big sword\n#define AF_SWORD_INTO        Flag(21)   // moving into big sword\n#define AF_MSG               Flag(22)   // produce a message\n#define AF_MUSTKILL          Flag(23)   // when TRUE, stunning attacks are not accepted by canAttack\n#define AF_NEXTTURN          Flag(24)   // next turn -- don't count shield at power 1\n#define AF_FALL              Flag(25)   // death by falling\n#define MF_STUNNED           Flag(26)   // edgeunstable: ignore ladders (as stunned monsters do)\n#define MF_IVY               Flag(27)   // edgeunstable: ignore ivy (ivy cannot climb ivy)\n#define AF_HORNS             Flag(28)   // spear attack (always has APPROACH too)\n#define AF_BULL              Flag(29)   // bull attack\n#define AF_SIDE              Flag(30)   // side attack\n#define AF_CRUSH             Flag(31)   // Crusher's delayed attack\n#define AF_PLAGUE            Flag(32)   // Orb of Plague (do not check adjacency)\n#define AF_PSI               Flag(33)   // Orb of the Mind\n#define AF_WEAK              Flag(34)   // Curse of Weakness\n\n#if CAP_SDL\n\n#if CAP_PNG\n#include \"savepng.h\"\n#define IMAGEEXT \".png\"\nvoid IMAGESAVE(SDL_Surface *s, const char *fname);\n#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n#endif\n\n#endif\n\ntemplate<class T> struct dynamicval {\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  };\n\nstruct finalizer {\n  reaction_t f;\n  finalizer(reaction_t r) : f(r) {}\n  ~finalizer() { f(); }\n  };\n\nstatic const int MAXPLAYER = 7;\n\n#define DEFAULTCONTROL (multi::players == 1 && !shmup::on && !multi::alwaysuse)\n#define DEFAULTNOR(sym) (DEFAULTCONTROL || multi::notremapped(sym))\n\n#define CAP_MENUSCALING (ISPANDORA || ISMOBILE)\n\n#if CAP_MENUSCALING\n#define displayfrZ dialog::zoom::displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#else\n#define displayfrZ displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#endif\n\n// just in case if I change my mind about when Orbs lose their power\n#define ORBBASE 0\n\n#define SHADOW_WALL 0x60\n#define SHADOW_SL   0x18\n#define SHADOW_MON  0x30\n\n// ranks:\nenum class PPR {\n  ZERO, EUCLIDEAN_SKY, OUTCIRCLE, MOVESTAR,\n  MINUSINF,\n  BELOWBOTTOMm,\n  BELOWBOTTOM,\n  BELOWBOTTOMp,\n  BELOWBOTTOM_FALLANIM,\n  LAKEBOTTOM, HELLSPIKE,\n  INLAKEWALLm, INLAKEWALL, INLAKEWALLp,\n  INLAKEWALL_FALLANIM,\n  BSHALLOW, SHALLOW, ASHALLOW,\n  SUBLAKELEV, LAKELEV, BOATLEV, BOATLEV2, BOATLEV3,\n  LAKEWALLm, LAKEWALL, LAKEWALLp,\n  LAKEWALL_FALLANIM,\n  FLOOR_TOWER,\n  FLOOR,\n  FLOOR_DRAGON,\n  FLOORa, FLOORb, FLOORc, FLOORd,\n  LIZEYE,\n  BFLOOR,\n  GFLOORa, GFLOORb, GFLOORc,\n  WALLSHADOW,\n  STRUCT0, STRUCT1, STRUCT2, STRUCT3,\n  THORNS, WALL,\n  REDWALLm, REDWALLs, REDWALLp, REDWALL,\n  REDWALLm2, REDWALLs2, REDWALLp2, REDWALLt2,\n  REDWALLm3, REDWALLs3, REDWALLp3, REDWALLt3,\n  HEPTAMARK,\n  ITEM_BELOW,\n  ITEM, ITEMa, ITEMb,\n  BIGSTATUE,\n\n  WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n\n// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n  HIDDEN, GIANTSHADOW,\n  TENTACLE0, TENTACLE1,\n  ONTENTACLE, ONTENTACLE_EYES, ONTENTACLE_EYES2,\n  MONSTER_SHADOW,\n  MONSTER_FOOT, MONSTER_LEG, MONSTER_GROIN,\n  MONSTER_SUBWPN, MONSTER_WPN,\n  MONSTER_BODY, MONSTER_ARMOR0, MONSTER_ARMOR1,\n  MONSTER_CLOAK, MONSTER_NECK,\n  MONSTER_HEAD, MONSTER_FACE, MONSTER_EYE0, MONSTER_EYE1,\n  MONSTER_HAIR, MONSTER_HAT0, MONSTER_HAT1,\n  MONSTER_HOODCLOAK1, MONSTER_HOODCLOAK2,\n  STUNSTARS,\n  CARRIED, CARRIEDa, CARRIEDb,\n  PARTICLE, SWORDMARK, MAGICSWORD, MISSILE, SKY,\n  MINEMARK, ARROW,\n  MOBILE_ARROW,\n  LINE,\n  // in depth tested models transparent surfaces need to be depth sorted by HyperRogue\n  // and set to PPR::TRANSPARENT_* to draw them after all the opaque ones\n  TRANSPARENT_LAKE, TRANSPARENT_SHADOW, TRANSPARENT_WALL,\n  // no depth testing for SUPERLINE and above\n  SUPERLINE, TEXT, CIRCLE,\n  MAX,\n  DEFAULT = -1\n  };\n\ninline PPR operator + (PPR x, int y) { return PPR(int(x) + y); }\ninline PPR operator - (PPR x, int y) { return PPR(int(x) - y); }\ninline int operator - (PPR x, PPR y) { return int(x) - int(y); }\n\n#define OUTLINE_NONE     0x000000FF\n#define OUTLINE_FRIEND   0x00FF00FF\n#define OUTLINE_ENEMY    0xFF0000FF\n#define OUTLINE_TREASURE 0xFFFF00FF\n#define OUTLINE_ORB      0xFF8000FF\n#define OUTLINE_OTHER    0xFFFFFFFF\n#define OUTLINE_DEAD     0x800000FF\n#define OUTLINE_TRANS    0\n#define OUTLINE_DEFAULT  ((bordcolor << 8) + 0xFF)\n#define OUTLINE_FORE     ((forecolor << 8) + 0xFF)\n#define OUTLINE_BACK     ((backcolor << 8) + 0xFF)\n\nenum orbAction { roMouse, roKeyboard, roCheck, roMouseForce, roMultiCheck, roMultiGo };\n\n#define MODELCOUNT ((int) mdGUARD)\n\n#define pconf vid.projection_config\n#if CAP_RUG\n#define vpconf (rug::rugged ? vid.rug_config : vid.projection_config)\n#else\n#define vpconf pconf\n#endif\n#define pmodel (pconf.model)\n\nstatic const int DISTANCE_UNKNOWN = 127;\n\ntemplate<class T, class U> int addHook(hookset<T>& m, int prio, U&& hook) {\n  return m.add(prio, static_cast<U&&>(hook));\n  }\n\ntemplate<class T> void delHook(hookset<T>& m, int prio) {\n  m.del(prio);\n  }\n\ntemplate<class T, class... U> void callhooks(const hookset<T>& h, U&&... args) {\n  return h.callhooks(static_cast<U&&>(args)...);\n  }\n\ntemplate<class T, class V, class... U> V callhandlers(V zero, const hookset<T>& h, U&&... args) {\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }\n\nstring XLAT(string);\n\n#define GLERR(call) glError(call, __FILE__, __LINE__)\n\n#define SHMUPTITLE \"shoot'em up mode\"\n\n// check for a plain number key\n#define NUMBERKEY (interpret_as_direction(sym, uni) ? 0 : uni)\n#define DKEY (get_direction_key(sym, uni))\n#define DIRECTIONKEY (interpret_as_direction(sym, uni) ? uni : 0)\n\nnamespace scores { void load(); }\n\n#if ISMOBILE\nnamespace leader { void showMenu(); void handleKey(int sym, int uni); }\n#endif\n\nint textwidth(int siz, const string &str);\n#if CAP_GL\nint gl_width(int size, const char *s);\n#endif\n\n#if ISMOBILE\nextern int andmode;\nextern bool longclick;\nextern bool useRangedOrb;\n#endif\n\n#ifndef GL\ntypedef float GLfloat;\n#endif\n\ntypedef array<GLfloat, 2> glvec2;\ntypedef array<GLfloat, 3> glvec3;\ntypedef array<GLfloat, 4> glvec4;\n\n#if MAXMDIM == 4\n#define SHDIM 4\ntypedef glvec4 glvertex;\n#else\n#define SHDIM 3\ntypedef glvec3 glvertex;\n#endif\n\nextern int emeraldtable[100][7];\n\n// extern cell *cwpeek(cellwalker cw, int dir);\n\n#define HAUNTED_RADIUS getDistLimit()\n#define UNKNOWN 65535\n\n#define GRAIL_FOUND 0x4000\n#define GRAIL_RADIUS_MASK 0x3FFF\n\nextern vector<cell*> dcal;\n\n// z to close to this limit => do not draw\n\n#define BEHIND_LIMIT 1e-6\n\ntemplate<class T, class U> void eliminate_if(vector<T>& data, U pred) {\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }\n\ntemplate<class T> array<T, 4> make_array(T a, T b, T c, T d) { array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }\ntemplate<class T> array<T, 3> make_array(T a, T b, T c) { array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }\ntemplate<class T> array<T, 2> make_array(T a, T b) { array<T,2> x; x[0] = a; x[1] = b; return x; }\n\n// Find in a std::map or std::unordered_map, or return null.\ntemplate<class Map, class Key>\nconst typename Map::mapped_type *at_or_null(const Map& map, const Key& key) {\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }\n\nnamespace daily {\n  extern bool on;\n  extern int daily_id;\n  void setup();\n  void split();\n  void gifts();\n  void turnoff();\n  void showMenu();\n  int find_daily_lbid(int id);\n  bool prevent_spawn_treasure_on(cell *c);\n  void handleQuit(int sev);\n  void uploadscore(bool really_final);\n  }\n\n#define RING(i) for(double i=0; i<=cgi.S84+1e-6; i+=SD3 * pow(.5, vid.linequality))\n#define REVRING(i) for(double i=cgi.S84; i>=-1e-6; i-=SD3 * pow(.5, vid.linequality))\n#define PRING(i) for(double i=0; i<=cgi.S84+1e-6; i+= pow(.5, vid.linequality))\n#define REVPRING(i) for(double i=cgi.S84; i>=-1e-6; i-=pow(.5, vid.linequality))\n\n#define ONEMPTY if(d == 7 && passable(c, NULL, 0) && !safety && !reptilecheat)\n\ntemplate <class T> void texture_order(const T& f) {\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }\n\n/** find the smallest value of x in range [dmin..dmax] such that f(x) returns true */\n\ntemplate<class T> ld binsearch(ld dmin, ld dmax, const T& f, int iterations = 200) {\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }\n\n  static const int max_vec = (1<<14);\n  extern bool needConfirmationEvenIfSaved();\n\ntypedef unsigned long long flagtype;\n#define Flag(i) (flagtype(1ull<<i))\nstatic inline void set_flag(flagtype& f, flagtype which, bool b) {\n  if(b) f |= which;\n  else f &= ~which;\n  }\n\n}",
          "children": [
            {
              "type": "namespace",
              "text": "namespace",
              "children": []
            },
            {
              "type": "identifier",
              "text": "hr",
              "children": []
            },
            {
              "type": "declaration_list",
              "text": "{\n\n/** \\brief A helper structure that acts as a boolean which is always false. Helpful when disabling stuff with compiler flags. */\nstruct always_false {\n  operator bool() const { return false; }\n  bool operator = (bool b) const { return b; }\n  };\n\n/** \\brief placate GCC's overzealous -Wunused-result */\ntemplate<class T>\nvoid ignore(T&&) {\n  }\n\n/** \\brief a simple static_cast<void*> for use with printf(\"%p\") */\ninline const void *voidp(const void *p) {\n  return p;\n  }\n\n/** \\brief Is the value of first parameter equal to one of the remaining parameters? */\ntemplate<class T, class V, class... U> bool among(T x, V y) { return x == y; }\ntemplate<class T, class V, class... U> bool among(T x, V y, U... u) { return x==y || among(x,u...); }\n\n// functions and types used from the standard library\nusing std::vector;\nusing std::map;\nusing std::array;\nusing std::sort;\nusing std::multimap;\nusing std::set;\nusing std::string;\nusing std::pair;\nusing std::tuple;\nusing std::shared_ptr;\nusing std::make_shared;\nusing std::min;\nusing std::max;\nusing std::make_pair;\nusing std::tie;\nusing std::queue;\nusing std::swap;\nusing std::complex;\nusing std::reverse;\nusing std::real;\nusing std::imag;\nusing std::stable_sort;\nusing std::out_of_range;\nusing std::get;\nusing std::move;\nusing std::make_tuple;\nusing std::unique_ptr;\n\nusing std::abs;\nusing std::isfinite;\nusing std::isnan;\nusing std::isinf;\nusing std::log;\nusing std::exp;\nusing std::sin;\nusing std::cos;\nusing std::sinh;\nusing std::asin;\nusing std::acos;\nusing std::tan;\nusing std::atan;\nusing std::atan2;\nusing std::tanh;\nusing std::sqrt;\nusing std::pow;\nusing std::floor;\nusing std::ceil;\n#ifndef NO_STD_HYPOT\nusing std::hypot;\nusing std::asinh;\nusing std::acosh;\n#endif\n\nstruct hr_exception : std::runtime_error {\n    explicit hr_exception() : std::runtime_error(\"hr_exception\") {}\n    explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}\n};\n\nstruct hr_shortest_path_exception { };\n\n// genus (in grammar)\n#define GEN_M 0\n#define GEN_F 1\n#define GEN_N 2\n#define GEN_O 3\n#define GEN_BASE_MASK   7\n\n#define GENF_ELISION    (1 << 3)\n#define GENF_PLURALONLY (1 << 4)\n#define GENF_PROPER     (1 << 5)\n\n// Add a message to the GUI.\n// If multiple messages appear with the same spamtype != 0, the older ones disappear quickly\nvoid addMessage(string s, char spamtype = 0);\n\n// geometry-dependent constants\n\n#define cginf ginf[geometry]\n\n#define S7 cginf.sides\n#define S3 cginf.vertex\n#define hyperbolic_37 (S7 == 7 && S3 == 3 && !bt::in() && !arcm::in())\n#define hyperbolic_not37 ((S7 > 7 || S3 > 3 || bt::in() || arcm::in()) && hyperbolic)\n#define weirdhyperbolic ((S7 > 7 || S3 > 3 || !STDVAR || bt::in() || arcm::in() || arb::in()) && hyperbolic)\n#define stdhyperbolic (S7 == 7 && S3 == 3 && STDVAR && !bt::in() && !arcm::in() && !arb::in())\n\n#define cgflags cginf.flags\n\n#define cryst (cgflags & qCRYSTAL)\n\n/** convenience flag for geometries with major aspects missing */\n#define experimental (cgflags & qEXPERIMENTAL)\n\n// these geometries do not feature alternate structures for horocycles\n#define eubinary (euclid || bt::in() || cryst || nil)\n\n#define cgclass (cginf.cclass)\n#define euclid (cgclass == gcEuclid)\n#define sphere (cgclass == gcSphere)\n#define sol (among(cgclass, gcSol, gcSolN))\n#define nih (among(cgclass, gcNIH, gcSolN))\n#define nil (cgclass == gcNil)\n#define sl2 (cgclass == gcSL2)\n#define rotspace (geometry == gRotSpace)\n#define hyperbolic (cgclass == gcHyperbolic)\n#define nonisotropic (among(cgclass, gcSol, gcSolN, gcNIH, gcSL2, gcNil))\n#define translatable (euclid || nonisotropic)\n#define nonorientable (cgflags & qNONORIENTABLE)\n#define elliptic (cgflags & qELLIPTIC)\n#define quotient (cgflags & qANYQ)\n#define smallbounded ((cgflags & qSMALL) || disksize)\n#define closed_manifold (cgflags & qCLOSED)\n#define closed_or_bounded (closed_manifold || disksize)\n/** the actual map has hybrid geometry, not just the graphics */\n#define mhybrid (cgflags & qHYBRID)\n/** graphics based on a product geometry -- either embedded or actual hybrid product */\n#define gproduct (cgclass == gcProduct)\n\n/** 2D geometry embedded in 3D */\n#define embedded_plane (WDIM == 2 && GDIM == 3)\n/** the actual map is product, not just the graphics */\n#define mproduct (gproduct && !embedded_plane)\n/** the actual map is product, not just the graphics */\n#define meuclid (geom3::mgclass() == gcEuclid)\n#define msphere (geom3::mgclass() == gcSphere)\n#define mhyperbolic (geom3::mgclass() == gcHyperbolic)\n\n// Dry Forest burning, heat transfer, etc. are performed on the whole universe\n#define doall (closed_or_bounded)\n\n#define sphere_narcm (sphere && !arcm::in())\n\n#define a4 (S3 == 4)\n#define a45 (S3 == 4 && S7 == 5)\n#define a46 (S3 == 4 && S7 == 6)\n#define a47 (S3 == 4 && S7 == 7)\n#define a457 (S3 == 4 && S7 != 6)\n#define a467 (S3 == 4 && S7 >= 6)\n#define a38 (S3 == 3 && S7 == 8)\n#define sphere4 (sphere && S7 == 4)\n#define stdeuc (geometry == gNormal || geometry == gEuclid || geometry == gEuclidSquare)\n#define smallsphere (sphere_narcm && S7 < 5)\n#define bigsphere (sphere_narcm && S7 == 5)\n\n#define S6 (S3*2)\n#define MAX_S3 4\n\n#define SG6 (S3==3?6:4)\n#define SG3 (S3==3?3:2)\n#define SG2 (S3==3?2:1)\n\n#define GOLDBERG_INV (GOLDBERG || INVERSE)\n\n#define INVERSE among(variation, eVariation::unrectified, eVariation::warped, eVariation::untruncated )\n\n#define UNRECTIFIED (variation == eVariation::unrectified)\n#define WARPED (variation == eVariation::warped)\n#define UNTRUNCATED (variation == eVariation::untruncated)\n\n#define GOLDBERG (variation == eVariation::goldberg)\n#define IRREGULAR (variation == eVariation::irregular)\n#define PURE (variation == eVariation::pure)\n#define BITRUNCATED (variation == eVariation::bitruncated)\n#define DUAL (variation == eVariation::dual)\n#define DUALMUL (DUAL ? 2 : 1)\n\n#define CHANGED_VARIATION (variation != cginf.default_variation)\n\n#define STDVAR (PURE || BITRUNCATED)\n#define NONSTDVAR (!STDVAR)\n\n#define VALENCE current_valence()\n\n#define NUMWITCH 7\n\n// achievements\n\n#define LB_YENDOR_CHALLENGE 40\n#define LB_PURE_TACTICS 41\n#define NUMLEADER 87\n#define LB_PURE_TACTICS_SHMUP 49\n#define LB_PURE_TACTICS_COOP 50\n#define LB_RACING 81\n\n#if ISMOBILE || ISWEB || ISPANDORA || 1\ntypedef double ld;\n#define LDF \"%lf\"\n#define PLDF \"lf\"\n#else\ntypedef long double ld;\n#define LDF \"%Lf\"\n#define PLDF \"Lf\"\n#endif\n\ntypedef complex<ld> cld;\n\ntypedef unsigned color_t;\n\nstruct charstyle {\n  int charid;\n  color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;\n  bool lefthanded;\n  };\n\nenum eStereo { sOFF, sAnaglyph, sLR, sODS };\n\nenum eModel : int;\n\n/** configuration of the projection */\nstruct projection_configuration {\n  eModel model;            /**< which projection, see classes.cpp */\n  ld xposition, yposition; /**< move the center to another position */\n  ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;\n  ld clip_min, clip_max;\n  ld model_orientation, halfplane_scale, model_orientation_yz;\n  ld collignon_parameter;\n  ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;\n  bool show_hyperboloid_flat;\n  bool collignon_reflected;\n  string formula;\n  eModel basic_model;\n  ld top_z;\n  ld model_transition;\n  ld spiral_angle;\n  ld spiral_x;\n  ld spiral_y;\n  bool use_atan;\n  ld right_spiral_multiplier;\n  ld any_spiral_multiplier;\n  ld sphere_spiral_multiplier;\n  ld spiral_cone;\n  ld skiprope;\n  ld product_z_scale;\n  ld rotational_nil;\n\n  ld depth_scaling;\n  ld hyperboloid_scaling;\n  ld vr_angle, vr_zshift, vr_scale_factor;\n  bool dualfocus_autoscale;\n\n  int back_and_front; /* 0 = do not, 1 = do, 2 = only back */\n\n  projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }\n  };\n\nenum eThreatLevel { tlNoThreat, tlSpam, tlNormal, tlHighThreat };\n\nstruct videopar {\n  projection_configuration projection_config, rug_config;\n  ld yshift;\n  ld sspeed, mspeed;\n  ld binary_width, fixed_facing_dir;\n  int mobilecompasssize;\n  int radarsize; // radar for 3D geometries\n  ld radarrange;\n  int aurastr, aurasmoothen;\n  bool fixed_facing;\n  bool fixed_yz;\n  bool use_wall_radar;\n\n  int linequality;\n\n  bool want_fullscreen;\n  bool full;\n  bool change_fullscr;\n  bool relative_window_size;\n  bool want_vsync;\n  bool current_vsync;\n\n  int graphglyph; // graphical glyphs\n  bool darkhepta;\n  int shifttarget;\n\n  int xres, yres, framelimit;\n\n  int xscr, yscr;\n\n  int fullscreen_x, fullscreen_y;\n  int window_x, window_y;\n  ld window_rel_x, window_rel_y;\n\n  bool grid;\n  bool particles;\n\n  bool relative_font;\n  int fsize, abs_fsize, fontscale;\n  int flashtime;\n\n  int wallmode, monmode, axes, highlightmode, orbmode;\n  bool axes3;\n  bool revcontrol;\n\n  int msgleft, msglimit;\n\n  bool wantGL;\n  int want_antialias;\n  bool fineline;\n\n  bool usingGL;\n  int antialias;\n  #define AA_NOGL      1\n  #define AA_VERSION   2\n  #define AA_LINES     4\n  #define AA_POLY      8\n  #define AA_FONT      32\n  #define AA_MULTI     64\n  #define AA_MULTI16   128 // not configurable\n  ld linewidth;\n\n  ld multiplier_grid, multiplier_ring;\n\n  int joyvalue, joyvalue2, joypanthreshold;\n  ld joypanspeed;\n\n  charstyle cs;\n\n  bool samegender; // same gender for the Princess?\n  int language;\n\n  bool backeffects; // background particle effects\n\n  int killreduction, itemreduction, portreduction;\n\n  int steamscore;\n  bool drawmousecircle; // draw the circle around the mouse\n  bool skipstart;       // skip the start menu\n  bool quickmouse;      // quick mouse on the map\n  bool sloppy_3d;       // make 3D faster but ugly\n  int timeformat;       // time format used in the message log\n\n  int use_smart_range;  // 0 = distance-based, 1 = model-based, 2 = model-based and generate\n  ld smart_range_detail;// minimum visible cell for modes 1 and 2\n  ld smart_range_detail_3;// minimum visible cell in 3D (for mode 2, there is no mode 1)\n  bool smart_area_based;// based on area or length?\n  int cells_drawn_limit;\n  int cells_generated_limit; // limit on cells generated per frame\n\n  eStereo stereo_mode;\n  ld ipd;\n  ld lr_eyewidth, anaglyph_eyewidth;\n  ld fov;\n  bool consider_shader_projection;\n  int desaturate;\n  int texture_step;\n\n\n  bool always3;  // always use the 3D engine\n  ld depth;      // world level below the plane\n  ld camera;     // camera level above the plane\n  ld wall_height, creature_scale, height_width;\n  ld lake_top, lake_bottom;\n  ld rock_wall_ratio;\n  ld human_wall_ratio;\n  bool pseudohedral; // in 3D modes\n  ld depth_bonus;   // to fiix the placement of 3D models in pseudogonal -- not working currently\n\n  int tc_alpha, tc_depth, tc_camera;\n  ld highdetail, middetail;\n  bool gp_autoscale_heights;\n\n  ld eye;\n  bool auto_eye;\n\n  ld plevel_factor;\n  bool bubbles_special, bubbles_threshold, bubbles_all;\n  int joysmooth;\n\n  eThreatLevel faraway_highlight; // draw attention to monsters on the horizon\n  int faraway_highlight_color; // 0 = monster color, 100 = red-green oscillation\n\n  ld ispeed;\n  bool flasheffects;\n  };\n\nextern videopar vid;\n\n/** \\brief How many dimensional is the gameplay. In the FPP mode of a 2D geometry, WDIM is 2 */\n#define WDIM cginf.g.gameplay_dimension\n/** \\brief How many dimensional is the graphical representation. In the FPP mode of a 2D geometry, MDIM is 3 */\n#define GDIM cginf.g.graphical_dimension\n/** \\brief How many dimensions of the matrix representation are used. It is usually 3 in 2D geometries (not FPP) and in product geometries, 4 in 3D geometries */\n#define MDIM (MAXMDIM == 3 ? 3 : cginf.g.homogeneous_dimension)\n/** \\brief What dimension of matrices is used in loops (the 'extra' dimensions have values 0 or 1 as in Id)\n *  Even if MDIM==3, it may be faster to keep 4x4 matrices and perform computations using them (rather than having another condition due to the variable loop size).\n *  The experiments on my computer show it to be the case, but the effect is not significant, and it may be different on another computer.\n */\n#define MXDIM (CAP_MDIM_FIXED ? MAXMDIM : MDIM)\n/** \\brief The 'homogeneous' dimension index */\n#define LDIM (MDIM-1)\n#define cclass g.kind\n\n#define self (*this)\n\n#define BUGCOLORS 3\n\n#define big_unlock (inv::on && !ls::any_chaos())\n\n// land completion for shared unlocking\n#define U5 (big_unlock ? 10 : 5)\n// land completion for advanced unlocking\n#define U10 (big_unlock ? 25 : 10)\n\n// land completion\n#define R10 (big_unlock ? 50 : 10)\n// intermediate lands\n#define R30 (big_unlock ? 100 : 30)\n// advanced lands\n#define R60 (big_unlock ? 200 : 60)\n// advanced lands II\n#define R90 (big_unlock ? 300 : 90)\n// Crossroads IV\n#define R200 (big_unlock ? 800 : 200)\n// Crossroads V\n#define R300 (big_unlock ? 1200 : 300)\n// kill types for Dragon Chasms\n#define R20 (big_unlock ? 30 : 20)\n// kill count for Graveyard/Hive\n#define R100 (big_unlock ? 500 : 100)\n\n// size casted to int, to prevent warnings and actual errors caused by the unsignedness of x.size()\ntemplate<class T> int isize(const T& x) {return x.size(); }\n\n// automatically growing vector\ntemplate<class T> struct grow_vector : public vector<T> {\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  };\n\n// game forward declarations\n\nnamespace anticheat { extern bool tampered; }\n#define HRANDMAX 0x7FFFFFFF\n\nstruct movedir {\n  int d;\n  // non-negative numbers denote 'rotate +d steps and act in this direction\n  // negative numbers have the following meanings (warning: not used consistently):\n  #define MD_WAIT (-1)\n  #define MD_DROP (-2)\n  #define MD_UNDECIDED (-3)\n  #define MD_USE_ORB (-4)\n  int subdir; // for normal movement (0+): turn left or right\n  struct cell *tgt;  // for MD_USE_ORB: target cell\n  };\n\n// shmup\n\ntemplate<class T>\nclass hookset {\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n};\n\nusing purehookset = hookset<void()>;\n\nstatic const int NOHINT = -1;\n\ntypedef function<void()> reaction_t;\ntypedef function<bool()> bool_reaction_t;\n\nvoid offer_choose_file(reaction_t r);\n\n#define HELPFUN(x) (help_delegate = x, \"HELPFUN\")\n\ntypedef function<int(struct cell*)> cellfunction;\n\n// passable flags\n\n#define SAGEMELT .1\n#define PT(x, y) ((tactic::on || quotient == 2 || daily::on) ? (y) : inv::on ? min(2*(y),x) : (x))\n#define ROCKSNAKELENGTH 50\n#define WORMLENGTH 15\n#define PRIZEMUL 7\n\n#define INF  9999\n#define INFD 60\n#define PINFD 125\n#ifndef BARLEV\n#define BARLEV ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)\n#endif\n#define BUGLEV 15\n// #define BARLEV 9\n\n#define YDIST 101\n#define MODECODES (1ll<<61)\n\n#define GUNRANGE 3\n\n// loops\n\n#define fakecellloop(ct) for(cell *ct = (cell*)1; ct; ct=NULL)\n\n#define forCellIdAll(ct, i, cf) fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=(cf)->move(i),true); i++)\n#define forCellIdCM(ct, i, cf)  fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=createMov((cf),i),true); i++)\n#define forCellIdEx(ct, i, cf)  forCellIdAll(ct,i,cf) if(ct)\n\n#define forCellEx(ct, cf) forCellIdEx(ct,forCellEx ## __LINE__,cf)\n#define forCellCM(ct, cf) forCellIdCM(ct,forCellCM ## __LINE__,cf)\n#define forCellAll(ct, cf) forCellIdCM(ct,forCellAll ## __LINE__,cf)\n\n// canAttack/moveval flags\n\n#define AF_NORMAL            0          // nothing special about this attack\n\n#define AF_TOUGH             Flag(0)    // tough attacks: Hyperbugs\n#define AF_MAGIC             Flag(1)    // magical attacks: Flash\n#define AF_STAB              Flag(2)    // stabbing attacks (usually ignored except Hedgehogs)\n#define AF_LANCE             Flag(3)    // lance attacks (used by Lancers)\n#define AF_ONLY_ENEMY        Flag(4)    // only say YES if it is an enemy\n#define AF_ONLY_FRIEND       Flag(5)    // only say YES if it is a friend\n#define AF_ONLY_FBUG         Flag(6)    // only say YES if it is a bug_or friend\n#define AF_BACK              Flag(7)    // backward attacks (ignored except Viziers and Flailers)\n#define AF_APPROACH          Flag(8)    // approach attacks (ignored except Lancers)\n#define AF_IGNORE_UNARMED    Flag(9)    // ignore the UNARMED flag\n#define AF_NOSHIELD          Flag(10)   // ignore the shielded status\n#define AF_GETPLAYER         Flag(11)   // check for player (replace m2 with moPlayer for player position)\n#define AF_GUN               Flag(12)   // revolver attack\n#define AF_FAST              Flag(13)   // fast attack\n#define AF_EAT               Flag(17)   // eating attacks from Worm-likes\n\n#define MF_NOATTACKS         Flag(14)   // don't do any attacks\n#define MF_PATHDIST          Flag(15)   // consider pathdist for moveval\n#define MF_ONLYEAGLE         Flag(16)   // do this only for Eagles\n#define MF_MOUNT             Flag(18)   // don't do\n#define MF_NOFRIEND          Flag(19)   // don't do it for friends\n\n#define AF_SWORD             Flag(20)   // big sword\n#define AF_SWORD_INTO        Flag(21)   // moving into big sword\n#define AF_MSG               Flag(22)   // produce a message\n#define AF_MUSTKILL          Flag(23)   // when TRUE, stunning attacks are not accepted by canAttack\n#define AF_NEXTTURN          Flag(24)   // next turn -- don't count shield at power 1\n#define AF_FALL              Flag(25)   // death by falling\n#define MF_STUNNED           Flag(26)   // edgeunstable: ignore ladders (as stunned monsters do)\n#define MF_IVY               Flag(27)   // edgeunstable: ignore ivy (ivy cannot climb ivy)\n#define AF_HORNS             Flag(28)   // spear attack (always has APPROACH too)\n#define AF_BULL              Flag(29)   // bull attack\n#define AF_SIDE              Flag(30)   // side attack\n#define AF_CRUSH             Flag(31)   // Crusher's delayed attack\n#define AF_PLAGUE            Flag(32)   // Orb of Plague (do not check adjacency)\n#define AF_PSI               Flag(33)   // Orb of the Mind\n#define AF_WEAK              Flag(34)   // Curse of Weakness\n\n#if CAP_SDL\n\n#if CAP_PNG\n#include \"savepng.h\"\n#define IMAGEEXT \".png\"\nvoid IMAGESAVE(SDL_Surface *s, const char *fname);\n#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n#endif\n\n#endif\n\ntemplate<class T> struct dynamicval {\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  };\n\nstruct finalizer {\n  reaction_t f;\n  finalizer(reaction_t r) : f(r) {}\n  ~finalizer() { f(); }\n  };\n\nstatic const int MAXPLAYER = 7;\n\n#define DEFAULTCONTROL (multi::players == 1 && !shmup::on && !multi::alwaysuse)\n#define DEFAULTNOR(sym) (DEFAULTCONTROL || multi::notremapped(sym))\n\n#define CAP_MENUSCALING (ISPANDORA || ISMOBILE)\n\n#if CAP_MENUSCALING\n#define displayfrZ dialog::zoom::displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#else\n#define displayfrZ displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#endif\n\n// just in case if I change my mind about when Orbs lose their power\n#define ORBBASE 0\n\n#define SHADOW_WALL 0x60\n#define SHADOW_SL   0x18\n#define SHADOW_MON  0x30\n\n// ranks:\nenum class PPR {\n  ZERO, EUCLIDEAN_SKY, OUTCIRCLE, MOVESTAR,\n  MINUSINF,\n  BELOWBOTTOMm,\n  BELOWBOTTOM,\n  BELOWBOTTOMp,\n  BELOWBOTTOM_FALLANIM,\n  LAKEBOTTOM, HELLSPIKE,\n  INLAKEWALLm, INLAKEWALL, INLAKEWALLp,\n  INLAKEWALL_FALLANIM,\n  BSHALLOW, SHALLOW, ASHALLOW,\n  SUBLAKELEV, LAKELEV, BOATLEV, BOATLEV2, BOATLEV3,\n  LAKEWALLm, LAKEWALL, LAKEWALLp,\n  LAKEWALL_FALLANIM,\n  FLOOR_TOWER,\n  FLOOR,\n  FLOOR_DRAGON,\n  FLOORa, FLOORb, FLOORc, FLOORd,\n  LIZEYE,\n  BFLOOR,\n  GFLOORa, GFLOORb, GFLOORc,\n  WALLSHADOW,\n  STRUCT0, STRUCT1, STRUCT2, STRUCT3,\n  THORNS, WALL,\n  REDWALLm, REDWALLs, REDWALLp, REDWALL,\n  REDWALLm2, REDWALLs2, REDWALLp2, REDWALLt2,\n  REDWALLm3, REDWALLs3, REDWALLp3, REDWALLt3,\n  HEPTAMARK,\n  ITEM_BELOW,\n  ITEM, ITEMa, ITEMb,\n  BIGSTATUE,\n\n  WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n\n// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n  HIDDEN, GIANTSHADOW,\n  TENTACLE0, TENTACLE1,\n  ONTENTACLE, ONTENTACLE_EYES, ONTENTACLE_EYES2,\n  MONSTER_SHADOW,\n  MONSTER_FOOT, MONSTER_LEG, MONSTER_GROIN,\n  MONSTER_SUBWPN, MONSTER_WPN,\n  MONSTER_BODY, MONSTER_ARMOR0, MONSTER_ARMOR1,\n  MONSTER_CLOAK, MONSTER_NECK,\n  MONSTER_HEAD, MONSTER_FACE, MONSTER_EYE0, MONSTER_EYE1,\n  MONSTER_HAIR, MONSTER_HAT0, MONSTER_HAT1,\n  MONSTER_HOODCLOAK1, MONSTER_HOODCLOAK2,\n  STUNSTARS,\n  CARRIED, CARRIEDa, CARRIEDb,\n  PARTICLE, SWORDMARK, MAGICSWORD, MISSILE, SKY,\n  MINEMARK, ARROW,\n  MOBILE_ARROW,\n  LINE,\n  // in depth tested models transparent surfaces need to be depth sorted by HyperRogue\n  // and set to PPR::TRANSPARENT_* to draw them after all the opaque ones\n  TRANSPARENT_LAKE, TRANSPARENT_SHADOW, TRANSPARENT_WALL,\n  // no depth testing for SUPERLINE and above\n  SUPERLINE, TEXT, CIRCLE,\n  MAX,\n  DEFAULT = -1\n  };\n\ninline PPR operator + (PPR x, int y) { return PPR(int(x) + y); }\ninline PPR operator - (PPR x, int y) { return PPR(int(x) - y); }\ninline int operator - (PPR x, PPR y) { return int(x) - int(y); }\n\n#define OUTLINE_NONE     0x000000FF\n#define OUTLINE_FRIEND   0x00FF00FF\n#define OUTLINE_ENEMY    0xFF0000FF\n#define OUTLINE_TREASURE 0xFFFF00FF\n#define OUTLINE_ORB      0xFF8000FF\n#define OUTLINE_OTHER    0xFFFFFFFF\n#define OUTLINE_DEAD     0x800000FF\n#define OUTLINE_TRANS    0\n#define OUTLINE_DEFAULT  ((bordcolor << 8) + 0xFF)\n#define OUTLINE_FORE     ((forecolor << 8) + 0xFF)\n#define OUTLINE_BACK     ((backcolor << 8) + 0xFF)\n\nenum orbAction { roMouse, roKeyboard, roCheck, roMouseForce, roMultiCheck, roMultiGo };\n\n#define MODELCOUNT ((int) mdGUARD)\n\n#define pconf vid.projection_config\n#if CAP_RUG\n#define vpconf (rug::rugged ? vid.rug_config : vid.projection_config)\n#else\n#define vpconf pconf\n#endif\n#define pmodel (pconf.model)\n\nstatic const int DISTANCE_UNKNOWN = 127;\n\ntemplate<class T, class U> int addHook(hookset<T>& m, int prio, U&& hook) {\n  return m.add(prio, static_cast<U&&>(hook));\n  }\n\ntemplate<class T> void delHook(hookset<T>& m, int prio) {\n  m.del(prio);\n  }\n\ntemplate<class T, class... U> void callhooks(const hookset<T>& h, U&&... args) {\n  return h.callhooks(static_cast<U&&>(args)...);\n  }\n\ntemplate<class T, class V, class... U> V callhandlers(V zero, const hookset<T>& h, U&&... args) {\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }\n\nstring XLAT(string);\n\n#define GLERR(call) glError(call, __FILE__, __LINE__)\n\n#define SHMUPTITLE \"shoot'em up mode\"\n\n// check for a plain number key\n#define NUMBERKEY (interpret_as_direction(sym, uni) ? 0 : uni)\n#define DKEY (get_direction_key(sym, uni))\n#define DIRECTIONKEY (interpret_as_direction(sym, uni) ? uni : 0)\n\nnamespace scores { void load(); }\n\n#if ISMOBILE\nnamespace leader { void showMenu(); void handleKey(int sym, int uni); }\n#endif\n\nint textwidth(int siz, const string &str);\n#if CAP_GL\nint gl_width(int size, const char *s);\n#endif\n\n#if ISMOBILE\nextern int andmode;\nextern bool longclick;\nextern bool useRangedOrb;\n#endif\n\n#ifndef GL\ntypedef float GLfloat;\n#endif\n\ntypedef array<GLfloat, 2> glvec2;\ntypedef array<GLfloat, 3> glvec3;\ntypedef array<GLfloat, 4> glvec4;\n\n#if MAXMDIM == 4\n#define SHDIM 4\ntypedef glvec4 glvertex;\n#else\n#define SHDIM 3\ntypedef glvec3 glvertex;\n#endif\n\nextern int emeraldtable[100][7];\n\n// extern cell *cwpeek(cellwalker cw, int dir);\n\n#define HAUNTED_RADIUS getDistLimit()\n#define UNKNOWN 65535\n\n#define GRAIL_FOUND 0x4000\n#define GRAIL_RADIUS_MASK 0x3FFF\n\nextern vector<cell*> dcal;\n\n// z to close to this limit => do not draw\n\n#define BEHIND_LIMIT 1e-6\n\ntemplate<class T, class U> void eliminate_if(vector<T>& data, U pred) {\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }\n\ntemplate<class T> array<T, 4> make_array(T a, T b, T c, T d) { array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }\ntemplate<class T> array<T, 3> make_array(T a, T b, T c) { array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }\ntemplate<class T> array<T, 2> make_array(T a, T b) { array<T,2> x; x[0] = a; x[1] = b; return x; }\n\n// Find in a std::map or std::unordered_map, or return null.\ntemplate<class Map, class Key>\nconst typename Map::mapped_type *at_or_null(const Map& map, const Key& key) {\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }\n\nnamespace daily {\n  extern bool on;\n  extern int daily_id;\n  void setup();\n  void split();\n  void gifts();\n  void turnoff();\n  void showMenu();\n  int find_daily_lbid(int id);\n  bool prevent_spawn_treasure_on(cell *c);\n  void handleQuit(int sev);\n  void uploadscore(bool really_final);\n  }\n\n#define RING(i) for(double i=0; i<=cgi.S84+1e-6; i+=SD3 * pow(.5, vid.linequality))\n#define REVRING(i) for(double i=cgi.S84; i>=-1e-6; i-=SD3 * pow(.5, vid.linequality))\n#define PRING(i) for(double i=0; i<=cgi.S84+1e-6; i+= pow(.5, vid.linequality))\n#define REVPRING(i) for(double i=cgi.S84; i>=-1e-6; i-=pow(.5, vid.linequality))\n\n#define ONEMPTY if(d == 7 && passable(c, NULL, 0) && !safety && !reptilecheat)\n\ntemplate <class T> void texture_order(const T& f) {\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }\n\n/** find the smallest value of x in range [dmin..dmax] such that f(x) returns true */\n\ntemplate<class T> ld binsearch(ld dmin, ld dmax, const T& f, int iterations = 200) {\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }\n\n  static const int max_vec = (1<<14);\n  extern bool needConfirmationEvenIfSaved();\n\ntypedef unsigned long long flagtype;\n#define Flag(i) (flagtype(1ull<<i))\nstatic inline void set_flag(flagtype& f, flagtype which, bool b) {\n  if(b) f |= which;\n  else f &= ~which;\n  }\n\n}",
              "children": [
                {
                  "type": "{",
                  "text": "{",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "/** \\brief A helper structure that acts as a boolean which is always false. Helpful when disabling stuff with compiler flags. */",
                  "children": []
                },
                {
                  "type": "struct_specifier",
                  "text": "struct always_false {\n  operator bool() const { return false; }\n  bool operator = (bool b) const { return b; }\n  }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "always_false",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n  operator bool() const { return false; }\n  bool operator = (bool b) const { return b; }\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "function_definition",
                          "text": "operator bool() const { return false; }",
                          "children": [
                            {
                              "type": "operator_cast",
                              "text": "operator bool() const",
                              "children": [
                                {
                                  "type": "operator",
                                  "text": "operator",
                                  "children": []
                                },
                                {
                                  "type": "primitive_type",
                                  "text": "bool",
                                  "children": []
                                },
                                {
                                  "type": "abstract_function_declarator",
                                  "text": "() const",
                                  "children": [
                                    {
                                      "type": "parameter_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{ return false; }",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "return_statement",
                                  "text": "return false;",
                                  "children": [
                                    {
                                      "type": "return",
                                      "text": "return",
                                      "children": []
                                    },
                                    {
                                      "type": "false",
                                      "text": "false",
                                      "children": []
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "function_definition",
                          "text": "bool operator = (bool b) const { return b; }",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "operator = (bool b) const",
                              "children": [
                                {
                                  "type": "operator_name",
                                  "text": "operator =",
                                  "children": [
                                    {
                                      "type": "operator",
                                      "text": "operator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(bool b)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "bool b",
                                      "children": [
                                        {
                                          "type": "primitive_type",
                                          "text": "bool",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "b",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "type_qualifier",
                                  "text": "const",
                                  "children": [
                                    {
                                      "type": "const",
                                      "text": "const",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{ return b; }",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "return_statement",
                                  "text": "return b;",
                                  "children": [
                                    {
                                      "type": "return",
                                      "text": "return",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "/** \\brief placate GCC's overzealous -Wunused-result */",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T>\nvoid ignore(T&&) {\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "void ignore(T&&) {\n  }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "void",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "ignore(T&&)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ignore",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(T&&)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T&&",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "abstract_reference_declarator",
                                      "text": "&&",
                                      "children": [
                                        {
                                          "type": "&&",
                                          "text": "&&",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief a simple static_cast<void*> for use with printf(\"%p\") */",
                  "children": []
                },
                {
                  "type": "function_definition",
                  "text": "inline const void *voidp(const void *p) {\n  return p;\n  }",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "inline",
                      "children": [
                        {
                          "type": "inline",
                          "text": "inline",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_qualifier",
                      "text": "const",
                      "children": [
                        {
                          "type": "const",
                          "text": "const",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "void",
                      "children": []
                    },
                    {
                      "type": "pointer_declarator",
                      "text": "*voidp(const void *p)",
                      "children": [
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "voidp(const void *p)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "voidp",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(const void *p)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const void *p",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "primitive_type",
                                      "text": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "pointer_declarator",
                                      "text": "*p",
                                      "children": [
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "compound_statement",
                      "text": "{\n  return p;\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "return_statement",
                          "text": "return p;",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "p",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief Is the value of first parameter equal to one of the remaining parameters? */",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T, class V, class... U> bool among(T x, V y) { return x == y; }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T, class V, class... U>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class V",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "V",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "variadic_type_parameter_declaration",
                          "text": "class... U",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "...",
                              "text": "...",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "U",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "bool among(T x, V y) { return x == y; }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "bool",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "among(T x, V y)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "among",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(T x, V y)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T x",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "V y",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "V",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{ return x == y; }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "text": "return x == y;",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_expression",
                                  "text": "x == y",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "==",
                                      "text": "==",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T, class V, class... U> bool among(T x, V y, U... u) { return x==y || among(x,u...); }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T, class V, class... U>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class V",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "V",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "variadic_type_parameter_declaration",
                          "text": "class... U",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "...",
                              "text": "...",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "U",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "bool among(T x, V y, U... u) { return x==y || among(x,u...); }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "bool",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "among(T x, V y, U... u)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "among",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(T x, V y, U... u)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T x",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "V y",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "V",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "variadic_parameter_declaration",
                                  "text": "U... u",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "U",
                                      "children": []
                                    },
                                    {
                                      "type": "variadic_declarator",
                                      "text": "... u",
                                      "children": [
                                        {
                                          "type": "...",
                                          "text": "...",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{ return x==y || among(x,u...); }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "text": "return x==y || among(x,u...);",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_expression",
                                  "text": "x==y || among(x,u...)",
                                  "children": [
                                    {
                                      "type": "binary_expression",
                                      "text": "x==y",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "==",
                                          "text": "==",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "||",
                                      "text": "||",
                                      "children": []
                                    },
                                    {
                                      "type": "call_expression",
                                      "text": "among(x,u...)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "among",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(x,u...)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "parameter_pack_expansion",
                                              "text": "u...",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "u",
                                                  "children": []
                                                },
                                                {
                                                  "type": "...",
                                                  "text": "...",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// functions and types used from the standard library",
                  "children": []
                },
                {
                  "type": "using_declaration",
                  "text": "using std::vector;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::vector",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "vector",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::map;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::map",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "map",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::array;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::array",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "array",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::sort;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::sort",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "sort",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::multimap;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::multimap",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "multimap",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::set;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::set",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "set",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::string;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::string",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "string",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::pair;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::pair",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "pair",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::tuple;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::tuple",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "tuple",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::shared_ptr;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::shared_ptr",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "shared_ptr",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::make_shared;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::make_shared",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "make_shared",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::min;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::min",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "min",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::max;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::max",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "max",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::make_pair;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::make_pair",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "make_pair",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::tie;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::tie",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "tie",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::queue;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::queue",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "queue",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::swap;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::swap",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "swap",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::complex;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::complex",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "complex",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::reverse;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::reverse",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "reverse",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::real;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::real",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "real",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::imag;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::imag",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "imag",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::stable_sort;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::stable_sort",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "stable_sort",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::out_of_range;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::out_of_range",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "out_of_range",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::get;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::get",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "get",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::move;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::move",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "move",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::make_tuple;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::make_tuple",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "make_tuple",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::unique_ptr;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::unique_ptr",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "unique_ptr",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::abs;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::abs",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "abs",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::isfinite;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::isfinite",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "isfinite",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::isnan;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::isnan",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "isnan",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::isinf;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::isinf",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "isinf",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::log;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::log",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "log",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::exp;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::exp",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "exp",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::sin;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::sin",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "sin",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::cos;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::cos",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cos",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::sinh;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::sinh",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "sinh",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::asin;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::asin",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "asin",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::acos;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::acos",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "acos",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::tan;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::tan",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "tan",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::atan;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::atan",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "atan",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::atan2;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::atan2",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "atan2",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::tanh;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::tanh",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "tanh",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::sqrt;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::sqrt",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "sqrt",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::pow;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::pow",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "pow",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::floor;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::floor",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "floor",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "using_declaration",
                  "text": "using std::ceil;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "qualified_identifier",
                      "text": "std::ceil",
                      "children": [
                        {
                          "type": "namespace_identifier",
                          "text": "std",
                          "children": []
                        },
                        {
                          "type": "::",
                          "text": "::",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ceil",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_ifdef",
                  "text": "#ifndef NO_STD_HYPOT\nusing std::hypot;\nusing std::asinh;\nusing std::acosh;\n#endif",
                  "children": [
                    {
                      "type": "#ifndef",
                      "text": "#ifndef",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "NO_STD_HYPOT",
                      "children": []
                    },
                    {
                      "type": "using_declaration",
                      "text": "using std::hypot;",
                      "children": [
                        {
                          "type": "using",
                          "text": "using",
                          "children": []
                        },
                        {
                          "type": "qualified_identifier",
                          "text": "std::hypot",
                          "children": [
                            {
                              "type": "namespace_identifier",
                              "text": "std",
                              "children": []
                            },
                            {
                              "type": "::",
                              "text": "::",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "hypot",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "using_declaration",
                      "text": "using std::asinh;",
                      "children": [
                        {
                          "type": "using",
                          "text": "using",
                          "children": []
                        },
                        {
                          "type": "qualified_identifier",
                          "text": "std::asinh",
                          "children": [
                            {
                              "type": "namespace_identifier",
                              "text": "std",
                              "children": []
                            },
                            {
                              "type": "::",
                              "text": "::",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "asinh",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "using_declaration",
                      "text": "using std::acosh;",
                      "children": [
                        {
                          "type": "using",
                          "text": "using",
                          "children": []
                        },
                        {
                          "type": "qualified_identifier",
                          "text": "std::acosh",
                          "children": [
                            {
                              "type": "namespace_identifier",
                              "text": "std",
                              "children": []
                            },
                            {
                              "type": "::",
                              "text": "::",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "acosh",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "struct_specifier",
                  "text": "struct hr_exception : std::runtime_error {\n    explicit hr_exception() : std::runtime_error(\"hr_exception\") {}\n    explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}\n}",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "hr_exception",
                      "children": []
                    },
                    {
                      "type": "base_class_clause",
                      "text": ": std::runtime_error",
                      "children": [
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "qualified_identifier",
                          "text": "std::runtime_error",
                          "children": [
                            {
                              "type": "namespace_identifier",
                              "text": "std",
                              "children": []
                            },
                            {
                              "type": "::",
                              "text": "::",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "runtime_error",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n    explicit hr_exception() : std::runtime_error(\"hr_exception\") {}\n    explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}\n}",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "function_definition",
                          "text": "explicit hr_exception() : std::runtime_error(\"hr_exception\") {}",
                          "children": [
                            {
                              "type": "explicit_function_specifier",
                              "text": "explicit",
                              "children": [
                                {
                                  "type": "explicit",
                                  "text": "explicit",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "function_declarator",
                              "text": "hr_exception()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "hr_exception",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "field_initializer_list",
                              "text": ": std::runtime_error(\"hr_exception\")",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "field_initializer",
                                  "text": "std::runtime_error(\"hr_exception\")",
                                  "children": [
                                    {
                                      "type": "qualified_identifier",
                                      "text": "std::runtime_error",
                                      "children": [
                                        {
                                          "type": "namespace_identifier",
                                          "text": "std",
                                          "children": []
                                        },
                                        {
                                          "type": "::",
                                          "text": "::",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "runtime_error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\"hr_exception\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string_literal",
                                          "text": "\"hr_exception\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{}",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "function_definition",
                          "text": "explicit hr_exception(const std::string& s) : std::runtime_error(s.c_str()) {}",
                          "children": [
                            {
                              "type": "explicit_function_specifier",
                              "text": "explicit",
                              "children": [
                                {
                                  "type": "explicit",
                                  "text": "explicit",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "function_declarator",
                              "text": "hr_exception(const std::string& s)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "hr_exception",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(const std::string& s)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "const std::string& s",
                                      "children": [
                                        {
                                          "type": "type_qualifier",
                                          "text": "const",
                                          "children": [
                                            {
                                              "type": "const",
                                              "text": "const",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "qualified_identifier",
                                          "text": "std::string",
                                          "children": [
                                            {
                                              "type": "namespace_identifier",
                                              "text": "std",
                                              "children": []
                                            },
                                            {
                                              "type": "::",
                                              "text": "::",
                                              "children": []
                                            },
                                            {
                                              "type": "type_identifier",
                                              "text": "string",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "reference_declarator",
                                          "text": "& s",
                                          "children": [
                                            {
                                              "type": "&",
                                              "text": "&",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "s",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "field_initializer_list",
                              "text": ": std::runtime_error(s.c_str())",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "field_initializer",
                                  "text": "std::runtime_error(s.c_str())",
                                  "children": [
                                    {
                                      "type": "qualified_identifier",
                                      "text": "std::runtime_error",
                                      "children": [
                                        {
                                          "type": "namespace_identifier",
                                          "text": "std",
                                          "children": []
                                        },
                                        {
                                          "type": "::",
                                          "text": "::",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "runtime_error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(s.c_str())",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "call_expression",
                                          "text": "s.c_str()",
                                          "children": [
                                            {
                                              "type": "field_expression",
                                              "text": "s.c_str",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "s",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "field_identifier",
                                                  "text": "c_str",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{}",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "struct_specifier",
                  "text": "struct hr_shortest_path_exception { }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "hr_shortest_path_exception",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{ }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "// genus (in grammar)",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define GEN_M 0\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GEN_M",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GEN_F 1\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GEN_F",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 1",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GEN_N 2\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GEN_N",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 2",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GEN_O 3\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GEN_O",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 3",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GEN_BASE_MASK   7\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GEN_BASE_MASK",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "   7",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GENF_ELISION    (1 << 3)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GENF_ELISION",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "    (1 << 3)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GENF_PLURALONLY (1 << 4)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GENF_PLURALONLY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (1 << 4)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GENF_PROPER     (1 << 5)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GENF_PROPER",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "     (1 << 5)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// Add a message to the GUI.",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "// If multiple messages appear with the same spamtype != 0, the older ones disappear quickly",
                  "children": []
                },
                {
                  "type": "declaration",
                  "text": "void addMessage(string s, char spamtype = 0);",
                  "children": [
                    {
                      "type": "primitive_type",
                      "text": "void",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "addMessage(string s, char spamtype = 0)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "addMessage",
                          "children": []
                        },
                        {
                          "type": "parameter_list",
                          "text": "(string s, char spamtype = 0)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "string s",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "string",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "s",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "optional_parameter_declaration",
                              "text": "char spamtype = 0",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "char",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "spamtype",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// geometry-dependent constants",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define cginf ginf[geometry]\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "cginf",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " ginf[geometry]",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define S7 cginf.sides\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "S7",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " cginf.sides",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define S3 cginf.vertex\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "S3",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " cginf.vertex",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define hyperbolic_37 (S7 == 7 && S3 == 3 && !bt::in() && !arcm::in())\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "hyperbolic_37",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S7 == 7 && S3 == 3 && !bt::in() && !arcm::in())",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define hyperbolic_not37 ((S7 > 7 || S3 > 3 || bt::in() || arcm::in()) && hyperbolic)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "hyperbolic_not37",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " ((S7 > 7 || S3 > 3 || bt::in() || arcm::in()) && hyperbolic)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define weirdhyperbolic ((S7 > 7 || S3 > 3 || !STDVAR || bt::in() || arcm::in() || arb::in()) && hyperbolic)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "weirdhyperbolic",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " ((S7 > 7 || S3 > 3 || !STDVAR || bt::in() || arcm::in() || arb::in()) && hyperbolic)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define stdhyperbolic (S7 == 7 && S3 == 3 && STDVAR && !bt::in() && !arcm::in() && !arb::in())\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "stdhyperbolic",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S7 == 7 && S3 == 3 && STDVAR && !bt::in() && !arcm::in() && !arb::in())",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define cgflags cginf.flags\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "cgflags",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " cginf.flags",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define cryst (cgflags & qCRYSTAL)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "cryst",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qCRYSTAL)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** convenience flag for geometries with major aspects missing */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define experimental (cgflags & qEXPERIMENTAL)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "experimental",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qEXPERIMENTAL)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// these geometries do not feature alternate structures for horocycles",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define eubinary (euclid || bt::in() || cryst || nil)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "eubinary",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (euclid || bt::in() || cryst || nil)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define cgclass (cginf.cclass)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "cgclass",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cginf.cclass)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define euclid (cgclass == gcEuclid)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "euclid",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgclass == gcEuclid)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define sphere (cgclass == gcSphere)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "sphere",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgclass == gcSphere)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define sol (among(cgclass, gcSol, gcSolN))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "sol",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (among(cgclass, gcSol, gcSolN))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define nih (among(cgclass, gcNIH, gcSolN))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "nih",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (among(cgclass, gcNIH, gcSolN))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define nil (cgclass == gcNil)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "nil",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgclass == gcNil)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define sl2 (cgclass == gcSL2)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "sl2",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgclass == gcSL2)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define rotspace (geometry == gRotSpace)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "rotspace",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (geometry == gRotSpace)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define hyperbolic (cgclass == gcHyperbolic)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "hyperbolic",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgclass == gcHyperbolic)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define nonisotropic (among(cgclass, gcSol, gcSolN, gcNIH, gcSL2, gcNil))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "nonisotropic",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (among(cgclass, gcSol, gcSolN, gcNIH, gcSL2, gcNil))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define translatable (euclid || nonisotropic)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "translatable",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (euclid || nonisotropic)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define nonorientable (cgflags & qNONORIENTABLE)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "nonorientable",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qNONORIENTABLE)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define elliptic (cgflags & qELLIPTIC)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "elliptic",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qELLIPTIC)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define quotient (cgflags & qANYQ)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "quotient",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qANYQ)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define smallbounded ((cgflags & qSMALL) || disksize)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "smallbounded",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " ((cgflags & qSMALL) || disksize)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define closed_manifold (cgflags & qCLOSED)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "closed_manifold",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qCLOSED)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define closed_or_bounded (closed_manifold || disksize)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "closed_or_bounded",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (closed_manifold || disksize)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** the actual map has hybrid geometry, not just the graphics */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define mhybrid (cgflags & qHYBRID)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "mhybrid",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgflags & qHYBRID)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** graphics based on a product geometry -- either embedded or actual hybrid product */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define gproduct (cgclass == gcProduct)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "gproduct",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (cgclass == gcProduct)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** 2D geometry embedded in 3D */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define embedded_plane (WDIM == 2 && GDIM == 3)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "embedded_plane",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (WDIM == 2 && GDIM == 3)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** the actual map is product, not just the graphics */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define mproduct (gproduct && !embedded_plane)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "mproduct",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (gproduct && !embedded_plane)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** the actual map is product, not just the graphics */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define meuclid (geom3::mgclass() == gcEuclid)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "meuclid",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (geom3::mgclass() == gcEuclid)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define msphere (geom3::mgclass() == gcSphere)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "msphere",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (geom3::mgclass() == gcSphere)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define mhyperbolic (geom3::mgclass() == gcHyperbolic)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "mhyperbolic",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (geom3::mgclass() == gcHyperbolic)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// Dry Forest burning, heat transfer, etc. are performed on the whole universe",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define doall (closed_or_bounded)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "doall",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (closed_or_bounded)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define sphere_narcm (sphere && !arcm::in())\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "sphere_narcm",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (sphere && !arcm::in())",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a4 (S3 == 4)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a4",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 4)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a45 (S3 == 4 && S7 == 5)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a45",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 4 && S7 == 5)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a46 (S3 == 4 && S7 == 6)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a46",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 4 && S7 == 6)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a47 (S3 == 4 && S7 == 7)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a47",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 4 && S7 == 7)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a457 (S3 == 4 && S7 != 6)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a457",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 4 && S7 != 6)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a467 (S3 == 4 && S7 >= 6)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a467",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 4 && S7 >= 6)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define a38 (S3 == 3 && S7 == 8)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a38",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3 == 3 && S7 == 8)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define sphere4 (sphere && S7 == 4)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "sphere4",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (sphere && S7 == 4)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define stdeuc (geometry == gNormal || geometry == gEuclid || geometry == gEuclidSquare)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "stdeuc",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (geometry == gNormal || geometry == gEuclid || geometry == gEuclidSquare)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define smallsphere (sphere_narcm && S7 < 5)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "smallsphere",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (sphere_narcm && S7 < 5)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define bigsphere (sphere_narcm && S7 == 5)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "bigsphere",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (sphere_narcm && S7 == 5)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define S6 (S3*2)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "S6",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3*2)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MAX_S3 4\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MAX_S3",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 4",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SG6 (S3==3?6:4)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SG6",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3==3?6:4)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SG3 (S3==3?3:2)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SG3",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3==3?3:2)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SG2 (S3==3?2:1)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SG2",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (S3==3?2:1)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GOLDBERG_INV (GOLDBERG || INVERSE)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GOLDBERG_INV",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (GOLDBERG || INVERSE)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define INVERSE among(variation, eVariation::unrectified, eVariation::warped, eVariation::untruncated )\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "INVERSE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " among(variation, eVariation::unrectified, eVariation::warped, eVariation::untruncated )",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define UNRECTIFIED (variation == eVariation::unrectified)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "UNRECTIFIED",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::unrectified)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define WARPED (variation == eVariation::warped)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "WARPED",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::warped)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define UNTRUNCATED (variation == eVariation::untruncated)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "UNTRUNCATED",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::untruncated)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GOLDBERG (variation == eVariation::goldberg)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GOLDBERG",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::goldberg)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define IRREGULAR (variation == eVariation::irregular)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "IRREGULAR",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::irregular)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define PURE (variation == eVariation::pure)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "PURE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::pure)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define BITRUNCATED (variation == eVariation::bitruncated)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "BITRUNCATED",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::bitruncated)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define DUAL (variation == eVariation::dual)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "DUAL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation == eVariation::dual)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define DUALMUL (DUAL ? 2 : 1)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "DUALMUL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (DUAL ? 2 : 1)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define CHANGED_VARIATION (variation != cginf.default_variation)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "CHANGED_VARIATION",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (variation != cginf.default_variation)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define STDVAR (PURE || BITRUNCATED)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "STDVAR",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (PURE || BITRUNCATED)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define NONSTDVAR (!STDVAR)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "NONSTDVAR",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (!STDVAR)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define VALENCE current_valence()\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "VALENCE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " current_valence()",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define NUMWITCH 7\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "NUMWITCH",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 7",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// achievements",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define LB_YENDOR_CHALLENGE 40\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "LB_YENDOR_CHALLENGE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 40",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define LB_PURE_TACTICS 41\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "LB_PURE_TACTICS",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 41",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define NUMLEADER 87\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "NUMLEADER",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 87",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define LB_PURE_TACTICS_SHMUP 49\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "LB_PURE_TACTICS_SHMUP",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 49",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define LB_PURE_TACTICS_COOP 50\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "LB_PURE_TACTICS_COOP",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 50",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define LB_RACING 81\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "LB_RACING",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 81",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if ISMOBILE || ISWEB || ISPANDORA || 1\ntypedef double ld;\n#define LDF \"%lf\"\n#define PLDF \"lf\"\n#else\ntypedef long double ld;\n#define LDF \"%Lf\"\n#define PLDF \"Lf\"\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "text": "ISMOBILE || ISWEB || ISPANDORA || 1",
                      "children": [
                        {
                          "type": "binary_expression",
                          "text": "ISMOBILE || ISWEB || ISPANDORA",
                          "children": [
                            {
                              "type": "binary_expression",
                              "text": "ISMOBILE || ISWEB",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ISMOBILE",
                                  "children": []
                                },
                                {
                                  "type": "||",
                                  "text": "||",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "ISWEB",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "||",
                              "text": "||",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "ISPANDORA",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "||",
                          "text": "||",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "text": "1",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "type_definition",
                      "text": "typedef double ld;",
                      "children": [
                        {
                          "type": "typedef",
                          "text": "typedef",
                          "children": []
                        },
                        {
                          "type": "primitive_type",
                          "text": "double",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "ld",
                          "children": []
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define LDF \"%lf\"\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "LDF",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " \"%lf\"",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define PLDF \"lf\"\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "PLDF",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " \"lf\"",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_else",
                      "text": "#else\ntypedef long double ld;\n#define LDF \"%Lf\"\n#define PLDF \"Lf\"\n",
                      "children": [
                        {
                          "type": "#else",
                          "text": "#else",
                          "children": []
                        },
                        {
                          "type": "type_definition",
                          "text": "typedef long double ld;",
                          "children": [
                            {
                              "type": "typedef",
                              "text": "typedef",
                              "children": []
                            },
                            {
                              "type": "sized_type_specifier",
                              "text": "long double",
                              "children": [
                                {
                                  "type": "long",
                                  "text": "long",
                                  "children": []
                                },
                                {
                                  "type": "primitive_type",
                                  "text": "double",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define LDF \"%Lf\"\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "LDF",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " \"%Lf\"",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define PLDF \"Lf\"\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "PLDF",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " \"Lf\"",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef complex<ld> cld;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "complex<ld>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "complex",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<ld>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "ld",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "ld",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "cld",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef unsigned color_t;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "sized_type_specifier",
                      "text": "unsigned",
                      "children": [
                        {
                          "type": "unsigned",
                          "text": "unsigned",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "color_t",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "struct_specifier",
                  "text": "struct charstyle {\n  int charid;\n  color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;\n  bool lefthanded;\n  }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "charstyle",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n  int charid;\n  color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;\n  bool lefthanded;\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int charid;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "charid",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "color_t skincolor, haircolor, dresscolor, swordcolor, dresscolor2, uicolor, eyecolor;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "color_t",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "skincolor",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "haircolor",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "dresscolor",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "swordcolor",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "dresscolor2",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "uicolor",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "eyecolor",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool lefthanded;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "lefthanded",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "enum_specifier",
                  "text": "enum eStereo { sOFF, sAnaglyph, sLR, sODS }",
                  "children": [
                    {
                      "type": "enum",
                      "text": "enum",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "eStereo",
                      "children": []
                    },
                    {
                      "type": "enumerator_list",
                      "text": "{ sOFF, sAnaglyph, sLR, sODS }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "sOFF",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sOFF",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "sAnaglyph",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sAnaglyph",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "sLR",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sLR",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "sODS",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sODS",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "enum_specifier",
                  "text": "enum eModel : int",
                  "children": [
                    {
                      "type": "enum",
                      "text": "enum",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "eModel",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "/** configuration of the projection */",
                  "children": []
                },
                {
                  "type": "struct_specifier",
                  "text": "struct projection_configuration {\n  eModel model;            /**< which projection, see classes.cpp */\n  ld xposition, yposition; /**< move the center to another position */\n  ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;\n  ld clip_min, clip_max;\n  ld model_orientation, halfplane_scale, model_orientation_yz;\n  ld collignon_parameter;\n  ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;\n  bool show_hyperboloid_flat;\n  bool collignon_reflected;\n  string formula;\n  eModel basic_model;\n  ld top_z;\n  ld model_transition;\n  ld spiral_angle;\n  ld spiral_x;\n  ld spiral_y;\n  bool use_atan;\n  ld right_spiral_multiplier;\n  ld any_spiral_multiplier;\n  ld sphere_spiral_multiplier;\n  ld spiral_cone;\n  ld skiprope;\n  ld product_z_scale;\n  ld rotational_nil;\n\n  ld depth_scaling;\n  ld hyperboloid_scaling;\n  ld vr_angle, vr_zshift, vr_scale_factor;\n  bool dualfocus_autoscale;\n\n  int back_and_front; /* 0 = do not, 1 = do, 2 = only back */\n\n  projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }\n  }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "projection_configuration",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n  eModel model;            /**< which projection, see classes.cpp */\n  ld xposition, yposition; /**< move the center to another position */\n  ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;\n  ld clip_min, clip_max;\n  ld model_orientation, halfplane_scale, model_orientation_yz;\n  ld collignon_parameter;\n  ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;\n  bool show_hyperboloid_flat;\n  bool collignon_reflected;\n  string formula;\n  eModel basic_model;\n  ld top_z;\n  ld model_transition;\n  ld spiral_angle;\n  ld spiral_x;\n  ld spiral_y;\n  bool use_atan;\n  ld right_spiral_multiplier;\n  ld any_spiral_multiplier;\n  ld sphere_spiral_multiplier;\n  ld spiral_cone;\n  ld skiprope;\n  ld product_z_scale;\n  ld rotational_nil;\n\n  ld depth_scaling;\n  ld hyperboloid_scaling;\n  ld vr_angle, vr_zshift, vr_scale_factor;\n  bool dualfocus_autoscale;\n\n  int back_and_front; /* 0 = do not, 1 = do, 2 = only back */\n\n  projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "eModel model;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "eModel",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "model",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "/**< which projection, see classes.cpp */",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld xposition, yposition;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "xposition",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "yposition",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "/**< move the center to another position */",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld scale, alpha, camera_angle, fisheye_param, twopoint_param, stretch, ballangle, ballproj, euclid_to_sphere;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "scale",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "alpha",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "camera_angle",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fisheye_param",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "twopoint_param",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "stretch",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "ballangle",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "ballproj",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "euclid_to_sphere",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld clip_min, clip_max;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "clip_min",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "clip_max",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld model_orientation, halfplane_scale, model_orientation_yz;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "model_orientation",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "halfplane_scale",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "model_orientation_yz",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld collignon_parameter;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "collignon_parameter",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld aitoff_parameter, miller_parameter, loximuthal_parameter, winkel_parameter;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "aitoff_parameter",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "miller_parameter",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "loximuthal_parameter",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "winkel_parameter",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool show_hyperboloid_flat;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "show_hyperboloid_flat",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool collignon_reflected;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "collignon_reflected",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "string formula;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "string",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "formula",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "eModel basic_model;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "eModel",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "basic_model",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld top_z;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "top_z",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld model_transition;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "model_transition",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld spiral_angle;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "spiral_angle",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld spiral_x;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "spiral_x",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld spiral_y;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "spiral_y",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool use_atan;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "use_atan",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld right_spiral_multiplier;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "right_spiral_multiplier",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld any_spiral_multiplier;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "any_spiral_multiplier",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld sphere_spiral_multiplier;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "sphere_spiral_multiplier",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld spiral_cone;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "spiral_cone",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld skiprope;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "skiprope",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld product_z_scale;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "product_z_scale",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld rotational_nil;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "rotational_nil",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld depth_scaling;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "depth_scaling",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld hyperboloid_scaling;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "hyperboloid_scaling",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld vr_angle, vr_zshift, vr_scale_factor;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "vr_angle",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "vr_zshift",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "vr_scale_factor",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool dualfocus_autoscale;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "dualfocus_autoscale",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int back_and_front;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "back_and_front",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "/* 0 = do not, 1 = do, 2 = only back */",
                          "children": []
                        },
                        {
                          "type": "function_definition",
                          "text": "projection_configuration() {\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }",
                          "children": [
                            {
                              "type": "function_declarator",
                              "text": "projection_configuration()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "projection_configuration",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{\n    formula = \"z^2\"; top_z = 5; model_transition = 1; spiral_angle = 70; spiral_x = 10; spiral_y = 7;\n    rotational_nil = 1;\n    right_spiral_multiplier = 1;\n    any_spiral_multiplier = 1;\n    sphere_spiral_multiplier = 2;\n    spiral_cone = 360;\n    use_atan = false;\n    product_z_scale = 1;\n    aitoff_parameter = .5;\n    miller_parameter = .8;\n    loximuthal_parameter = 0;\n    winkel_parameter = .5;\n    show_hyperboloid_flat = true;\n    depth_scaling = 1;\n    vr_angle = 0;\n    hyperboloid_scaling = 1;\n    vr_zshift = 0;\n    vr_scale_factor = 1;\n    back_and_front = 0;\n    dualfocus_autoscale = false;\n    }",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "formula = \"z^2\";",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "formula = \"z^2\"",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "formula",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "string_literal",
                                          "text": "\"z^2\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "top_z = 5;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "top_z = 5",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "top_z",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "5",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "model_transition = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "model_transition = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "model_transition",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "spiral_angle = 70;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "spiral_angle = 70",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "spiral_angle",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "70",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "spiral_x = 10;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "spiral_x = 10",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "spiral_x",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "10",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "spiral_y = 7;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "spiral_y = 7",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "spiral_y",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "7",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "rotational_nil = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "rotational_nil = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "rotational_nil",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "right_spiral_multiplier = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "right_spiral_multiplier = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "right_spiral_multiplier",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "any_spiral_multiplier = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "any_spiral_multiplier = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "any_spiral_multiplier",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "sphere_spiral_multiplier = 2;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "sphere_spiral_multiplier = 2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sphere_spiral_multiplier",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "spiral_cone = 360;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "spiral_cone = 360",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "spiral_cone",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "360",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "use_atan = false;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "use_atan = false",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "use_atan",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "false",
                                          "text": "false",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "product_z_scale = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "product_z_scale = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "product_z_scale",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "aitoff_parameter = .5;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "aitoff_parameter = .5",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "aitoff_parameter",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": ".5",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "miller_parameter = .8;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "miller_parameter = .8",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "miller_parameter",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": ".8",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "loximuthal_parameter = 0;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "loximuthal_parameter = 0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "loximuthal_parameter",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "winkel_parameter = .5;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "winkel_parameter = .5",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "winkel_parameter",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": ".5",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "show_hyperboloid_flat = true;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "show_hyperboloid_flat = true",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "show_hyperboloid_flat",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "true",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "depth_scaling = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "depth_scaling = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "depth_scaling",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "vr_angle = 0;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "vr_angle = 0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "vr_angle",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "hyperboloid_scaling = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "hyperboloid_scaling = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "hyperboloid_scaling",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "vr_zshift = 0;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "vr_zshift = 0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "vr_zshift",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "vr_scale_factor = 1;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "vr_scale_factor = 1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "vr_scale_factor",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "back_and_front = 0;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "back_and_front = 0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "back_and_front",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "dualfocus_autoscale = false;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "text": "dualfocus_autoscale = false",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dualfocus_autoscale",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "false",
                                          "text": "false",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "enum_specifier",
                  "text": "enum eThreatLevel { tlNoThreat, tlSpam, tlNormal, tlHighThreat }",
                  "children": [
                    {
                      "type": "enum",
                      "text": "enum",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "eThreatLevel",
                      "children": []
                    },
                    {
                      "type": "enumerator_list",
                      "text": "{ tlNoThreat, tlSpam, tlNormal, tlHighThreat }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "tlNoThreat",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tlNoThreat",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "tlSpam",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tlSpam",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "tlNormal",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tlNormal",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "tlHighThreat",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tlHighThreat",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "struct_specifier",
                  "text": "struct videopar {\n  projection_configuration projection_config, rug_config;\n  ld yshift;\n  ld sspeed, mspeed;\n  ld binary_width, fixed_facing_dir;\n  int mobilecompasssize;\n  int radarsize; // radar for 3D geometries\n  ld radarrange;\n  int aurastr, aurasmoothen;\n  bool fixed_facing;\n  bool fixed_yz;\n  bool use_wall_radar;\n\n  int linequality;\n\n  bool want_fullscreen;\n  bool full;\n  bool change_fullscr;\n  bool relative_window_size;\n  bool want_vsync;\n  bool current_vsync;\n\n  int graphglyph; // graphical glyphs\n  bool darkhepta;\n  int shifttarget;\n\n  int xres, yres, framelimit;\n\n  int xscr, yscr;\n\n  int fullscreen_x, fullscreen_y;\n  int window_x, window_y;\n  ld window_rel_x, window_rel_y;\n\n  bool grid;\n  bool particles;\n\n  bool relative_font;\n  int fsize, abs_fsize, fontscale;\n  int flashtime;\n\n  int wallmode, monmode, axes, highlightmode, orbmode;\n  bool axes3;\n  bool revcontrol;\n\n  int msgleft, msglimit;\n\n  bool wantGL;\n  int want_antialias;\n  bool fineline;\n\n  bool usingGL;\n  int antialias;\n  #define AA_NOGL      1\n  #define AA_VERSION   2\n  #define AA_LINES     4\n  #define AA_POLY      8\n  #define AA_FONT      32\n  #define AA_MULTI     64\n  #define AA_MULTI16   128 // not configurable\n  ld linewidth;\n\n  ld multiplier_grid, multiplier_ring;\n\n  int joyvalue, joyvalue2, joypanthreshold;\n  ld joypanspeed;\n\n  charstyle cs;\n\n  bool samegender; // same gender for the Princess?\n  int language;\n\n  bool backeffects; // background particle effects\n\n  int killreduction, itemreduction, portreduction;\n\n  int steamscore;\n  bool drawmousecircle; // draw the circle around the mouse\n  bool skipstart;       // skip the start menu\n  bool quickmouse;      // quick mouse on the map\n  bool sloppy_3d;       // make 3D faster but ugly\n  int timeformat;       // time format used in the message log\n\n  int use_smart_range;  // 0 = distance-based, 1 = model-based, 2 = model-based and generate\n  ld smart_range_detail;// minimum visible cell for modes 1 and 2\n  ld smart_range_detail_3;// minimum visible cell in 3D (for mode 2, there is no mode 1)\n  bool smart_area_based;// based on area or length?\n  int cells_drawn_limit;\n  int cells_generated_limit; // limit on cells generated per frame\n\n  eStereo stereo_mode;\n  ld ipd;\n  ld lr_eyewidth, anaglyph_eyewidth;\n  ld fov;\n  bool consider_shader_projection;\n  int desaturate;\n  int texture_step;\n\n\n  bool always3;  // always use the 3D engine\n  ld depth;      // world level below the plane\n  ld camera;     // camera level above the plane\n  ld wall_height, creature_scale, height_width;\n  ld lake_top, lake_bottom;\n  ld rock_wall_ratio;\n  ld human_wall_ratio;\n  bool pseudohedral; // in 3D modes\n  ld depth_bonus;   // to fiix the placement of 3D models in pseudogonal -- not working currently\n\n  int tc_alpha, tc_depth, tc_camera;\n  ld highdetail, middetail;\n  bool gp_autoscale_heights;\n\n  ld eye;\n  bool auto_eye;\n\n  ld plevel_factor;\n  bool bubbles_special, bubbles_threshold, bubbles_all;\n  int joysmooth;\n\n  eThreatLevel faraway_highlight; // draw attention to monsters on the horizon\n  int faraway_highlight_color; // 0 = monster color, 100 = red-green oscillation\n\n  ld ispeed;\n  bool flasheffects;\n  }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "videopar",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n  projection_configuration projection_config, rug_config;\n  ld yshift;\n  ld sspeed, mspeed;\n  ld binary_width, fixed_facing_dir;\n  int mobilecompasssize;\n  int radarsize; // radar for 3D geometries\n  ld radarrange;\n  int aurastr, aurasmoothen;\n  bool fixed_facing;\n  bool fixed_yz;\n  bool use_wall_radar;\n\n  int linequality;\n\n  bool want_fullscreen;\n  bool full;\n  bool change_fullscr;\n  bool relative_window_size;\n  bool want_vsync;\n  bool current_vsync;\n\n  int graphglyph; // graphical glyphs\n  bool darkhepta;\n  int shifttarget;\n\n  int xres, yres, framelimit;\n\n  int xscr, yscr;\n\n  int fullscreen_x, fullscreen_y;\n  int window_x, window_y;\n  ld window_rel_x, window_rel_y;\n\n  bool grid;\n  bool particles;\n\n  bool relative_font;\n  int fsize, abs_fsize, fontscale;\n  int flashtime;\n\n  int wallmode, monmode, axes, highlightmode, orbmode;\n  bool axes3;\n  bool revcontrol;\n\n  int msgleft, msglimit;\n\n  bool wantGL;\n  int want_antialias;\n  bool fineline;\n\n  bool usingGL;\n  int antialias;\n  #define AA_NOGL      1\n  #define AA_VERSION   2\n  #define AA_LINES     4\n  #define AA_POLY      8\n  #define AA_FONT      32\n  #define AA_MULTI     64\n  #define AA_MULTI16   128 // not configurable\n  ld linewidth;\n\n  ld multiplier_grid, multiplier_ring;\n\n  int joyvalue, joyvalue2, joypanthreshold;\n  ld joypanspeed;\n\n  charstyle cs;\n\n  bool samegender; // same gender for the Princess?\n  int language;\n\n  bool backeffects; // background particle effects\n\n  int killreduction, itemreduction, portreduction;\n\n  int steamscore;\n  bool drawmousecircle; // draw the circle around the mouse\n  bool skipstart;       // skip the start menu\n  bool quickmouse;      // quick mouse on the map\n  bool sloppy_3d;       // make 3D faster but ugly\n  int timeformat;       // time format used in the message log\n\n  int use_smart_range;  // 0 = distance-based, 1 = model-based, 2 = model-based and generate\n  ld smart_range_detail;// minimum visible cell for modes 1 and 2\n  ld smart_range_detail_3;// minimum visible cell in 3D (for mode 2, there is no mode 1)\n  bool smart_area_based;// based on area or length?\n  int cells_drawn_limit;\n  int cells_generated_limit; // limit on cells generated per frame\n\n  eStereo stereo_mode;\n  ld ipd;\n  ld lr_eyewidth, anaglyph_eyewidth;\n  ld fov;\n  bool consider_shader_projection;\n  int desaturate;\n  int texture_step;\n\n\n  bool always3;  // always use the 3D engine\n  ld depth;      // world level below the plane\n  ld camera;     // camera level above the plane\n  ld wall_height, creature_scale, height_width;\n  ld lake_top, lake_bottom;\n  ld rock_wall_ratio;\n  ld human_wall_ratio;\n  bool pseudohedral; // in 3D modes\n  ld depth_bonus;   // to fiix the placement of 3D models in pseudogonal -- not working currently\n\n  int tc_alpha, tc_depth, tc_camera;\n  ld highdetail, middetail;\n  bool gp_autoscale_heights;\n\n  ld eye;\n  bool auto_eye;\n\n  ld plevel_factor;\n  bool bubbles_special, bubbles_threshold, bubbles_all;\n  int joysmooth;\n\n  eThreatLevel faraway_highlight; // draw attention to monsters on the horizon\n  int faraway_highlight_color; // 0 = monster color, 100 = red-green oscillation\n\n  ld ispeed;\n  bool flasheffects;\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "projection_configuration projection_config, rug_config;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "projection_configuration",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "projection_config",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "rug_config",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld yshift;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "yshift",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld sspeed, mspeed;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "sspeed",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "mspeed",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld binary_width, fixed_facing_dir;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "binary_width",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fixed_facing_dir",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int mobilecompasssize;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "mobilecompasssize",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int radarsize;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "radarsize",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// radar for 3D geometries",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld radarrange;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "radarrange",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int aurastr, aurasmoothen;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "aurastr",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "aurasmoothen",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool fixed_facing;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fixed_facing",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool fixed_yz;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fixed_yz",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool use_wall_radar;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "use_wall_radar",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int linequality;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "linequality",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool want_fullscreen;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "want_fullscreen",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool full;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "full",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool change_fullscr;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "change_fullscr",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool relative_window_size;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "relative_window_size",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool want_vsync;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "want_vsync",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool current_vsync;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "current_vsync",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int graphglyph;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "graphglyph",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// graphical glyphs",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool darkhepta;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "darkhepta",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int shifttarget;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "shifttarget",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int xres, yres, framelimit;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "xres",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "yres",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "framelimit",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int xscr, yscr;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "xscr",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "yscr",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int fullscreen_x, fullscreen_y;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fullscreen_x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fullscreen_y",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int window_x, window_y;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "window_x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "window_y",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld window_rel_x, window_rel_y;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "window_rel_x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "window_rel_y",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool grid;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "grid",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool particles;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "particles",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool relative_font;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "relative_font",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int fsize, abs_fsize, fontscale;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fsize",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "abs_fsize",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fontscale",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int flashtime;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "flashtime",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int wallmode, monmode, axes, highlightmode, orbmode;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "wallmode",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "monmode",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "axes",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "highlightmode",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "orbmode",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool axes3;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "axes3",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool revcontrol;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "revcontrol",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int msgleft, msglimit;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "msgleft",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "msglimit",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool wantGL;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "wantGL",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int want_antialias;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "want_antialias",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool fineline;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fineline",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool usingGL;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "usingGL",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int antialias;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "antialias",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_NOGL      1\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_NOGL",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "      1",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_VERSION   2\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_VERSION",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "   2",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_LINES     4\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_LINES",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "     4",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_POLY      8\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_POLY",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "      8",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_FONT      32\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_FONT",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "      32",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_MULTI     64\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_MULTI",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "     64",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define AA_MULTI16   128 // not configurable\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "AA_MULTI16",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": "   128 // not configurable",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld linewidth;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "linewidth",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld multiplier_grid, multiplier_ring;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "multiplier_grid",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "multiplier_ring",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int joyvalue, joyvalue2, joypanthreshold;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "joyvalue",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "joyvalue2",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "joypanthreshold",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld joypanspeed;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "joypanspeed",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "charstyle cs;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "charstyle",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "cs",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool samegender;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "samegender",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// same gender for the Princess?",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int language;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "language",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool backeffects;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "backeffects",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// background particle effects",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int killreduction, itemreduction, portreduction;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "killreduction",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "itemreduction",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "portreduction",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int steamscore;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "steamscore",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool drawmousecircle;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "drawmousecircle",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// draw the circle around the mouse",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool skipstart;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "skipstart",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// skip the start menu",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool quickmouse;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "quickmouse",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// quick mouse on the map",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool sloppy_3d;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "sloppy_3d",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// make 3D faster but ugly",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int timeformat;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "timeformat",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// time format used in the message log",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int use_smart_range;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "use_smart_range",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// 0 = distance-based, 1 = model-based, 2 = model-based and generate",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld smart_range_detail;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "smart_range_detail",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// minimum visible cell for modes 1 and 2",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld smart_range_detail_3;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "smart_range_detail_3",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// minimum visible cell in 3D (for mode 2, there is no mode 1)",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool smart_area_based;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "smart_area_based",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// based on area or length?",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int cells_drawn_limit;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "cells_drawn_limit",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int cells_generated_limit;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "cells_generated_limit",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// limit on cells generated per frame",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "eStereo stereo_mode;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "eStereo",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "stereo_mode",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld ipd;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "ipd",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld lr_eyewidth, anaglyph_eyewidth;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "lr_eyewidth",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "anaglyph_eyewidth",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld fov;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "fov",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool consider_shader_projection;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "consider_shader_projection",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int desaturate;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "desaturate",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int texture_step;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "texture_step",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool always3;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "always3",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// always use the 3D engine",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld depth;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "depth",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// world level below the plane",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld camera;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "camera",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// camera level above the plane",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld wall_height, creature_scale, height_width;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "wall_height",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "creature_scale",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "height_width",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld lake_top, lake_bottom;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "lake_top",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "lake_bottom",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld rock_wall_ratio;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "rock_wall_ratio",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld human_wall_ratio;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "human_wall_ratio",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool pseudohedral;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "pseudohedral",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// in 3D modes",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld depth_bonus;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "depth_bonus",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// to fiix the placement of 3D models in pseudogonal -- not working currently",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int tc_alpha, tc_depth, tc_camera;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "tc_alpha",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "tc_depth",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "tc_camera",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld highdetail, middetail;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "highdetail",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "middetail",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool gp_autoscale_heights;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "gp_autoscale_heights",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld eye;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "eye",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool auto_eye;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "auto_eye",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld plevel_factor;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "plevel_factor",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool bubbles_special, bubbles_threshold, bubbles_all;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "bubbles_special",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "bubbles_threshold",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "bubbles_all",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int joysmooth;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "joysmooth",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "eThreatLevel faraway_highlight;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "eThreatLevel",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "faraway_highlight",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// draw attention to monsters on the horizon",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int faraway_highlight_color;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "faraway_highlight_color",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// 0 = monster color, 100 = red-green oscillation",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "ld ispeed;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "ld",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "ispeed",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "bool flasheffects;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "flasheffects",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "declaration",
                  "text": "extern videopar vid;",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "extern",
                      "children": [
                        {
                          "type": "extern",
                          "text": "extern",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "videopar",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "vid",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief How many dimensional is the gameplay. In the FPP mode of a 2D geometry, WDIM is 2 */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define WDIM cginf.g.gameplay_dimension\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "WDIM",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " cginf.g.gameplay_dimension",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief How many dimensional is the graphical representation. In the FPP mode of a 2D geometry, MDIM is 3 */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define GDIM cginf.g.graphical_dimension\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GDIM",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " cginf.g.graphical_dimension",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief How many dimensions of the matrix representation are used. It is usually 3 in 2D geometries (not FPP) and in product geometries, 4 in 3D geometries */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define MDIM (MAXMDIM == 3 ? 3 : cginf.g.homogeneous_dimension)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MDIM",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (MAXMDIM == 3 ? 3 : cginf.g.homogeneous_dimension)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief What dimension of matrices is used in loops (the 'extra' dimensions have values 0 or 1 as in Id)\n *  Even if MDIM==3, it may be faster to keep 4x4 matrices and perform computations using them (rather than having another condition due to the variable loop size).\n *  The experiments on my computer show it to be the case, but the effect is not significant, and it may be different on another computer.\n */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define MXDIM (CAP_MDIM_FIXED ? MAXMDIM : MDIM)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MXDIM",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (CAP_MDIM_FIXED ? MAXMDIM : MDIM)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** \\brief The 'homogeneous' dimension index */",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define LDIM (MDIM-1)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "LDIM",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (MDIM-1)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define cclass g.kind\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "cclass",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " g.kind",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define self (*this)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "self",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (*this)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define BUGCOLORS 3\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "BUGCOLORS",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 3",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define big_unlock (inv::on && !ls::any_chaos())\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "big_unlock",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (inv::on && !ls::any_chaos())",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// land completion for shared unlocking",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define U5 (big_unlock ? 10 : 5)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "U5",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 10 : 5)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// land completion for advanced unlocking",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define U10 (big_unlock ? 25 : 10)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "U10",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 25 : 10)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// land completion",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R10 (big_unlock ? 50 : 10)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R10",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 50 : 10)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// intermediate lands",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R30 (big_unlock ? 100 : 30)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R30",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 100 : 30)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// advanced lands",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R60 (big_unlock ? 200 : 60)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R60",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 200 : 60)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// advanced lands II",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R90 (big_unlock ? 300 : 90)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R90",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 300 : 90)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// Crossroads IV",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R200 (big_unlock ? 800 : 200)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R200",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 800 : 200)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// Crossroads V",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R300 (big_unlock ? 1200 : 300)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R300",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 1200 : 300)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// kill types for Dragon Chasms",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R20 (big_unlock ? 30 : 20)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R20",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 30 : 20)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// kill count for Graveyard/Hive",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define R100 (big_unlock ? 500 : 100)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "R100",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (big_unlock ? 500 : 100)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// size casted to int, to prevent warnings and actual errors caused by the unsignedness of x.size()",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> int isize(const T& x) {return x.size(); }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "int isize(const T& x) {return x.size(); }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "isize(const T& x)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "isize",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(const T& x)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const T& x",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& x",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{return x.size(); }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "text": "return x.size();",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call_expression",
                                  "text": "x.size()",
                                  "children": [
                                    {
                                      "type": "field_expression",
                                      "text": "x.size",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "size",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// automatically growing vector",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> struct grow_vector : public vector<T> {\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  };",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "struct_specifier",
                      "text": "struct grow_vector : public vector<T> {\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  }",
                      "children": [
                        {
                          "type": "struct",
                          "text": "struct",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "grow_vector",
                          "children": []
                        },
                        {
                          "type": "base_class_clause",
                          "text": ": public vector<T>",
                          "children": [
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "public",
                              "text": "public",
                              "children": []
                            },
                            {
                              "type": "template_type",
                              "text": "vector<T>",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "vector",
                                  "children": []
                                },
                                {
                                  "type": "template_argument_list",
                                  "text": "<T>",
                                  "children": [
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "type_descriptor",
                                      "text": "T",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "T",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ">",
                                      "text": ">",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "field_declaration_list",
                          "text": "{\n  T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "function_definition",
                              "text": "T& grow(size_t index) {\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "T",
                                  "children": []
                                },
                                {
                                  "type": "reference_declarator",
                                  "text": "& grow(size_t index)",
                                  "children": [
                                    {
                                      "type": "&",
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "function_declarator",
                                      "text": "grow(size_t index)",
                                      "children": [
                                        {
                                          "type": "field_identifier",
                                          "text": "grow",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_list",
                                          "text": "(size_t index)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "parameter_declaration",
                                              "text": "size_t index",
                                              "children": [
                                                {
                                                  "type": "primitive_type",
                                                  "text": "size_t",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "index",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "text": "{\n    if(index >= this->size()) {\n      this->resize(index + 1);\n      }\n    return (vector<T>::operator[]) (index);\n    }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "if_statement",
                                      "text": "if(index >= this->size()) {\n      this->resize(index + 1);\n      }",
                                      "children": [
                                        {
                                          "type": "if",
                                          "text": "if",
                                          "children": []
                                        },
                                        {
                                          "type": "condition_clause",
                                          "text": "(index >= this->size())",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "text": "index >= this->size()",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "index",
                                                  "children": []
                                                },
                                                {
                                                  "type": ">=",
                                                  "text": ">=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "call_expression",
                                                  "text": "this->size()",
                                                  "children": [
                                                    {
                                                      "type": "field_expression",
                                                      "text": "this->size",
                                                      "children": [
                                                        {
                                                          "type": "this",
                                                          "text": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "->",
                                                          "text": "->",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "field_identifier",
                                                          "text": "size",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "()",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "compound_statement",
                                          "text": "{\n      this->resize(index + 1);\n      }",
                                          "children": [
                                            {
                                              "type": "{",
                                              "text": "{",
                                              "children": []
                                            },
                                            {
                                              "type": "expression_statement",
                                              "text": "this->resize(index + 1);",
                                              "children": [
                                                {
                                                  "type": "call_expression",
                                                  "text": "this->resize(index + 1)",
                                                  "children": [
                                                    {
                                                      "type": "field_expression",
                                                      "text": "this->resize",
                                                      "children": [
                                                        {
                                                          "type": "this",
                                                          "text": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "->",
                                                          "text": "->",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "field_identifier",
                                                          "text": "resize",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(index + 1)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_expression",
                                                          "text": "index + 1",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "index",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "+",
                                                              "text": "+",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "number_literal",
                                                              "text": "1",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "}",
                                              "text": "}",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "return_statement",
                                      "text": "return (vector<T>::operator[]) (index);",
                                      "children": [
                                        {
                                          "type": "return",
                                          "text": "return",
                                          "children": []
                                        },
                                        {
                                          "type": "call_expression",
                                          "text": "(vector<T>::operator[]) (index)",
                                          "children": [
                                            {
                                              "type": "parenthesized_expression",
                                              "text": "(vector<T>::operator[])",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "qualified_identifier",
                                                  "text": "vector<T>::operator[]",
                                                  "children": [
                                                    {
                                                      "type": "template_type",
                                                      "text": "vector<T>",
                                                      "children": [
                                                        {
                                                          "type": "type_identifier",
                                                          "text": "vector",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "template_argument_list",
                                                          "text": "<T>",
                                                          "children": [
                                                            {
                                                              "type": "<",
                                                              "text": "<",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "type_descriptor",
                                                              "text": "T",
                                                              "children": [
                                                                {
                                                                  "type": "type_identifier",
                                                                  "text": "T",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ">",
                                                              "text": ">",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "::",
                                                      "text": "::",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "operator_name",
                                                      "text": "operator[]",
                                                      "children": [
                                                        {
                                                          "type": "operator",
                                                          "text": "operator",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "[]",
                                                          "text": "[]",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(index)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "index",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// game forward declarations",
                  "children": []
                },
                {
                  "type": "namespace_definition",
                  "text": "namespace anticheat { extern bool tampered; }",
                  "children": [
                    {
                      "type": "namespace",
                      "text": "namespace",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "anticheat",
                      "children": []
                    },
                    {
                      "type": "declaration_list",
                      "text": "{ extern bool tampered; }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "declaration",
                          "text": "extern bool tampered;",
                          "children": [
                            {
                              "type": "storage_class_specifier",
                              "text": "extern",
                              "children": [
                                {
                                  "type": "extern",
                                  "text": "extern",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "tampered",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define HRANDMAX 0x7FFFFFFF\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "HRANDMAX",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0x7FFFFFFF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "struct_specifier",
                  "text": "struct movedir {\n  int d;\n  // non-negative numbers denote 'rotate +d steps and act in this direction\n  // negative numbers have the following meanings (warning: not used consistently):\n  #define MD_WAIT (-1)\n  #define MD_DROP (-2)\n  #define MD_UNDECIDED (-3)\n  #define MD_USE_ORB (-4)\n  int subdir; // for normal movement (0+): turn left or right\n  struct cell *tgt;  // for MD_USE_ORB: target cell\n  }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "movedir",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n  int d;\n  // non-negative numbers denote 'rotate +d steps and act in this direction\n  // negative numbers have the following meanings (warning: not used consistently):\n  #define MD_WAIT (-1)\n  #define MD_DROP (-2)\n  #define MD_UNDECIDED (-3)\n  #define MD_USE_ORB (-4)\n  int subdir; // for normal movement (0+): turn left or right\n  struct cell *tgt;  // for MD_USE_ORB: target cell\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "int d;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "d",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// non-negative numbers denote 'rotate +d steps and act in this direction",
                          "children": []
                        },
                        {
                          "type": "comment",
                          "text": "// negative numbers have the following meanings (warning: not used consistently):",
                          "children": []
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define MD_WAIT (-1)\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MD_WAIT",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " (-1)",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define MD_DROP (-2)\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MD_DROP",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " (-2)",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define MD_UNDECIDED (-3)\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MD_UNDECIDED",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " (-3)",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define MD_USE_ORB (-4)\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MD_USE_ORB",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " (-4)",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "field_declaration",
                          "text": "int subdir;",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "subdir",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// for normal movement (0+): turn left or right",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "struct cell *tgt;",
                          "children": [
                            {
                              "type": "struct_specifier",
                              "text": "struct cell",
                              "children": [
                                {
                                  "type": "struct",
                                  "text": "struct",
                                  "children": []
                                },
                                {
                                  "type": "type_identifier",
                                  "text": "cell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "pointer_declarator",
                              "text": "*tgt",
                              "children": [
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "field_identifier",
                                  "text": "tgt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "text": "// for MD_USE_ORB: target cell",
                          "children": []
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "// shmup",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T>\nclass hookset {\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n};",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "class_specifier",
                      "text": "class hookset {\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n}",
                      "children": [
                        {
                          "type": "class",
                          "text": "class",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "hookset",
                          "children": []
                        },
                        {
                          "type": "field_declaration_list",
                          "text": "{\n    std::map<int, std::function<T>> *map_ = nullptr;\n\npublic:\n    template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }\n\n    void del(int prio) {\n        map_->erase(prio);\n        }\n\n    template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }\n\n    template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }\n}",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "field_declaration",
                              "text": "std::map<int, std::function<T>> *map_ = nullptr;",
                              "children": [
                                {
                                  "type": "qualified_identifier",
                                  "text": "std::map<int, std::function<T>>",
                                  "children": [
                                    {
                                      "type": "namespace_identifier",
                                      "text": "std",
                                      "children": []
                                    },
                                    {
                                      "type": "::",
                                      "text": "::",
                                      "children": []
                                    },
                                    {
                                      "type": "template_type",
                                      "text": "map<int, std::function<T>>",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "map",
                                          "children": []
                                        },
                                        {
                                          "type": "template_argument_list",
                                          "text": "<int, std::function<T>>",
                                          "children": [
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "int",
                                              "children": [
                                                {
                                                  "type": "primitive_type",
                                                  "text": "int",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "std::function<T>",
                                              "children": [
                                                {
                                                  "type": "qualified_identifier",
                                                  "text": "std::function<T>",
                                                  "children": [
                                                    {
                                                      "type": "namespace_identifier",
                                                      "text": "std",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "::",
                                                      "text": "::",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "template_type",
                                                      "text": "function<T>",
                                                      "children": [
                                                        {
                                                          "type": "type_identifier",
                                                          "text": "function",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "template_argument_list",
                                                          "text": "<T>",
                                                          "children": [
                                                            {
                                                              "type": "<",
                                                              "text": "<",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "type_descriptor",
                                                              "text": "T",
                                                              "children": [
                                                                {
                                                                  "type": "type_identifier",
                                                                  "text": "T",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ">",
                                                              "text": ">",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ">",
                                              "text": ">",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "pointer_declarator",
                                  "text": "*map_",
                                  "children": [
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "field_identifier",
                                      "text": "map_",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "nullptr",
                                  "text": "nullptr",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "access_specifier",
                              "text": "public:",
                              "children": [
                                {
                                  "type": "public",
                                  "text": "public",
                                  "children": []
                                },
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "template_declaration",
                              "text": "template<class U>\n    int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }",
                              "children": [
                                {
                                  "type": "template",
                                  "text": "template",
                                  "children": []
                                },
                                {
                                  "type": "template_parameter_list",
                                  "text": "<class U>",
                                  "children": [
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "type_parameter_declaration",
                                      "text": "class U",
                                      "children": [
                                        {
                                          "type": "class",
                                          "text": "class",
                                          "children": []
                                        },
                                        {
                                          "type": "type_identifier",
                                          "text": "U",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ">",
                                      "text": ">",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "function_definition",
                                  "text": "int add(int prio, U&& hook) {\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "function_declarator",
                                      "text": "add(int prio, U&& hook)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "add",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_list",
                                          "text": "(int prio, U&& hook)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "parameter_declaration",
                                              "text": "int prio",
                                              "children": [
                                                {
                                                  "type": "primitive_type",
                                                  "text": "int",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "prio",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "parameter_declaration",
                                              "text": "U&& hook",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "U",
                                                  "children": []
                                                },
                                                {
                                                  "type": "reference_declarator",
                                                  "text": "&& hook",
                                                  "children": [
                                                    {
                                                      "type": "&&",
                                                      "text": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "hook",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "compound_statement",
                                      "text": "{\n        if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();\n        while (map_->count(prio)) {\n            prio++;\n        }\n        map_->emplace(prio, static_cast<U&&>(hook));\n        return prio;\n    }",
                                      "children": [
                                        {
                                          "type": "{",
                                          "text": "{",
                                          "children": []
                                        },
                                        {
                                          "type": "if_statement",
                                          "text": "if (map_ == nullptr) map_ = new std::map<int, std::function<T>>();",
                                          "children": [
                                            {
                                              "type": "if",
                                              "text": "if",
                                              "children": []
                                            },
                                            {
                                              "type": "condition_clause",
                                              "text": "(map_ == nullptr)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "map_ == nullptr",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "map_",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "==",
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "nullptr",
                                                      "text": "nullptr",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "text": "map_ = new std::map<int, std::function<T>>();",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "text": "map_ = new std::map<int, std::function<T>>()",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "map_",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "new_expression",
                                                      "text": "new std::map<int, std::function<T>>()",
                                                      "children": [
                                                        {
                                                          "type": "new",
                                                          "text": "new",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "qualified_identifier",
                                                          "text": "std::map<int, std::function<T>>",
                                                          "children": [
                                                            {
                                                              "type": "namespace_identifier",
                                                              "text": "std",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "::",
                                                              "text": "::",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "template_type",
                                                              "text": "map<int, std::function<T>>",
                                                              "children": [
                                                                {
                                                                  "type": "type_identifier",
                                                                  "text": "map",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "template_argument_list",
                                                                  "text": "<int, std::function<T>>",
                                                                  "children": [
                                                                    {
                                                                      "type": "<",
                                                                      "text": "<",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "type_descriptor",
                                                                      "text": "int",
                                                                      "children": [
                                                                        {
                                                                          "type": "primitive_type",
                                                                          "text": "int",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": ",",
                                                                      "text": ",",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "type_descriptor",
                                                                      "text": "std::function<T>",
                                                                      "children": [
                                                                        {
                                                                          "type": "qualified_identifier",
                                                                          "text": "std::function<T>",
                                                                          "children": [
                                                                            {
                                                                              "type": "namespace_identifier",
                                                                              "text": "std",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "::",
                                                                              "text": "::",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "template_type",
                                                                              "text": "function<T>",
                                                                              "children": [
                                                                                {
                                                                                  "type": "type_identifier",
                                                                                  "text": "function",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "template_argument_list",
                                                                                  "text": "<T>",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "<",
                                                                                      "text": "<",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "type_descriptor",
                                                                                      "text": "T",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "type_identifier",
                                                                                          "text": "T",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": ">",
                                                                                      "text": ">",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": ">",
                                                                      "text": ">",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "while_statement",
                                          "text": "while (map_->count(prio)) {\n            prio++;\n        }",
                                          "children": [
                                            {
                                              "type": "while",
                                              "text": "while",
                                              "children": []
                                            },
                                            {
                                              "type": "condition_clause",
                                              "text": "(map_->count(prio))",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "call_expression",
                                                  "text": "map_->count(prio)",
                                                  "children": [
                                                    {
                                                      "type": "field_expression",
                                                      "text": "map_->count",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "map_",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "->",
                                                          "text": "->",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "field_identifier",
                                                          "text": "count",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(prio)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "prio",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "compound_statement",
                                              "text": "{\n            prio++;\n        }",
                                              "children": [
                                                {
                                                  "type": "{",
                                                  "text": "{",
                                                  "children": []
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "prio++;",
                                                  "children": [
                                                    {
                                                      "type": "update_expression",
                                                      "text": "prio++",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "prio",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "++",
                                                          "text": "++",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "}",
                                                  "text": "}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "expression_statement",
                                          "text": "map_->emplace(prio, static_cast<U&&>(hook));",
                                          "children": [
                                            {
                                              "type": "call_expression",
                                              "text": "map_->emplace(prio, static_cast<U&&>(hook))",
                                              "children": [
                                                {
                                                  "type": "field_expression",
                                                  "text": "map_->emplace",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "map_",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "->",
                                                      "text": "->",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "field_identifier",
                                                      "text": "emplace",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(prio, static_cast<U&&>(hook))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "prio",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call_expression",
                                                      "text": "static_cast<U&&>(hook)",
                                                      "children": [
                                                        {
                                                          "type": "template_function",
                                                          "text": "static_cast<U&&>",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "static_cast",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "template_argument_list",
                                                              "text": "<U&&>",
                                                              "children": [
                                                                {
                                                                  "type": "<",
                                                                  "text": "<",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "type_descriptor",
                                                                  "text": "U&&",
                                                                  "children": [
                                                                    {
                                                                      "type": "type_identifier",
                                                                      "text": "U",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "abstract_reference_declarator",
                                                                      "text": "&&",
                                                                      "children": [
                                                                        {
                                                                          "type": "&&",
                                                                          "text": "&&",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": ">",
                                                                  "text": ">",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(hook)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "hook",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "return_statement",
                                          "text": "return prio;",
                                          "children": [
                                            {
                                              "type": "return",
                                              "text": "return",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "prio",
                                              "children": []
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "}",
                                          "text": "}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "function_definition",
                              "text": "void del(int prio) {\n        map_->erase(prio);\n        }",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "void",
                                  "children": []
                                },
                                {
                                  "type": "function_declarator",
                                  "text": "del(int prio)",
                                  "children": [
                                    {
                                      "type": "field_identifier",
                                      "text": "del",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_list",
                                      "text": "(int prio)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "int prio",
                                          "children": [
                                            {
                                              "type": "primitive_type",
                                              "text": "int",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "prio",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "text": "{\n        map_->erase(prio);\n        }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "map_->erase(prio);",
                                      "children": [
                                        {
                                          "type": "call_expression",
                                          "text": "map_->erase(prio)",
                                          "children": [
                                            {
                                              "type": "field_expression",
                                              "text": "map_->erase",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "map_",
                                                  "children": []
                                                },
                                                {
                                                  "type": "->",
                                                  "text": "->",
                                                  "children": []
                                                },
                                                {
                                                  "type": "field_identifier",
                                                  "text": "erase",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(prio)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "prio",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "template_declaration",
                              "text": "template<class... U>\n    void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }",
                              "children": [
                                {
                                  "type": "template",
                                  "text": "template",
                                  "children": []
                                },
                                {
                                  "type": "template_parameter_list",
                                  "text": "<class... U>",
                                  "children": [
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "variadic_type_parameter_declaration",
                                      "text": "class... U",
                                      "children": [
                                        {
                                          "type": "class",
                                          "text": "class",
                                          "children": []
                                        },
                                        {
                                          "type": "...",
                                          "text": "...",
                                          "children": []
                                        },
                                        {
                                          "type": "type_identifier",
                                          "text": "U",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ">",
                                      "text": ">",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "function_definition",
                                  "text": "void callhooks(U&&... args) const {\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "function_declarator",
                                      "text": "callhooks(U&&... args) const",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "callhooks",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_list",
                                          "text": "(U&&... args)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "variadic_parameter_declaration",
                                              "text": "U&&... args",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "U",
                                                  "children": []
                                                },
                                                {
                                                  "type": "reference_declarator",
                                                  "text": "&&... args",
                                                  "children": [
                                                    {
                                                      "type": "&&",
                                                      "text": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "variadic_declarator",
                                                      "text": "... args",
                                                      "children": [
                                                        {
                                                          "type": "...",
                                                          "text": "...",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "type_qualifier",
                                          "text": "const",
                                          "children": [
                                            {
                                              "type": "const",
                                              "text": "const",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "compound_statement",
                                      "text": "{\n        if (map_ == nullptr) return;\n        for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }\n    }",
                                      "children": [
                                        {
                                          "type": "{",
                                          "text": "{",
                                          "children": []
                                        },
                                        {
                                          "type": "if_statement",
                                          "text": "if (map_ == nullptr) return;",
                                          "children": [
                                            {
                                              "type": "if",
                                              "text": "if",
                                              "children": []
                                            },
                                            {
                                              "type": "condition_clause",
                                              "text": "(map_ == nullptr)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "map_ == nullptr",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "map_",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "==",
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "nullptr",
                                                      "text": "nullptr",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "return_statement",
                                              "text": "return;",
                                              "children": [
                                                {
                                                  "type": "return",
                                                  "text": "return",
                                                  "children": []
                                                },
                                                {
                                                  "type": ";",
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "for_range_loop",
                                          "text": "for (const auto& p : *map_) {\n            p.second(static_cast<U&&>(args)...);\n        }",
                                          "children": [
                                            {
                                              "type": "for",
                                              "text": "for",
                                              "children": []
                                            },
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "type_qualifier",
                                              "text": "const",
                                              "children": [
                                                {
                                                  "type": "const",
                                                  "text": "const",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "auto",
                                              "text": "auto",
                                              "children": []
                                            },
                                            {
                                              "type": "reference_declarator",
                                              "text": "& p",
                                              "children": [
                                                {
                                                  "type": "&",
                                                  "text": "&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "p",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ":",
                                              "text": ":",
                                              "children": []
                                            },
                                            {
                                              "type": "pointer_expression",
                                              "text": "*map_",
                                              "children": [
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "map_",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            },
                                            {
                                              "type": "compound_statement",
                                              "text": "{\n            p.second(static_cast<U&&>(args)...);\n        }",
                                              "children": [
                                                {
                                                  "type": "{",
                                                  "text": "{",
                                                  "children": []
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "p.second(static_cast<U&&>(args)...);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "p.second(static_cast<U&&>(args)...)",
                                                      "children": [
                                                        {
                                                          "type": "field_expression",
                                                          "text": "p.second",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "p",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "field_identifier",
                                                              "text": "second",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(static_cast<U&&>(args)...)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "parameter_pack_expansion",
                                                              "text": "static_cast<U&&>(args)...",
                                                              "children": [
                                                                {
                                                                  "type": "call_expression",
                                                                  "text": "static_cast<U&&>(args)",
                                                                  "children": [
                                                                    {
                                                                      "type": "template_function",
                                                                      "text": "static_cast<U&&>",
                                                                      "children": [
                                                                        {
                                                                          "type": "identifier",
                                                                          "text": "static_cast",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "template_argument_list",
                                                                          "text": "<U&&>",
                                                                          "children": [
                                                                            {
                                                                              "type": "<",
                                                                              "text": "<",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "type_descriptor",
                                                                              "text": "U&&",
                                                                              "children": [
                                                                                {
                                                                                  "type": "type_identifier",
                                                                                  "text": "U",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "abstract_reference_declarator",
                                                                                  "text": "&&",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "&&",
                                                                                      "text": "&&",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": ">",
                                                                              "text": ">",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "argument_list",
                                                                      "text": "(args)",
                                                                      "children": [
                                                                        {
                                                                          "type": "(",
                                                                          "text": "(",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "identifier",
                                                                          "text": "args",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": ")",
                                                                          "text": ")",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "...",
                                                                  "text": "...",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "}",
                                                  "text": "}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "}",
                                          "text": "}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "template_declaration",
                              "text": "template<class V, class... U>\n    V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }",
                              "children": [
                                {
                                  "type": "template",
                                  "text": "template",
                                  "children": []
                                },
                                {
                                  "type": "template_parameter_list",
                                  "text": "<class V, class... U>",
                                  "children": [
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "type_parameter_declaration",
                                      "text": "class V",
                                      "children": [
                                        {
                                          "type": "class",
                                          "text": "class",
                                          "children": []
                                        },
                                        {
                                          "type": "type_identifier",
                                          "text": "V",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "variadic_type_parameter_declaration",
                                      "text": "class... U",
                                      "children": [
                                        {
                                          "type": "class",
                                          "text": "class",
                                          "children": []
                                        },
                                        {
                                          "type": "...",
                                          "text": "...",
                                          "children": []
                                        },
                                        {
                                          "type": "type_identifier",
                                          "text": "U",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ">",
                                      "text": ">",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "function_definition",
                                  "text": "V callhandlers(V zero, U&&... args) const {\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "V",
                                      "children": []
                                    },
                                    {
                                      "type": "function_declarator",
                                      "text": "callhandlers(V zero, U&&... args) const",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "callhandlers",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_list",
                                          "text": "(V zero, U&&... args)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "parameter_declaration",
                                              "text": "V zero",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "V",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "zero",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "variadic_parameter_declaration",
                                              "text": "U&&... args",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "U",
                                                  "children": []
                                                },
                                                {
                                                  "type": "reference_declarator",
                                                  "text": "&&... args",
                                                  "children": [
                                                    {
                                                      "type": "&&",
                                                      "text": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "variadic_declarator",
                                                      "text": "... args",
                                                      "children": [
                                                        {
                                                          "type": "...",
                                                          "text": "...",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "type_qualifier",
                                          "text": "const",
                                          "children": [
                                            {
                                              "type": "const",
                                              "text": "const",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "compound_statement",
                                      "text": "{\n        if (map_ == nullptr) return zero;\n        for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }\n        return zero;\n    }",
                                      "children": [
                                        {
                                          "type": "{",
                                          "text": "{",
                                          "children": []
                                        },
                                        {
                                          "type": "if_statement",
                                          "text": "if (map_ == nullptr) return zero;",
                                          "children": [
                                            {
                                              "type": "if",
                                              "text": "if",
                                              "children": []
                                            },
                                            {
                                              "type": "condition_clause",
                                              "text": "(map_ == nullptr)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "map_ == nullptr",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "map_",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "==",
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "nullptr",
                                                      "text": "nullptr",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "return_statement",
                                              "text": "return zero;",
                                              "children": [
                                                {
                                                  "type": "return",
                                                  "text": "return",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "zero",
                                                  "children": []
                                                },
                                                {
                                                  "type": ";",
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "for_range_loop",
                                          "text": "for (const auto& p : *map_) {\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }",
                                          "children": [
                                            {
                                              "type": "for",
                                              "text": "for",
                                              "children": []
                                            },
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "type_qualifier",
                                              "text": "const",
                                              "children": [
                                                {
                                                  "type": "const",
                                                  "text": "const",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "auto",
                                              "text": "auto",
                                              "children": []
                                            },
                                            {
                                              "type": "reference_declarator",
                                              "text": "& p",
                                              "children": [
                                                {
                                                  "type": "&",
                                                  "text": "&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "p",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ":",
                                              "text": ":",
                                              "children": []
                                            },
                                            {
                                              "type": "pointer_expression",
                                              "text": "*map_",
                                              "children": [
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "map_",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            },
                                            {
                                              "type": "compound_statement",
                                              "text": "{\n            auto z = p.second(static_cast<U&&>(args)...);\n            if (z != zero) return z;\n        }",
                                              "children": [
                                                {
                                                  "type": "{",
                                                  "text": "{",
                                                  "children": []
                                                },
                                                {
                                                  "type": "declaration",
                                                  "text": "auto z = p.second(static_cast<U&&>(args)...);",
                                                  "children": [
                                                    {
                                                      "type": "auto",
                                                      "text": "auto",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "init_declarator",
                                                      "text": "z = p.second(static_cast<U&&>(args)...)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "z",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "call_expression",
                                                          "text": "p.second(static_cast<U&&>(args)...)",
                                                          "children": [
                                                            {
                                                              "type": "field_expression",
                                                              "text": "p.second",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "p",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "text": ".",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "field_identifier",
                                                                  "text": "second",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "argument_list",
                                                              "text": "(static_cast<U&&>(args)...)",
                                                              "children": [
                                                                {
                                                                  "type": "(",
                                                                  "text": "(",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "parameter_pack_expansion",
                                                                  "text": "static_cast<U&&>(args)...",
                                                                  "children": [
                                                                    {
                                                                      "type": "call_expression",
                                                                      "text": "static_cast<U&&>(args)",
                                                                      "children": [
                                                                        {
                                                                          "type": "template_function",
                                                                          "text": "static_cast<U&&>",
                                                                          "children": [
                                                                            {
                                                                              "type": "identifier",
                                                                              "text": "static_cast",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "template_argument_list",
                                                                              "text": "<U&&>",
                                                                              "children": [
                                                                                {
                                                                                  "type": "<",
                                                                                  "text": "<",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "type_descriptor",
                                                                                  "text": "U&&",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "type_identifier",
                                                                                      "text": "U",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "abstract_reference_declarator",
                                                                                      "text": "&&",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "&&",
                                                                                          "text": "&&",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": ">",
                                                                                  "text": ">",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "argument_list",
                                                                          "text": "(args)",
                                                                          "children": [
                                                                            {
                                                                              "type": "(",
                                                                              "text": "(",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "identifier",
                                                                              "text": "args",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": ")",
                                                                              "text": ")",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "...",
                                                                      "text": "...",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": ")",
                                                                  "text": ")",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "if_statement",
                                                  "text": "if (z != zero) return z;",
                                                  "children": [
                                                    {
                                                      "type": "if",
                                                      "text": "if",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "condition_clause",
                                                      "text": "(z != zero)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_expression",
                                                          "text": "z != zero",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "z",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "!=",
                                                              "text": "!=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "zero",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "return_statement",
                                                      "text": "return z;",
                                                      "children": [
                                                        {
                                                          "type": "return",
                                                          "text": "return",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "z",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ";",
                                                          "text": ";",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "}",
                                                  "text": "}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "return_statement",
                                          "text": "return zero;",
                                          "children": [
                                            {
                                              "type": "return",
                                              "text": "return",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "zero",
                                              "children": []
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "}",
                                          "text": "}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "alias_declaration",
                  "text": "using purehookset = hookset<void()>;",
                  "children": [
                    {
                      "type": "using",
                      "text": "using",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "purehookset",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "type_descriptor",
                      "text": "hookset<void()>",
                      "children": [
                        {
                          "type": "template_type",
                          "text": "hookset<void()>",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "hookset",
                              "children": []
                            },
                            {
                              "type": "template_argument_list",
                              "text": "<void()>",
                              "children": [
                                {
                                  "type": "<",
                                  "text": "<",
                                  "children": []
                                },
                                {
                                  "type": "type_descriptor",
                                  "text": "void()",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "abstract_function_declarator",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "parameter_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ">",
                                  "text": ">",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "static const int NOHINT = -1;",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "static",
                      "children": [
                        {
                          "type": "static",
                          "text": "static",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_qualifier",
                      "text": "const",
                      "children": [
                        {
                          "type": "const",
                          "text": "const",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "init_declarator",
                      "text": "NOHINT = -1",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "NOHINT",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "text": "-1",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef function<void()> reaction_t;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "function<void()>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "function",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<void()>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "void()",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "void",
                                  "children": []
                                },
                                {
                                  "type": "abstract_function_declarator",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "parameter_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "reaction_t",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef function<bool()> bool_reaction_t;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "function<bool()>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "function",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<bool()>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "bool()",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "bool",
                                  "children": []
                                },
                                {
                                  "type": "abstract_function_declarator",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "parameter_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "bool_reaction_t",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "void offer_choose_file(reaction_t r);",
                  "children": [
                    {
                      "type": "primitive_type",
                      "text": "void",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "offer_choose_file(reaction_t r)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "offer_choose_file",
                          "children": []
                        },
                        {
                          "type": "parameter_list",
                          "text": "(reaction_t r)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "reaction_t r",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "reaction_t",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "r",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define HELPFUN(x) (help_delegate = x, \"HELPFUN\")\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "HELPFUN",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(x)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (help_delegate = x, \"HELPFUN\")",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef function<int(struct cell*)> cellfunction;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "function<int(struct cell*)>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "function",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<int(struct cell*)>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "int(struct cell*)",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "abstract_function_declarator",
                                  "text": "(struct cell*)",
                                  "children": [
                                    {
                                      "type": "parameter_list",
                                      "text": "(struct cell*)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "struct cell*",
                                          "children": [
                                            {
                                              "type": "struct_specifier",
                                              "text": "struct cell",
                                              "children": [
                                                {
                                                  "type": "struct",
                                                  "text": "struct",
                                                  "children": []
                                                },
                                                {
                                                  "type": "type_identifier",
                                                  "text": "cell",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "abstract_pointer_declarator",
                                              "text": "*",
                                              "children": [
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "cellfunction",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// passable flags",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define SAGEMELT .1\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SAGEMELT",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " .1",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define PT(x, y) ((tactic::on || quotient == 2 || daily::on) ? (y) : inv::on ? min(2*(y),x) : (x))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "PT",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(x, y)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " ((tactic::on || quotient == 2 || daily::on) ? (y) : inv::on ? min(2*(y),x) : (x))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define ROCKSNAKELENGTH 50\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "ROCKSNAKELENGTH",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 50",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define WORMLENGTH 15\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "WORMLENGTH",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 15",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define PRIZEMUL 7\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "PRIZEMUL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 7",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define INF  9999\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "INF",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "  9999",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define INFD 60\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "INFD",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 60",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define PINFD 125\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "PINFD",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 125",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_ifdef",
                  "text": "#ifndef BARLEV\n#define BARLEV ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)\n#endif",
                  "children": [
                    {
                      "type": "#ifndef",
                      "text": "#ifndef",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "BARLEV",
                      "children": []
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define BARLEV ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "BARLEV",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " ((ISANDROID||ISIOS||ISFAKEMOBILE||getDistLimit()<7)?(getDistLimit()<4?8:9):10)",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define BUGLEV 15\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "BUGLEV",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 15",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// #define BARLEV 9",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define YDIST 101\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "YDIST",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 101",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MODECODES (1ll<<61)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MODECODES",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (1ll<<61)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GUNRANGE 3\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GUNRANGE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 3",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// loops",
                  "children": []
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define fakecellloop(ct) for(cell *ct = (cell*)1; ct; ct=NULL)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "fakecellloop",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " for(cell *ct = (cell*)1; ct; ct=NULL)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define forCellIdAll(ct, i, cf) fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=(cf)->move(i),true); i++)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forCellIdAll",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct, i, cf)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cf",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=(cf)->move(i),true); i++)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define forCellIdCM(ct, i, cf)  fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=createMov((cf),i),true); i++)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forCellIdCM",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct, i, cf)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cf",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": "  fakecellloop(ct) for(int i=0; i<(cf)->type && (ct=createMov((cf),i),true); i++)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define forCellIdEx(ct, i, cf)  forCellIdAll(ct,i,cf) if(ct)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forCellIdEx",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct, i, cf)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cf",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": "  forCellIdAll(ct,i,cf) if(ct)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define forCellEx(ct, cf) forCellIdEx(ct,forCellEx ## __LINE__,cf)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forCellEx",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct, cf)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cf",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " forCellIdEx(ct,forCellEx ## __LINE__,cf)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define forCellCM(ct, cf) forCellIdCM(ct,forCellCM ## __LINE__,cf)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forCellCM",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct, cf)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cf",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " forCellIdCM(ct,forCellCM ## __LINE__,cf)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define forCellAll(ct, cf) forCellIdCM(ct,forCellAll ## __LINE__,cf)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forCellAll",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(ct, cf)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ct",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "cf",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " forCellIdCM(ct,forCellAll ## __LINE__,cf)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// canAttack/moveval flags",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_NORMAL            0          // nothing special about this attack\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_NORMAL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "            0          // nothing special about this attack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_TOUGH             Flag(0)    // tough attacks: Hyperbugs\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_TOUGH",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(0)    // tough attacks: Hyperbugs",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_MAGIC             Flag(1)    // magical attacks: Flash\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_MAGIC",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(1)    // magical attacks: Flash",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_STAB              Flag(2)    // stabbing attacks (usually ignored except Hedgehogs)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_STAB",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(2)    // stabbing attacks (usually ignored except Hedgehogs)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_LANCE             Flag(3)    // lance attacks (used by Lancers)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_LANCE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(3)    // lance attacks (used by Lancers)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_ONLY_ENEMY        Flag(4)    // only say YES if it is an enemy\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_ONLY_ENEMY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "        Flag(4)    // only say YES if it is an enemy",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_ONLY_FRIEND       Flag(5)    // only say YES if it is a friend\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_ONLY_FRIEND",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "       Flag(5)    // only say YES if it is a friend",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_ONLY_FBUG         Flag(6)    // only say YES if it is a bug_or friend\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_ONLY_FBUG",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "         Flag(6)    // only say YES if it is a bug_or friend",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_BACK              Flag(7)    // backward attacks (ignored except Viziers and Flailers)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_BACK",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(7)    // backward attacks (ignored except Viziers and Flailers)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_APPROACH          Flag(8)    // approach attacks (ignored except Lancers)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_APPROACH",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "          Flag(8)    // approach attacks (ignored except Lancers)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_IGNORE_UNARMED    Flag(9)    // ignore the UNARMED flag\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_IGNORE_UNARMED",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "    Flag(9)    // ignore the UNARMED flag",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_NOSHIELD          Flag(10)   // ignore the shielded status\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_NOSHIELD",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "          Flag(10)   // ignore the shielded status",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_GETPLAYER         Flag(11)   // check for player (replace m2 with moPlayer for player position)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_GETPLAYER",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "         Flag(11)   // check for player (replace m2 with moPlayer for player position)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_GUN               Flag(12)   // revolver attack\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_GUN",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "               Flag(12)   // revolver attack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_FAST              Flag(13)   // fast attack\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_FAST",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(13)   // fast attack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_EAT               Flag(17)   // eating attacks from Worm-likes\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_EAT",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "               Flag(17)   // eating attacks from Worm-likes",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_NOATTACKS         Flag(14)   // don't do any attacks\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_NOATTACKS",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "         Flag(14)   // don't do any attacks",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_PATHDIST          Flag(15)   // consider pathdist for moveval\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_PATHDIST",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "          Flag(15)   // consider pathdist for moveval",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_ONLYEAGLE         Flag(16)   // do this only for Eagles\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_ONLYEAGLE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "         Flag(16)   // do this only for Eagles",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_MOUNT             Flag(18)   // don't do\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_MOUNT",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(18)   // don't do",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_NOFRIEND          Flag(19)   // don't do it for friends\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_NOFRIEND",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "          Flag(19)   // don't do it for friends",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_SWORD             Flag(20)   // big sword\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_SWORD",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(20)   // big sword",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_SWORD_INTO        Flag(21)   // moving into big sword\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_SWORD_INTO",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "        Flag(21)   // moving into big sword",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_MSG               Flag(22)   // produce a message\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_MSG",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "               Flag(22)   // produce a message",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_MUSTKILL          Flag(23)   // when TRUE, stunning attacks are not accepted by canAttack\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_MUSTKILL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "          Flag(23)   // when TRUE, stunning attacks are not accepted by canAttack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_NEXTTURN          Flag(24)   // next turn -- don't count shield at power 1\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_NEXTTURN",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "          Flag(24)   // next turn -- don't count shield at power 1",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_FALL              Flag(25)   // death by falling\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_FALL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(25)   // death by falling",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_STUNNED           Flag(26)   // edgeunstable: ignore ladders (as stunned monsters do)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_STUNNED",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "           Flag(26)   // edgeunstable: ignore ladders (as stunned monsters do)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define MF_IVY               Flag(27)   // edgeunstable: ignore ivy (ivy cannot climb ivy)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MF_IVY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "               Flag(27)   // edgeunstable: ignore ivy (ivy cannot climb ivy)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_HORNS             Flag(28)   // spear attack (always has APPROACH too)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_HORNS",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(28)   // spear attack (always has APPROACH too)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_BULL              Flag(29)   // bull attack\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_BULL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(29)   // bull attack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_SIDE              Flag(30)   // side attack\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_SIDE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(30)   // side attack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_CRUSH             Flag(31)   // Crusher's delayed attack\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_CRUSH",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "             Flag(31)   // Crusher's delayed attack",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_PLAGUE            Flag(32)   // Orb of Plague (do not check adjacency)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_PLAGUE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "            Flag(32)   // Orb of Plague (do not check adjacency)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_PSI               Flag(33)   // Orb of the Mind\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_PSI",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "               Flag(33)   // Orb of the Mind",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define AF_WEAK              Flag(34)   // Curse of Weakness\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "AF_WEAK",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "              Flag(34)   // Curse of Weakness",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if CAP_SDL\n\n#if CAP_PNG\n#include \"savepng.h\"\n#define IMAGEEXT \".png\"\nvoid IMAGESAVE(SDL_Surface *s, const char *fname);\n#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n#endif\n\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "CAP_SDL",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    },
                    {
                      "type": "preproc_if",
                      "text": "#if CAP_PNG\n#include \"savepng.h\"\n#define IMAGEEXT \".png\"\nvoid IMAGESAVE(SDL_Surface *s, const char *fname);\n#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n#endif",
                      "children": [
                        {
                          "type": "#if",
                          "text": "#if",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "CAP_PNG",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        },
                        {
                          "type": "preproc_include",
                          "text": "#include \"savepng.h\"\n",
                          "children": [
                            {
                              "type": "#include",
                              "text": "#include",
                              "children": []
                            },
                            {
                              "type": "string_literal",
                              "text": "\"savepng.h\"",
                              "children": [
                                {
                                  "type": "\"",
                                  "text": "\"",
                                  "children": []
                                },
                                {
                                  "type": "\"",
                                  "text": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define IMAGEEXT \".png\"\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "IMAGEEXT",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " \".png\"",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void IMAGESAVE(SDL_Surface *s, const char *fname);",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "IMAGESAVE(SDL_Surface *s, const char *fname)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "IMAGESAVE",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(SDL_Surface *s, const char *fname)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "SDL_Surface *s",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "SDL_Surface",
                                          "children": []
                                        },
                                        {
                                          "type": "pointer_declarator",
                                          "text": "*s",
                                          "children": [
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "s",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "const char *fname",
                                      "children": [
                                        {
                                          "type": "type_qualifier",
                                          "text": "const",
                                          "children": [
                                            {
                                              "type": "const",
                                              "text": "const",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "primitive_type",
                                          "text": "char",
                                          "children": []
                                        },
                                        {
                                          "type": "pointer_declarator",
                                          "text": "*fname",
                                          "children": [
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "fname",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_else",
                          "text": "#else\n#define IMAGEEXT \".bmp\"\n#define IMAGESAVE SDL_SaveBMP\n",
                          "children": [
                            {
                              "type": "#else",
                              "text": "#else",
                              "children": []
                            },
                            {
                              "type": "preproc_def",
                              "text": "#define IMAGEEXT \".bmp\"\n",
                              "children": [
                                {
                                  "type": "#define",
                                  "text": "#define",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "IMAGEEXT",
                                  "children": []
                                },
                                {
                                  "type": "preproc_arg",
                                  "text": " \".bmp\"",
                                  "children": []
                                },
                                {
                                  "type": "\n",
                                  "text": "\n",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "preproc_def",
                              "text": "#define IMAGESAVE SDL_SaveBMP\n",
                              "children": [
                                {
                                  "type": "#define",
                                  "text": "#define",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "IMAGESAVE",
                                  "children": []
                                },
                                {
                                  "type": "preproc_arg",
                                  "text": " SDL_SaveBMP",
                                  "children": []
                                },
                                {
                                  "type": "\n",
                                  "text": "\n",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "#endif",
                          "text": "#endif",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> struct dynamicval {\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  };",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "struct_specifier",
                      "text": "struct dynamicval {\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  }",
                      "children": [
                        {
                          "type": "struct",
                          "text": "struct",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "dynamicval",
                          "children": []
                        },
                        {
                          "type": "field_declaration_list",
                          "text": "{\n  T& where;\n  T backup;\n  dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }\n  dynamicval(T& wh) : where(wh) { backup = wh; }\n  ~dynamicval() { where = backup; }\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "field_declaration",
                              "text": "T& where;",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "T",
                                  "children": []
                                },
                                {
                                  "type": "reference_declarator",
                                  "text": "& where",
                                  "children": [
                                    {
                                      "type": "&",
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "field_identifier",
                                      "text": "where",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "field_declaration",
                              "text": "T backup;",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "T",
                                  "children": []
                                },
                                {
                                  "type": "field_identifier",
                                  "text": "backup",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "function_definition",
                              "text": "dynamicval(T& wh, T val) : where(wh) { backup = wh; wh = val; }",
                              "children": [
                                {
                                  "type": "function_declarator",
                                  "text": "dynamicval(T& wh, T val)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dynamicval",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_list",
                                      "text": "(T& wh, T val)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "T& wh",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "T",
                                              "children": []
                                            },
                                            {
                                              "type": "reference_declarator",
                                              "text": "& wh",
                                              "children": [
                                                {
                                                  "type": "&",
                                                  "text": "&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "wh",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "T val",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "T",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "val",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "field_initializer_list",
                                  "text": ": where(wh)",
                                  "children": [
                                    {
                                      "type": ":",
                                      "text": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "field_initializer",
                                      "text": "where(wh)",
                                      "children": [
                                        {
                                          "type": "field_identifier",
                                          "text": "where",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(wh)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "wh",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "text": "{ backup = wh; wh = val; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "backup = wh;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "text": "backup = wh",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "backup",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "wh",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "wh = val;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "text": "wh = val",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "wh",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "val",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "function_definition",
                              "text": "dynamicval(T& wh) : where(wh) { backup = wh; }",
                              "children": [
                                {
                                  "type": "function_declarator",
                                  "text": "dynamicval(T& wh)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dynamicval",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_list",
                                      "text": "(T& wh)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "T& wh",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "T",
                                              "children": []
                                            },
                                            {
                                              "type": "reference_declarator",
                                              "text": "& wh",
                                              "children": [
                                                {
                                                  "type": "&",
                                                  "text": "&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "wh",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "field_initializer_list",
                                  "text": ": where(wh)",
                                  "children": [
                                    {
                                      "type": ":",
                                      "text": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "field_initializer",
                                      "text": "where(wh)",
                                      "children": [
                                        {
                                          "type": "field_identifier",
                                          "text": "where",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(wh)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "wh",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "text": "{ backup = wh; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "backup = wh;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "text": "backup = wh",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "backup",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "wh",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "function_definition",
                              "text": "~dynamicval() { where = backup; }",
                              "children": [
                                {
                                  "type": "function_declarator",
                                  "text": "~dynamicval()",
                                  "children": [
                                    {
                                      "type": "destructor_name",
                                      "text": "~dynamicval",
                                      "children": [
                                        {
                                          "type": "~",
                                          "text": "~",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dynamicval",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "parameter_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "text": "{ where = backup; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "where = backup;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "text": "where = backup",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "where",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "backup",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "struct_specifier",
                  "text": "struct finalizer {\n  reaction_t f;\n  finalizer(reaction_t r) : f(r) {}\n  ~finalizer() { f(); }\n  }",
                  "children": [
                    {
                      "type": "struct",
                      "text": "struct",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "finalizer",
                      "children": []
                    },
                    {
                      "type": "field_declaration_list",
                      "text": "{\n  reaction_t f;\n  finalizer(reaction_t r) : f(r) {}\n  ~finalizer() { f(); }\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "field_declaration",
                          "text": "reaction_t f;",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "reaction_t",
                              "children": []
                            },
                            {
                              "type": "field_identifier",
                              "text": "f",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "function_definition",
                          "text": "finalizer(reaction_t r) : f(r) {}",
                          "children": [
                            {
                              "type": "function_declarator",
                              "text": "finalizer(reaction_t r)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "finalizer",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(reaction_t r)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "reaction_t r",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "reaction_t",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "r",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "field_initializer_list",
                              "text": ": f(r)",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "field_initializer",
                                  "text": "f(r)",
                                  "children": [
                                    {
                                      "type": "field_identifier",
                                      "text": "f",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(r)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "r",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{}",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "function_definition",
                          "text": "~finalizer() { f(); }",
                          "children": [
                            {
                              "type": "function_declarator",
                              "text": "~finalizer()",
                              "children": [
                                {
                                  "type": "destructor_name",
                                  "text": "~finalizer",
                                  "children": [
                                    {
                                      "type": "~",
                                      "text": "~",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "finalizer",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "compound_statement",
                              "text": "{ f(); }",
                              "children": [
                                {
                                  "type": "{",
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "expression_statement",
                                  "text": "f();",
                                  "children": [
                                    {
                                      "type": "call_expression",
                                      "text": "f()",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "f",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "declaration",
                  "text": "static const int MAXPLAYER = 7;",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "static",
                      "children": [
                        {
                          "type": "static",
                          "text": "static",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_qualifier",
                      "text": "const",
                      "children": [
                        {
                          "type": "const",
                          "text": "const",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "init_declarator",
                      "text": "MAXPLAYER = 7",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "MAXPLAYER",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "text": "7",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define DEFAULTCONTROL (multi::players == 1 && !shmup::on && !multi::alwaysuse)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "DEFAULTCONTROL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (multi::players == 1 && !shmup::on && !multi::alwaysuse)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define DEFAULTNOR(sym) (DEFAULTCONTROL || multi::notremapped(sym))\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "DEFAULTNOR",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(sym)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "sym",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (DEFAULTCONTROL || multi::notremapped(sym))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define CAP_MENUSCALING (ISPANDORA || ISMOBILE)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "CAP_MENUSCALING",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (ISPANDORA || ISMOBILE)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if CAP_MENUSCALING\n#define displayfrZ dialog::zoom::displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#else\n#define displayfrZ displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "CAP_MENUSCALING",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define displayfrZ dialog::zoom::displayfr\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "displayfrZ",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " dialog::zoom::displayfr",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define displayfrZH dialog::zoom::displayfr_highlight\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "displayfrZH",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " dialog::zoom::displayfr_highlight",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_else",
                      "text": "#else\n#define displayfrZ displayfr\n#define displayfrZH dialog::zoom::displayfr_highlight\n",
                      "children": [
                        {
                          "type": "#else",
                          "text": "#else",
                          "children": []
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define displayfrZ displayfr\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "displayfrZ",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " displayfr",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define displayfrZH dialog::zoom::displayfr_highlight\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "displayfrZH",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " dialog::zoom::displayfr_highlight",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// just in case if I change my mind about when Orbs lose their power",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define ORBBASE 0\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "ORBBASE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SHADOW_WALL 0x60\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SHADOW_WALL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0x60",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SHADOW_SL   0x18\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SHADOW_SL",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "   0x18",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SHADOW_MON  0x30\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SHADOW_MON",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "  0x30",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// ranks:",
                  "children": []
                },
                {
                  "type": "enum_specifier",
                  "text": "enum class PPR {\n  ZERO, EUCLIDEAN_SKY, OUTCIRCLE, MOVESTAR,\n  MINUSINF,\n  BELOWBOTTOMm,\n  BELOWBOTTOM,\n  BELOWBOTTOMp,\n  BELOWBOTTOM_FALLANIM,\n  LAKEBOTTOM, HELLSPIKE,\n  INLAKEWALLm, INLAKEWALL, INLAKEWALLp,\n  INLAKEWALL_FALLANIM,\n  BSHALLOW, SHALLOW, ASHALLOW,\n  SUBLAKELEV, LAKELEV, BOATLEV, BOATLEV2, BOATLEV3,\n  LAKEWALLm, LAKEWALL, LAKEWALLp,\n  LAKEWALL_FALLANIM,\n  FLOOR_TOWER,\n  FLOOR,\n  FLOOR_DRAGON,\n  FLOORa, FLOORb, FLOORc, FLOORd,\n  LIZEYE,\n  BFLOOR,\n  GFLOORa, GFLOORb, GFLOORc,\n  WALLSHADOW,\n  STRUCT0, STRUCT1, STRUCT2, STRUCT3,\n  THORNS, WALL,\n  REDWALLm, REDWALLs, REDWALLp, REDWALL,\n  REDWALLm2, REDWALLs2, REDWALLp2, REDWALLt2,\n  REDWALLm3, REDWALLs3, REDWALLp3, REDWALLt3,\n  HEPTAMARK,\n  ITEM_BELOW,\n  ITEM, ITEMa, ITEMb,\n  BIGSTATUE,\n\n  WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n\n// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n  HIDDEN, GIANTSHADOW,\n  TENTACLE0, TENTACLE1,\n  ONTENTACLE, ONTENTACLE_EYES, ONTENTACLE_EYES2,\n  MONSTER_SHADOW,\n  MONSTER_FOOT, MONSTER_LEG, MONSTER_GROIN,\n  MONSTER_SUBWPN, MONSTER_WPN,\n  MONSTER_BODY, MONSTER_ARMOR0, MONSTER_ARMOR1,\n  MONSTER_CLOAK, MONSTER_NECK,\n  MONSTER_HEAD, MONSTER_FACE, MONSTER_EYE0, MONSTER_EYE1,\n  MONSTER_HAIR, MONSTER_HAT0, MONSTER_HAT1,\n  MONSTER_HOODCLOAK1, MONSTER_HOODCLOAK2,\n  STUNSTARS,\n  CARRIED, CARRIEDa, CARRIEDb,\n  PARTICLE, SWORDMARK, MAGICSWORD, MISSILE, SKY,\n  MINEMARK, ARROW,\n  MOBILE_ARROW,\n  LINE,\n  // in depth tested models transparent surfaces need to be depth sorted by HyperRogue\n  // and set to PPR::TRANSPARENT_* to draw them after all the opaque ones\n  TRANSPARENT_LAKE, TRANSPARENT_SHADOW, TRANSPARENT_WALL,\n  // no depth testing for SUPERLINE and above\n  SUPERLINE, TEXT, CIRCLE,\n  MAX,\n  DEFAULT = -1\n  }",
                  "children": [
                    {
                      "type": "enum",
                      "text": "enum",
                      "children": []
                    },
                    {
                      "type": "class",
                      "text": "class",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "PPR",
                      "children": []
                    },
                    {
                      "type": "enumerator_list",
                      "text": "{\n  ZERO, EUCLIDEAN_SKY, OUTCIRCLE, MOVESTAR,\n  MINUSINF,\n  BELOWBOTTOMm,\n  BELOWBOTTOM,\n  BELOWBOTTOMp,\n  BELOWBOTTOM_FALLANIM,\n  LAKEBOTTOM, HELLSPIKE,\n  INLAKEWALLm, INLAKEWALL, INLAKEWALLp,\n  INLAKEWALL_FALLANIM,\n  BSHALLOW, SHALLOW, ASHALLOW,\n  SUBLAKELEV, LAKELEV, BOATLEV, BOATLEV2, BOATLEV3,\n  LAKEWALLm, LAKEWALL, LAKEWALLp,\n  LAKEWALL_FALLANIM,\n  FLOOR_TOWER,\n  FLOOR,\n  FLOOR_DRAGON,\n  FLOORa, FLOORb, FLOORc, FLOORd,\n  LIZEYE,\n  BFLOOR,\n  GFLOORa, GFLOORb, GFLOORc,\n  WALLSHADOW,\n  STRUCT0, STRUCT1, STRUCT2, STRUCT3,\n  THORNS, WALL,\n  REDWALLm, REDWALLs, REDWALLp, REDWALL,\n  REDWALLm2, REDWALLs2, REDWALLp2, REDWALLt2,\n  REDWALLm3, REDWALLs3, REDWALLp3, REDWALLt3,\n  HEPTAMARK,\n  ITEM_BELOW,\n  ITEM, ITEMa, ITEMb,\n  BIGSTATUE,\n\n  WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n\n// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,\n  HIDDEN, GIANTSHADOW,\n  TENTACLE0, TENTACLE1,\n  ONTENTACLE, ONTENTACLE_EYES, ONTENTACLE_EYES2,\n  MONSTER_SHADOW,\n  MONSTER_FOOT, MONSTER_LEG, MONSTER_GROIN,\n  MONSTER_SUBWPN, MONSTER_WPN,\n  MONSTER_BODY, MONSTER_ARMOR0, MONSTER_ARMOR1,\n  MONSTER_CLOAK, MONSTER_NECK,\n  MONSTER_HEAD, MONSTER_FACE, MONSTER_EYE0, MONSTER_EYE1,\n  MONSTER_HAIR, MONSTER_HAT0, MONSTER_HAT1,\n  MONSTER_HOODCLOAK1, MONSTER_HOODCLOAK2,\n  STUNSTARS,\n  CARRIED, CARRIEDa, CARRIEDb,\n  PARTICLE, SWORDMARK, MAGICSWORD, MISSILE, SKY,\n  MINEMARK, ARROW,\n  MOBILE_ARROW,\n  LINE,\n  // in depth tested models transparent surfaces need to be depth sorted by HyperRogue\n  // and set to PPR::TRANSPARENT_* to draw them after all the opaque ones\n  TRANSPARENT_LAKE, TRANSPARENT_SHADOW, TRANSPARENT_WALL,\n  // no depth testing for SUPERLINE and above\n  SUPERLINE, TEXT, CIRCLE,\n  MAX,\n  DEFAULT = -1\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ZERO",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ZERO",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "EUCLIDEAN_SKY",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "EUCLIDEAN_SKY",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "OUTCIRCLE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "OUTCIRCLE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MOVESTAR",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MOVESTAR",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MINUSINF",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MINUSINF",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BELOWBOTTOMm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BELOWBOTTOMm",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BELOWBOTTOM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BELOWBOTTOM",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BELOWBOTTOMp",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BELOWBOTTOMp",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BELOWBOTTOM_FALLANIM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BELOWBOTTOM_FALLANIM",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LAKEBOTTOM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LAKEBOTTOM",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "HELLSPIKE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "HELLSPIKE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "INLAKEWALLm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "INLAKEWALLm",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "INLAKEWALL",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "INLAKEWALL",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "INLAKEWALLp",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "INLAKEWALLp",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "INLAKEWALL_FALLANIM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "INLAKEWALL_FALLANIM",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BSHALLOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BSHALLOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "SHALLOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "SHALLOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ASHALLOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ASHALLOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "SUBLAKELEV",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "SUBLAKELEV",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LAKELEV",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LAKELEV",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BOATLEV",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BOATLEV",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BOATLEV2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BOATLEV2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BOATLEV3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BOATLEV3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LAKEWALLm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LAKEWALLm",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LAKEWALL",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LAKEWALL",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LAKEWALLp",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LAKEWALLp",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LAKEWALL_FALLANIM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LAKEWALL_FALLANIM",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOOR_TOWER",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOOR_TOWER",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOOR",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOOR",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOOR_DRAGON",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOOR_DRAGON",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOORa",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOORa",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOORb",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOORb",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOORc",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOORc",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "FLOORd",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "FLOORd",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LIZEYE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LIZEYE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BFLOOR",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BFLOOR",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "GFLOORa",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "GFLOORa",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "GFLOORb",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "GFLOORb",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "GFLOORc",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "GFLOORc",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALLSHADOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALLSHADOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "STRUCT0",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "STRUCT0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "STRUCT1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "STRUCT1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "STRUCT2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "STRUCT2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "STRUCT3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "STRUCT3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "THORNS",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "THORNS",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALL",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALL",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLm",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLs",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLp",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLp",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALL",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALL",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLm2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLm2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLs2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLs2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLp2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLp2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLt2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLt2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLm3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLm3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLs3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLs3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLp3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLp3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "REDWALLt3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "REDWALLt3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "HEPTAMARK",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "HEPTAMARK",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ITEM_BELOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ITEM_BELOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ITEM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ITEM",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ITEMa",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ITEMa",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ITEMb",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ITEMb",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "BIGSTATUE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "BIGSTATUE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALL3m",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALL3m",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALL3s",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALL3s",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALL3p",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALL3p",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALL3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALL3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "WALL3A",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "WALL3A",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "comment",
                          "text": "// WALL3m, WALL3s, WALL3p, WALL3, WALL3A,",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "HIDDEN",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "HIDDEN",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "GIANTSHADOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "GIANTSHADOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "TENTACLE0",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TENTACLE0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "TENTACLE1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TENTACLE1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ONTENTACLE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ONTENTACLE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ONTENTACLE_EYES",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ONTENTACLE_EYES",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ONTENTACLE_EYES2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ONTENTACLE_EYES2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_SHADOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_SHADOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_FOOT",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_FOOT",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_LEG",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_LEG",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_GROIN",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_GROIN",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_SUBWPN",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_SUBWPN",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_WPN",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_WPN",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_BODY",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_BODY",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_ARMOR0",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_ARMOR0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_ARMOR1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_ARMOR1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_CLOAK",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_CLOAK",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_NECK",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_NECK",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_HEAD",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_HEAD",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_FACE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_FACE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_EYE0",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_EYE0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_EYE1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_EYE1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_HAIR",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_HAIR",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_HAT0",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_HAT0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_HAT1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_HAT1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_HOODCLOAK1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_HOODCLOAK1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MONSTER_HOODCLOAK2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MONSTER_HOODCLOAK2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "STUNSTARS",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "STUNSTARS",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "CARRIED",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "CARRIED",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "CARRIEDa",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "CARRIEDa",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "CARRIEDb",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "CARRIEDb",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "PARTICLE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "PARTICLE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "SWORDMARK",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "SWORDMARK",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MAGICSWORD",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MAGICSWORD",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MISSILE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MISSILE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "SKY",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "SKY",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MINEMARK",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MINEMARK",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "ARROW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "ARROW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MOBILE_ARROW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MOBILE_ARROW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "LINE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "LINE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "comment",
                          "text": "// in depth tested models transparent surfaces need to be depth sorted by HyperRogue",
                          "children": []
                        },
                        {
                          "type": "comment",
                          "text": "// and set to PPR::TRANSPARENT_* to draw them after all the opaque ones",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "TRANSPARENT_LAKE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TRANSPARENT_LAKE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "TRANSPARENT_SHADOW",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TRANSPARENT_SHADOW",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "TRANSPARENT_WALL",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TRANSPARENT_WALL",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "comment",
                          "text": "// no depth testing for SUPERLINE and above",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "SUPERLINE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "SUPERLINE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "TEXT",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TEXT",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "CIRCLE",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "CIRCLE",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "MAX",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "MAX",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "DEFAULT = -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "DEFAULT",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "text": "-1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "function_definition",
                  "text": "inline PPR operator + (PPR x, int y) { return PPR(int(x) + y); }",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "inline",
                      "children": [
                        {
                          "type": "inline",
                          "text": "inline",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "PPR",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "operator + (PPR x, int y)",
                      "children": [
                        {
                          "type": "operator_name",
                          "text": "operator +",
                          "children": [
                            {
                              "type": "operator",
                              "text": "operator",
                              "children": []
                            },
                            {
                              "type": "+",
                              "text": "+",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "parameter_list",
                          "text": "(PPR x, int y)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "PPR x",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "PPR",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "int y",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "compound_statement",
                      "text": "{ return PPR(int(x) + y); }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "return_statement",
                          "text": "return PPR(int(x) + y);",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call_expression",
                              "text": "PPR(int(x) + y)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "PPR",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(int(x) + y)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "text": "int(x) + y",
                                      "children": [
                                        {
                                          "type": "call_expression",
                                          "text": "int(x)",
                                          "children": [
                                            {
                                              "type": "primitive_type",
                                              "text": "int",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "inline PPR operator - (PPR x, int y) { return PPR(int(x) - y); }",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "inline",
                      "children": [
                        {
                          "type": "inline",
                          "text": "inline",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "PPR",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "operator - (PPR x, int y)",
                      "children": [
                        {
                          "type": "operator_name",
                          "text": "operator -",
                          "children": [
                            {
                              "type": "operator",
                              "text": "operator",
                              "children": []
                            },
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "parameter_list",
                          "text": "(PPR x, int y)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "PPR x",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "PPR",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "int y",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "compound_statement",
                      "text": "{ return PPR(int(x) - y); }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "return_statement",
                          "text": "return PPR(int(x) - y);",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call_expression",
                              "text": "PPR(int(x) - y)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "PPR",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(int(x) - y)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "text": "int(x) - y",
                                      "children": [
                                        {
                                          "type": "call_expression",
                                          "text": "int(x)",
                                          "children": [
                                            {
                                              "type": "primitive_type",
                                              "text": "int",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "inline int operator - (PPR x, PPR y) { return int(x) - int(y); }",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "inline",
                      "children": [
                        {
                          "type": "inline",
                          "text": "inline",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "operator - (PPR x, PPR y)",
                      "children": [
                        {
                          "type": "operator_name",
                          "text": "operator -",
                          "children": [
                            {
                              "type": "operator",
                              "text": "operator",
                              "children": []
                            },
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "parameter_list",
                          "text": "(PPR x, PPR y)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "PPR x",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "PPR",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "PPR y",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "PPR",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "compound_statement",
                      "text": "{ return int(x) - int(y); }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "return_statement",
                          "text": "return int(x) - int(y);",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "text": "int(x) - int(y)",
                              "children": [
                                {
                                  "type": "call_expression",
                                  "text": "int(x)",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "call_expression",
                                  "text": "int(y)",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(y)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_NONE     0x000000FF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_NONE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "     0x000000FF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_FRIEND   0x00FF00FF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_FRIEND",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "   0x00FF00FF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_ENEMY    0xFF0000FF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_ENEMY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "    0xFF0000FF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_TREASURE 0xFFFF00FF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_TREASURE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0xFFFF00FF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_ORB      0xFF8000FF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_ORB",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "      0xFF8000FF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_OTHER    0xFFFFFFFF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_OTHER",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "    0xFFFFFFFF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_DEAD     0x800000FF\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_DEAD",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "     0x800000FF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_TRANS    0\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_TRANS",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "    0",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_DEFAULT  ((bordcolor << 8) + 0xFF)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_DEFAULT",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "  ((bordcolor << 8) + 0xFF)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_FORE     ((forecolor << 8) + 0xFF)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_FORE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "     ((forecolor << 8) + 0xFF)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define OUTLINE_BACK     ((backcolor << 8) + 0xFF)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "OUTLINE_BACK",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": "     ((backcolor << 8) + 0xFF)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "enum_specifier",
                  "text": "enum orbAction { roMouse, roKeyboard, roCheck, roMouseForce, roMultiCheck, roMultiGo }",
                  "children": [
                    {
                      "type": "enum",
                      "text": "enum",
                      "children": []
                    },
                    {
                      "type": "type_identifier",
                      "text": "orbAction",
                      "children": []
                    },
                    {
                      "type": "enumerator_list",
                      "text": "{ roMouse, roKeyboard, roCheck, roMouseForce, roMultiCheck, roMultiGo }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "roMouse",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "roMouse",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "roKeyboard",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "roKeyboard",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "roCheck",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "roCheck",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "roMouseForce",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "roMouseForce",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "roMultiCheck",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "roMultiCheck",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "enumerator",
                          "text": "roMultiGo",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "roMultiGo",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "text": ";",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define MODELCOUNT ((int) mdGUARD)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MODELCOUNT",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " ((int) mdGUARD)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define pconf vid.projection_config\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "pconf",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " vid.projection_config",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if CAP_RUG\n#define vpconf (rug::rugged ? vid.rug_config : vid.projection_config)\n#else\n#define vpconf pconf\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "CAP_RUG",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define vpconf (rug::rugged ? vid.rug_config : vid.projection_config)\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "vpconf",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " (rug::rugged ? vid.rug_config : vid.projection_config)",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_else",
                      "text": "#else\n#define vpconf pconf\n",
                      "children": [
                        {
                          "type": "#else",
                          "text": "#else",
                          "children": []
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define vpconf pconf\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "vpconf",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " pconf",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define pmodel (pconf.model)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "pmodel",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (pconf.model)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "static const int DISTANCE_UNKNOWN = 127;",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "static",
                      "children": [
                        {
                          "type": "static",
                          "text": "static",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_qualifier",
                      "text": "const",
                      "children": [
                        {
                          "type": "const",
                          "text": "const",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "init_declarator",
                      "text": "DISTANCE_UNKNOWN = 127",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "DISTANCE_UNKNOWN",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "text": "127",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T, class U> int addHook(hookset<T>& m, int prio, U&& hook) {\n  return m.add(prio, static_cast<U&&>(hook));\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T, class U>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class U",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "U",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "int addHook(hookset<T>& m, int prio, U&& hook) {\n  return m.add(prio, static_cast<U&&>(hook));\n  }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "addHook(hookset<T>& m, int prio, U&& hook)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "addHook",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(hookset<T>& m, int prio, U&& hook)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "hookset<T>& m",
                                  "children": [
                                    {
                                      "type": "template_type",
                                      "text": "hookset<T>",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "hookset",
                                          "children": []
                                        },
                                        {
                                          "type": "template_argument_list",
                                          "text": "<T>",
                                          "children": [
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "T",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ">",
                                              "text": ">",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& m",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "m",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "int prio",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "prio",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "U&& hook",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "U",
                                      "children": []
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "&& hook",
                                      "children": [
                                        {
                                          "type": "&&",
                                          "text": "&&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "hook",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  return m.add(prio, static_cast<U&&>(hook));\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "text": "return m.add(prio, static_cast<U&&>(hook));",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call_expression",
                                  "text": "m.add(prio, static_cast<U&&>(hook))",
                                  "children": [
                                    {
                                      "type": "field_expression",
                                      "text": "m.add",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "m",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "add",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(prio, static_cast<U&&>(hook))",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "prio",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "call_expression",
                                          "text": "static_cast<U&&>(hook)",
                                          "children": [
                                            {
                                              "type": "template_function",
                                              "text": "static_cast<U&&>",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "static_cast",
                                                  "children": []
                                                },
                                                {
                                                  "type": "template_argument_list",
                                                  "text": "<U&&>",
                                                  "children": [
                                                    {
                                                      "type": "<",
                                                      "text": "<",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "type_descriptor",
                                                      "text": "U&&",
                                                      "children": [
                                                        {
                                                          "type": "type_identifier",
                                                          "text": "U",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "abstract_reference_declarator",
                                                          "text": "&&",
                                                          "children": [
                                                            {
                                                              "type": "&&",
                                                              "text": "&&",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ">",
                                                      "text": ">",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(hook)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "hook",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> void delHook(hookset<T>& m, int prio) {\n  m.del(prio);\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "void delHook(hookset<T>& m, int prio) {\n  m.del(prio);\n  }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "void",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "delHook(hookset<T>& m, int prio)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "delHook",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(hookset<T>& m, int prio)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "hookset<T>& m",
                                  "children": [
                                    {
                                      "type": "template_type",
                                      "text": "hookset<T>",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "hookset",
                                          "children": []
                                        },
                                        {
                                          "type": "template_argument_list",
                                          "text": "<T>",
                                          "children": [
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "T",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ">",
                                              "text": ">",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& m",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "m",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "int prio",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "prio",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  m.del(prio);\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "text": "m.del(prio);",
                              "children": [
                                {
                                  "type": "call_expression",
                                  "text": "m.del(prio)",
                                  "children": [
                                    {
                                      "type": "field_expression",
                                      "text": "m.del",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "m",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "del",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(prio)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "prio",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T, class... U> void callhooks(const hookset<T>& h, U&&... args) {\n  return h.callhooks(static_cast<U&&>(args)...);\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T, class... U>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "variadic_type_parameter_declaration",
                          "text": "class... U",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "...",
                              "text": "...",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "U",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "void callhooks(const hookset<T>& h, U&&... args) {\n  return h.callhooks(static_cast<U&&>(args)...);\n  }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "void",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "callhooks(const hookset<T>& h, U&&... args)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "callhooks",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(const hookset<T>& h, U&&... args)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const hookset<T>& h",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "template_type",
                                      "text": "hookset<T>",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "hookset",
                                          "children": []
                                        },
                                        {
                                          "type": "template_argument_list",
                                          "text": "<T>",
                                          "children": [
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "T",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ">",
                                              "text": ">",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& h",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "h",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "variadic_parameter_declaration",
                                  "text": "U&&... args",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "U",
                                      "children": []
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "&&... args",
                                      "children": [
                                        {
                                          "type": "&&",
                                          "text": "&&",
                                          "children": []
                                        },
                                        {
                                          "type": "variadic_declarator",
                                          "text": "... args",
                                          "children": [
                                            {
                                              "type": "...",
                                              "text": "...",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "args",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  return h.callhooks(static_cast<U&&>(args)...);\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "text": "return h.callhooks(static_cast<U&&>(args)...);",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call_expression",
                                  "text": "h.callhooks(static_cast<U&&>(args)...)",
                                  "children": [
                                    {
                                      "type": "field_expression",
                                      "text": "h.callhooks",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "h",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "callhooks",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(static_cast<U&&>(args)...)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_pack_expansion",
                                          "text": "static_cast<U&&>(args)...",
                                          "children": [
                                            {
                                              "type": "call_expression",
                                              "text": "static_cast<U&&>(args)",
                                              "children": [
                                                {
                                                  "type": "template_function",
                                                  "text": "static_cast<U&&>",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "static_cast",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "template_argument_list",
                                                      "text": "<U&&>",
                                                      "children": [
                                                        {
                                                          "type": "<",
                                                          "text": "<",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "type_descriptor",
                                                          "text": "U&&",
                                                          "children": [
                                                            {
                                                              "type": "type_identifier",
                                                              "text": "U",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "abstract_reference_declarator",
                                                              "text": "&&",
                                                              "children": [
                                                                {
                                                                  "type": "&&",
                                                                  "text": "&&",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ">",
                                                          "text": ">",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(args)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "args",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "...",
                                              "text": "...",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T, class V, class... U> V callhandlers(V zero, const hookset<T>& h, U&&... args) {\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T, class V, class... U>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class V",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "V",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "variadic_type_parameter_declaration",
                          "text": "class... U",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "...",
                              "text": "...",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "U",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "V callhandlers(V zero, const hookset<T>& h, U&&... args) {\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "V",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "callhandlers(V zero, const hookset<T>& h, U&&... args)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "callhandlers",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(V zero, const hookset<T>& h, U&&... args)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "V zero",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "V",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "zero",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const hookset<T>& h",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "template_type",
                                      "text": "hookset<T>",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "hookset",
                                          "children": []
                                        },
                                        {
                                          "type": "template_argument_list",
                                          "text": "<T>",
                                          "children": [
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "T",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ">",
                                              "text": ">",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& h",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "h",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "variadic_parameter_declaration",
                                  "text": "U&&... args",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "U",
                                      "children": []
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "&&... args",
                                      "children": [
                                        {
                                          "type": "&&",
                                          "text": "&&",
                                          "children": []
                                        },
                                        {
                                          "type": "variadic_declarator",
                                          "text": "... args",
                                          "children": [
                                            {
                                              "type": "...",
                                              "text": "...",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "args",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  return h.callhandlers(zero, static_cast<U&&>(args)...);\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "text": "return h.callhandlers(zero, static_cast<U&&>(args)...);",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call_expression",
                                  "text": "h.callhandlers(zero, static_cast<U&&>(args)...)",
                                  "children": [
                                    {
                                      "type": "field_expression",
                                      "text": "h.callhandlers",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "h",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "callhandlers",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(zero, static_cast<U&&>(args)...)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "zero",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_pack_expansion",
                                          "text": "static_cast<U&&>(args)...",
                                          "children": [
                                            {
                                              "type": "call_expression",
                                              "text": "static_cast<U&&>(args)",
                                              "children": [
                                                {
                                                  "type": "template_function",
                                                  "text": "static_cast<U&&>",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "static_cast",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "template_argument_list",
                                                      "text": "<U&&>",
                                                      "children": [
                                                        {
                                                          "type": "<",
                                                          "text": "<",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "type_descriptor",
                                                          "text": "U&&",
                                                          "children": [
                                                            {
                                                              "type": "type_identifier",
                                                              "text": "U",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "abstract_reference_declarator",
                                                              "text": "&&",
                                                              "children": [
                                                                {
                                                                  "type": "&&",
                                                                  "text": "&&",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ">",
                                                          "text": ">",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(args)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "args",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "...",
                                              "text": "...",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "string XLAT(string);",
                  "children": [
                    {
                      "type": "type_identifier",
                      "text": "string",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "XLAT(string)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "XLAT",
                          "children": []
                        },
                        {
                          "type": "parameter_list",
                          "text": "(string)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "string",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define GLERR(call) glError(call, __FILE__, __LINE__)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GLERR",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(call)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "call",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " glError(call, __FILE__, __LINE__)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define SHMUPTITLE \"shoot'em up mode\"\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "SHMUPTITLE",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " \"shoot'em up mode\"",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// check for a plain number key",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define NUMBERKEY (interpret_as_direction(sym, uni) ? 0 : uni)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "NUMBERKEY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (interpret_as_direction(sym, uni) ? 0 : uni)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define DKEY (get_direction_key(sym, uni))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "DKEY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (get_direction_key(sym, uni))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define DIRECTIONKEY (interpret_as_direction(sym, uni) ? uni : 0)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "DIRECTIONKEY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (interpret_as_direction(sym, uni) ? uni : 0)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "namespace_definition",
                  "text": "namespace scores { void load(); }",
                  "children": [
                    {
                      "type": "namespace",
                      "text": "namespace",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "scores",
                      "children": []
                    },
                    {
                      "type": "declaration_list",
                      "text": "{ void load(); }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "declaration",
                          "text": "void load();",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "load()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "load",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if ISMOBILE\nnamespace leader { void showMenu(); void handleKey(int sym, int uni); }\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "ISMOBILE",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "namespace_definition",
                      "text": "namespace leader { void showMenu(); void handleKey(int sym, int uni); }",
                      "children": [
                        {
                          "type": "namespace",
                          "text": "namespace",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "leader",
                          "children": []
                        },
                        {
                          "type": "declaration_list",
                          "text": "{ void showMenu(); void handleKey(int sym, int uni); }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "declaration",
                              "text": "void showMenu();",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "void",
                                  "children": []
                                },
                                {
                                  "type": "function_declarator",
                                  "text": "showMenu()",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "showMenu",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "declaration",
                              "text": "void handleKey(int sym, int uni);",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "void",
                                  "children": []
                                },
                                {
                                  "type": "function_declarator",
                                  "text": "handleKey(int sym, int uni)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "handleKey",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_list",
                                      "text": "(int sym, int uni)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "int sym",
                                          "children": [
                                            {
                                              "type": "primitive_type",
                                              "text": "int",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "sym",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "parameter_declaration",
                                          "text": "int uni",
                                          "children": [
                                            {
                                              "type": "primitive_type",
                                              "text": "int",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "uni",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "int textwidth(int siz, const string &str);",
                  "children": [
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "textwidth(int siz, const string &str)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "textwidth",
                          "children": []
                        },
                        {
                          "type": "parameter_list",
                          "text": "(int siz, const string &str)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "int siz",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "siz",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "const string &str",
                              "children": [
                                {
                                  "type": "type_qualifier",
                                  "text": "const",
                                  "children": [
                                    {
                                      "type": "const",
                                      "text": "const",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "type_identifier",
                                  "text": "string",
                                  "children": []
                                },
                                {
                                  "type": "reference_declarator",
                                  "text": "&str",
                                  "children": [
                                    {
                                      "type": "&",
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if CAP_GL\nint gl_width(int size, const char *s);\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "CAP_GL",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "declaration",
                      "text": "int gl_width(int size, const char *s);",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "gl_width(int size, const char *s)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "gl_width",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(int size, const char *s)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "int size",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "size",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const char *s",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "primitive_type",
                                      "text": "char",
                                      "children": []
                                    },
                                    {
                                      "type": "pointer_declarator",
                                      "text": "*s",
                                      "children": [
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "s",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if ISMOBILE\nextern int andmode;\nextern bool longclick;\nextern bool useRangedOrb;\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "ISMOBILE",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "declaration",
                      "text": "extern int andmode;",
                      "children": [
                        {
                          "type": "storage_class_specifier",
                          "text": "extern",
                          "children": [
                            {
                              "type": "extern",
                              "text": "extern",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "primitive_type",
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "andmode",
                          "children": []
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "declaration",
                      "text": "extern bool longclick;",
                      "children": [
                        {
                          "type": "storage_class_specifier",
                          "text": "extern",
                          "children": [
                            {
                              "type": "extern",
                              "text": "extern",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "primitive_type",
                          "text": "bool",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "longclick",
                          "children": []
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "declaration",
                      "text": "extern bool useRangedOrb;",
                      "children": [
                        {
                          "type": "storage_class_specifier",
                          "text": "extern",
                          "children": [
                            {
                              "type": "extern",
                              "text": "extern",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "primitive_type",
                          "text": "bool",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "useRangedOrb",
                          "children": []
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_ifdef",
                  "text": "#ifndef GL\ntypedef float GLfloat;\n#endif",
                  "children": [
                    {
                      "type": "#ifndef",
                      "text": "#ifndef",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GL",
                      "children": []
                    },
                    {
                      "type": "type_definition",
                      "text": "typedef float GLfloat;",
                      "children": [
                        {
                          "type": "typedef",
                          "text": "typedef",
                          "children": []
                        },
                        {
                          "type": "primitive_type",
                          "text": "float",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "GLfloat",
                          "children": []
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef array<GLfloat, 2> glvec2;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "array<GLfloat, 2>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "array",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<GLfloat, 2>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "GLfloat",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "GLfloat",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "text": "2",
                              "children": []
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "glvec2",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef array<GLfloat, 3> glvec3;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "array<GLfloat, 3>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "array",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<GLfloat, 3>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "GLfloat",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "GLfloat",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "text": "3",
                              "children": []
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "glvec3",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef array<GLfloat, 4> glvec4;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "template_type",
                      "text": "array<GLfloat, 4>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "array",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<GLfloat, 4>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "GLfloat",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "GLfloat",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "text": "4",
                              "children": []
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "glvec4",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_if",
                  "text": "#if MAXMDIM == 4\n#define SHDIM 4\ntypedef glvec4 glvertex;\n#else\n#define SHDIM 3\ntypedef glvec3 glvertex;\n#endif",
                  "children": [
                    {
                      "type": "#if",
                      "text": "#if",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "text": "MAXMDIM == 4",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "MAXMDIM",
                          "children": []
                        },
                        {
                          "type": "==",
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "text": "4",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    },
                    {
                      "type": "preproc_def",
                      "text": "#define SHDIM 4\n",
                      "children": [
                        {
                          "type": "#define",
                          "text": "#define",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "SHDIM",
                          "children": []
                        },
                        {
                          "type": "preproc_arg",
                          "text": " 4",
                          "children": []
                        },
                        {
                          "type": "\n",
                          "text": "\n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_definition",
                      "text": "typedef glvec4 glvertex;",
                      "children": [
                        {
                          "type": "typedef",
                          "text": "typedef",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "glvec4",
                          "children": []
                        },
                        {
                          "type": "type_identifier",
                          "text": "glvertex",
                          "children": []
                        },
                        {
                          "type": ";",
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_else",
                      "text": "#else\n#define SHDIM 3\ntypedef glvec3 glvertex;",
                      "children": [
                        {
                          "type": "#else",
                          "text": "#else",
                          "children": []
                        },
                        {
                          "type": "preproc_def",
                          "text": "#define SHDIM 3\n",
                          "children": [
                            {
                              "type": "#define",
                              "text": "#define",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "SHDIM",
                              "children": []
                            },
                            {
                              "type": "preproc_arg",
                              "text": " 3",
                              "children": []
                            },
                            {
                              "type": "\n",
                              "text": "\n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "type_definition",
                          "text": "typedef glvec3 glvertex;",
                          "children": [
                            {
                              "type": "typedef",
                              "text": "typedef",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "glvec3",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "glvertex",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "#endif",
                      "text": "#endif",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "extern int emeraldtable[100][7];",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "extern",
                      "children": [
                        {
                          "type": "extern",
                          "text": "extern",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "array_declarator",
                      "text": "emeraldtable[100][7]",
                      "children": [
                        {
                          "type": "array_declarator",
                          "text": "emeraldtable[100]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "emeraldtable",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "text": "100",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "text": "7",
                          "children": []
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// extern cell *cwpeek(cellwalker cw, int dir);",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define HAUNTED_RADIUS getDistLimit()\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "HAUNTED_RADIUS",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " getDistLimit()",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define UNKNOWN 65535\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "UNKNOWN",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 65535",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GRAIL_FOUND 0x4000\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GRAIL_FOUND",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0x4000",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define GRAIL_RADIUS_MASK 0x3FFF\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "GRAIL_RADIUS_MASK",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 0x3FFF",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "extern vector<cell*> dcal;",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "extern",
                      "children": [
                        {
                          "type": "extern",
                          "text": "extern",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "template_type",
                      "text": "vector<cell*>",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "vector",
                          "children": []
                        },
                        {
                          "type": "template_argument_list",
                          "text": "<cell*>",
                          "children": [
                            {
                              "type": "<",
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "type_descriptor",
                              "text": "cell*",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "cell",
                                  "children": []
                                },
                                {
                                  "type": "abstract_pointer_declarator",
                                  "text": "*",
                                  "children": [
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "identifier",
                      "text": "dcal",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// z to close to this limit => do not draw",
                  "children": []
                },
                {
                  "type": "preproc_def",
                  "text": "#define BEHIND_LIMIT 1e-6\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "BEHIND_LIMIT",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " 1e-6",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T, class U> void eliminate_if(vector<T>& data, U pred) {\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T, class U>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class U",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "U",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "void eliminate_if(vector<T>& data, U pred) {\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "void",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "eliminate_if(vector<T>& data, U pred)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "eliminate_if",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(vector<T>& data, U pred)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "vector<T>& data",
                                  "children": [
                                    {
                                      "type": "template_type",
                                      "text": "vector<T>",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "vector",
                                          "children": []
                                        },
                                        {
                                          "type": "template_argument_list",
                                          "text": "<T>",
                                          "children": [
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "type_descriptor",
                                              "text": "T",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "text": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ">",
                                              "text": ">",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& data",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "U pred",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "U",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pred",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "for_statement",
                              "text": "for(int i=0; i<isize(data); i++)\n    if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;",
                              "children": [
                                {
                                  "type": "for",
                                  "text": "for",
                                  "children": []
                                },
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "declaration",
                                  "text": "int i=0;",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "init_declarator",
                                      "text": "i=0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "i",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "binary_expression",
                                  "text": "i<isize(data)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "call_expression",
                                      "text": "isize(data)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "isize",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(data)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "data",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                },
                                {
                                  "type": "update_expression",
                                  "text": "i++",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "++",
                                      "text": "++",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                },
                                {
                                  "type": "if_statement",
                                  "text": "if(pred(data[i]))\n      data[i] = data.back(), data.pop_back(), i--;",
                                  "children": [
                                    {
                                      "type": "if",
                                      "text": "if",
                                      "children": []
                                    },
                                    {
                                      "type": "condition_clause",
                                      "text": "(pred(data[i]))",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "call_expression",
                                          "text": "pred(data[i])",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "pred",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(data[i])",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "subscript_expression",
                                                  "text": "data[i]",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "data",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "[",
                                                      "text": "[",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "i",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "]",
                                                      "text": "]",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "data[i] = data.back(), data.pop_back(), i--;",
                                      "children": [
                                        {
                                          "type": "comma_expression",
                                          "text": "data[i] = data.back(), data.pop_back(), i--",
                                          "children": [
                                            {
                                              "type": "assignment_expression",
                                              "text": "data[i] = data.back()",
                                              "children": [
                                                {
                                                  "type": "subscript_expression",
                                                  "text": "data[i]",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "data",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "[",
                                                      "text": "[",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "i",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "]",
                                                      "text": "]",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "call_expression",
                                                  "text": "data.back()",
                                                  "children": [
                                                    {
                                                      "type": "field_expression",
                                                      "text": "data.back",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "data",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "field_identifier",
                                                          "text": "back",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "()",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "comma_expression",
                                              "text": "data.pop_back(), i--",
                                              "children": [
                                                {
                                                  "type": "call_expression",
                                                  "text": "data.pop_back()",
                                                  "children": [
                                                    {
                                                      "type": "field_expression",
                                                      "text": "data.pop_back",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "data",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "field_identifier",
                                                          "text": "pop_back",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "()",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "update_expression",
                                                  "text": "i--",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "i",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "--",
                                                      "text": "--",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> array<T, 4> make_array(T a, T b, T c, T d) { array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "array<T, 4> make_array(T a, T b, T c, T d) { array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }",
                      "children": [
                        {
                          "type": "template_type",
                          "text": "array<T, 4>",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "array",
                              "children": []
                            },
                            {
                              "type": "template_argument_list",
                              "text": "<T, 4>",
                              "children": [
                                {
                                  "type": "<",
                                  "text": "<",
                                  "children": []
                                },
                                {
                                  "type": "type_descriptor",
                                  "text": "T",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "text": "4",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "text": ">",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "function_declarator",
                          "text": "make_array(T a, T b, T c, T d)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "make_array",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(T a, T b, T c, T d)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T a",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T b",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T c",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "c",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T d",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "d",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{ array<T,4> x; x[0] = a; x[1] = b; x[2] = c; x[3] = d; return x; }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "declaration",
                              "text": "array<T,4> x;",
                              "children": [
                                {
                                  "type": "template_type",
                                  "text": "array<T,4>",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "array",
                                      "children": []
                                    },
                                    {
                                      "type": "template_argument_list",
                                      "text": "<T,4>",
                                      "children": [
                                        {
                                          "type": "<",
                                          "text": "<",
                                          "children": []
                                        },
                                        {
                                          "type": "type_descriptor",
                                          "text": "T",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "T",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "4",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "text": ">",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[0] = a;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[0] = a",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[0]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[1] = b;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[1] = b",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[1]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[2] = c;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[2] = c",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[2]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "c",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[3] = d;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[3] = d",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[3]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "3",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "d",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return x;",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> array<T, 3> make_array(T a, T b, T c) { array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "array<T, 3> make_array(T a, T b, T c) { array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }",
                      "children": [
                        {
                          "type": "template_type",
                          "text": "array<T, 3>",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "array",
                              "children": []
                            },
                            {
                              "type": "template_argument_list",
                              "text": "<T, 3>",
                              "children": [
                                {
                                  "type": "<",
                                  "text": "<",
                                  "children": []
                                },
                                {
                                  "type": "type_descriptor",
                                  "text": "T",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "text": "3",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "text": ">",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "function_declarator",
                          "text": "make_array(T a, T b, T c)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "make_array",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(T a, T b, T c)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T a",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T b",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T c",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "c",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{ array<T,3> x; x[0] = a; x[1] = b; x[2] = c; return x; }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "declaration",
                              "text": "array<T,3> x;",
                              "children": [
                                {
                                  "type": "template_type",
                                  "text": "array<T,3>",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "array",
                                      "children": []
                                    },
                                    {
                                      "type": "template_argument_list",
                                      "text": "<T,3>",
                                      "children": [
                                        {
                                          "type": "<",
                                          "text": "<",
                                          "children": []
                                        },
                                        {
                                          "type": "type_descriptor",
                                          "text": "T",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "T",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "3",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "text": ">",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[0] = a;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[0] = a",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[0]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[1] = b;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[1] = b",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[1]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[2] = c;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[2] = c",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[2]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "c",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return x;",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> array<T, 2> make_array(T a, T b) { array<T,2> x; x[0] = a; x[1] = b; return x; }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "array<T, 2> make_array(T a, T b) { array<T,2> x; x[0] = a; x[1] = b; return x; }",
                      "children": [
                        {
                          "type": "template_type",
                          "text": "array<T, 2>",
                          "children": [
                            {
                              "type": "type_identifier",
                              "text": "array",
                              "children": []
                            },
                            {
                              "type": "template_argument_list",
                              "text": "<T, 2>",
                              "children": [
                                {
                                  "type": "<",
                                  "text": "<",
                                  "children": []
                                },
                                {
                                  "type": "type_descriptor",
                                  "text": "T",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "text": "2",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "text": ">",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "function_declarator",
                          "text": "make_array(T a, T b)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "make_array",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(T a, T b)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T a",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "T b",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{ array<T,2> x; x[0] = a; x[1] = b; return x; }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "declaration",
                              "text": "array<T,2> x;",
                              "children": [
                                {
                                  "type": "template_type",
                                  "text": "array<T,2>",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "array",
                                      "children": []
                                    },
                                    {
                                      "type": "template_argument_list",
                                      "text": "<T,2>",
                                      "children": [
                                        {
                                          "type": "<",
                                          "text": "<",
                                          "children": []
                                        },
                                        {
                                          "type": "type_descriptor",
                                          "text": "T",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "T",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "text": ">",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[0] = a;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[0] = a",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[0]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "x[1] = b;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "x[1] = b",
                                  "children": [
                                    {
                                      "type": "subscript_expression",
                                      "text": "x[1]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return x;",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "// Find in a std::map or std::unordered_map, or return null.",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class Map, class Key>\nconst typename Map::mapped_type *at_or_null(const Map& map, const Key& key) {\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class Map, class Key>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class Map",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "Map",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class Key",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "Key",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "const typename Map::mapped_type *at_or_null(const Map& map, const Key& key) {\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }",
                      "children": [
                        {
                          "type": "type_qualifier",
                          "text": "const",
                          "children": [
                            {
                              "type": "const",
                              "text": "const",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "dependent_type",
                          "text": "typename Map::mapped_type",
                          "children": [
                            {
                              "type": "typename",
                              "text": "typename",
                              "children": []
                            },
                            {
                              "type": "qualified_identifier",
                              "text": "Map::mapped_type",
                              "children": [
                                {
                                  "type": "namespace_identifier",
                                  "text": "Map",
                                  "children": []
                                },
                                {
                                  "type": "::",
                                  "text": "::",
                                  "children": []
                                },
                                {
                                  "type": "type_identifier",
                                  "text": "mapped_type",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "pointer_declarator",
                          "text": "*at_or_null(const Map& map, const Key& key)",
                          "children": [
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "at_or_null(const Map& map, const Key& key)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "at_or_null",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(const Map& map, const Key& key)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "const Map& map",
                                      "children": [
                                        {
                                          "type": "type_qualifier",
                                          "text": "const",
                                          "children": [
                                            {
                                              "type": "const",
                                              "text": "const",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "type_identifier",
                                          "text": "Map",
                                          "children": []
                                        },
                                        {
                                          "type": "reference_declarator",
                                          "text": "& map",
                                          "children": [
                                            {
                                              "type": "&",
                                              "text": "&",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "map",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "const Key& key",
                                      "children": [
                                        {
                                          "type": "type_qualifier",
                                          "text": "const",
                                          "children": [
                                            {
                                              "type": "const",
                                              "text": "const",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "type_identifier",
                                          "text": "Key",
                                          "children": []
                                        },
                                        {
                                          "type": "reference_declarator",
                                          "text": "& key",
                                          "children": [
                                            {
                                              "type": "&",
                                              "text": "&",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  auto it = map.find(key);\n  return (it == map.end()) ? nullptr : &it->second;\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "declaration",
                              "text": "auto it = map.find(key);",
                              "children": [
                                {
                                  "type": "auto",
                                  "text": "auto",
                                  "children": []
                                },
                                {
                                  "type": "init_declarator",
                                  "text": "it = map.find(key)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "it",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "call_expression",
                                      "text": "map.find(key)",
                                      "children": [
                                        {
                                          "type": "field_expression",
                                          "text": "map.find",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "map",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "field_identifier",
                                              "text": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(key)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "key",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return (it == map.end()) ? nullptr : &it->second;",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "conditional_expression",
                                  "text": "(it == map.end()) ? nullptr : &it->second",
                                  "children": [
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(it == map.end())",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_expression",
                                          "text": "it == map.end()",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "it",
                                              "children": []
                                            },
                                            {
                                              "type": "==",
                                              "text": "==",
                                              "children": []
                                            },
                                            {
                                              "type": "call_expression",
                                              "text": "map.end()",
                                              "children": [
                                                {
                                                  "type": "field_expression",
                                                  "text": "map.end",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "map",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "field_identifier",
                                                      "text": "end",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "?",
                                      "text": "?",
                                      "children": []
                                    },
                                    {
                                      "type": "nullptr",
                                      "text": "nullptr",
                                      "children": []
                                    },
                                    {
                                      "type": ":",
                                      "text": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "pointer_expression",
                                      "text": "&it->second",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "field_expression",
                                          "text": "it->second",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "it",
                                              "children": []
                                            },
                                            {
                                              "type": "->",
                                              "text": "->",
                                              "children": []
                                            },
                                            {
                                              "type": "field_identifier",
                                              "text": "second",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "namespace_definition",
                  "text": "namespace daily {\n  extern bool on;\n  extern int daily_id;\n  void setup();\n  void split();\n  void gifts();\n  void turnoff();\n  void showMenu();\n  int find_daily_lbid(int id);\n  bool prevent_spawn_treasure_on(cell *c);\n  void handleQuit(int sev);\n  void uploadscore(bool really_final);\n  }",
                  "children": [
                    {
                      "type": "namespace",
                      "text": "namespace",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "daily",
                      "children": []
                    },
                    {
                      "type": "declaration_list",
                      "text": "{\n  extern bool on;\n  extern int daily_id;\n  void setup();\n  void split();\n  void gifts();\n  void turnoff();\n  void showMenu();\n  int find_daily_lbid(int id);\n  bool prevent_spawn_treasure_on(cell *c);\n  void handleQuit(int sev);\n  void uploadscore(bool really_final);\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "declaration",
                          "text": "extern bool on;",
                          "children": [
                            {
                              "type": "storage_class_specifier",
                              "text": "extern",
                              "children": [
                                {
                                  "type": "extern",
                                  "text": "extern",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "on",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "extern int daily_id;",
                          "children": [
                            {
                              "type": "storage_class_specifier",
                              "text": "extern",
                              "children": [
                                {
                                  "type": "extern",
                                  "text": "extern",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "daily_id",
                              "children": []
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void setup();",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "setup()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "setup",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void split();",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "split()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "split",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void gifts();",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "gifts()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "gifts",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void turnoff();",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "turnoff()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "turnoff",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void showMenu();",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "showMenu()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "showMenu",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "int find_daily_lbid(int id);",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "find_daily_lbid(int id)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "find_daily_lbid",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(int id)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "int id",
                                      "children": [
                                        {
                                          "type": "primitive_type",
                                          "text": "int",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "bool prevent_spawn_treasure_on(cell *c);",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "bool",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "prevent_spawn_treasure_on(cell *c)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "prevent_spawn_treasure_on",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(cell *c)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "cell *c",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "cell",
                                          "children": []
                                        },
                                        {
                                          "type": "pointer_declarator",
                                          "text": "*c",
                                          "children": [
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "c",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void handleQuit(int sev);",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "handleQuit(int sev)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "handleQuit",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(int sev)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "int sev",
                                      "children": [
                                        {
                                          "type": "primitive_type",
                                          "text": "int",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sev",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "declaration",
                          "text": "void uploadscore(bool really_final);",
                          "children": [
                            {
                              "type": "primitive_type",
                              "text": "void",
                              "children": []
                            },
                            {
                              "type": "function_declarator",
                              "text": "uploadscore(bool really_final)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "uploadscore",
                                  "children": []
                                },
                                {
                                  "type": "parameter_list",
                                  "text": "(bool really_final)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "parameter_declaration",
                                      "text": "bool really_final",
                                      "children": [
                                        {
                                          "type": "primitive_type",
                                          "text": "bool",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "really_final",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define RING(i) for(double i=0; i<=cgi.S84+1e-6; i+=SD3 * pow(.5, vid.linequality))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "RING",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(i)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " for(double i=0; i<=cgi.S84+1e-6; i+=SD3 * pow(.5, vid.linequality))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define REVRING(i) for(double i=cgi.S84; i>=-1e-6; i-=SD3 * pow(.5, vid.linequality))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "REVRING",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(i)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " for(double i=cgi.S84; i>=-1e-6; i-=SD3 * pow(.5, vid.linequality))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define PRING(i) for(double i=0; i<=cgi.S84+1e-6; i+= pow(.5, vid.linequality))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "PRING",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(i)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " for(double i=0; i<=cgi.S84+1e-6; i+= pow(.5, vid.linequality))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define REVPRING(i) for(double i=cgi.S84; i>=-1e-6; i-=pow(.5, vid.linequality))\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "REVPRING",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(i)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " for(double i=cgi.S84; i>=-1e-6; i-=pow(.5, vid.linequality))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_def",
                  "text": "#define ONEMPTY if(d == 7 && passable(c, NULL, 0) && !safety && !reptilecheat)\n\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "ONEMPTY",
                      "children": []
                    },
                    {
                      "type": "preproc_arg",
                      "text": " if(d == 7 && passable(c, NULL, 0) && !safety && !reptilecheat)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "template_declaration",
                  "text": "template <class T> void texture_order(const T& f) {\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "void texture_order(const T& f) {\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }",
                      "children": [
                        {
                          "type": "primitive_type",
                          "text": "void",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "texture_order(const T& f)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "texture_order",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(const T& f)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const T& f",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& f",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "f",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  const int STEP = vid.texture_step;\n  const ld STEP2 = STEP;\n  for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "declaration",
                              "text": "const int STEP = vid.texture_step;",
                              "children": [
                                {
                                  "type": "type_qualifier",
                                  "text": "const",
                                  "children": [
                                    {
                                      "type": "const",
                                      "text": "const",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "primitive_type",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "init_declarator",
                                  "text": "STEP = vid.texture_step",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "STEP",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "field_expression",
                                      "text": "vid.texture_step",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "vid",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "field_identifier",
                                          "text": "texture_step",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "declaration",
                              "text": "const ld STEP2 = STEP;",
                              "children": [
                                {
                                  "type": "type_qualifier",
                                  "text": "const",
                                  "children": [
                                    {
                                      "type": "const",
                                      "text": "const",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "type_identifier",
                                  "text": "ld",
                                  "children": []
                                },
                                {
                                  "type": "init_declarator",
                                  "text": "STEP2 = STEP",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "STEP2",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "STEP",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "for_statement",
                              "text": "for(int y=0; y<STEP; y++)\n  for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }",
                              "children": [
                                {
                                  "type": "for",
                                  "text": "for",
                                  "children": []
                                },
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "declaration",
                                  "text": "int y=0;",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "init_declarator",
                                      "text": "y=0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "binary_expression",
                                  "text": "y<STEP",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "STEP",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                },
                                {
                                  "type": "update_expression",
                                  "text": "y++",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": "++",
                                      "text": "++",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                },
                                {
                                  "type": "for_statement",
                                  "text": "for(int x=0; x<STEP; x++) {\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }",
                                  "children": [
                                    {
                                      "type": "for",
                                      "text": "for",
                                      "children": []
                                    },
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "declaration",
                                      "text": "int x=0;",
                                      "children": [
                                        {
                                          "type": "primitive_type",
                                          "text": "int",
                                          "children": []
                                        },
                                        {
                                          "type": "init_declarator",
                                          "text": "x=0",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "number_literal",
                                              "text": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "binary_expression",
                                      "text": "x<STEP",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "<",
                                          "text": "<",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "STEP",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    },
                                    {
                                      "type": "update_expression",
                                      "text": "x++",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "++",
                                          "text": "++",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    },
                                    {
                                      "type": "compound_statement",
                                      "text": "{\n    ld x0 = x / STEP2;\n    ld y0 = y / STEP2;\n    ld b = 1 / STEP2;\n\n     if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }\n     if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }\n    }",
                                      "children": [
                                        {
                                          "type": "{",
                                          "text": "{",
                                          "children": []
                                        },
                                        {
                                          "type": "declaration",
                                          "text": "ld x0 = x / STEP2;",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "ld",
                                              "children": []
                                            },
                                            {
                                              "type": "init_declarator",
                                              "text": "x0 = x / STEP2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x0",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "x / STEP2",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "STEP2",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "declaration",
                                          "text": "ld y0 = y / STEP2;",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "ld",
                                              "children": []
                                            },
                                            {
                                              "type": "init_declarator",
                                              "text": "y0 = y / STEP2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "y0",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "y / STEP2",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "y",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "STEP2",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "declaration",
                                          "text": "ld b = 1 / STEP2;",
                                          "children": [
                                            {
                                              "type": "type_identifier",
                                              "text": "ld",
                                              "children": []
                                            },
                                            {
                                              "type": "init_declarator",
                                              "text": "b = 1 / STEP2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "b",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "1 / STEP2",
                                                  "children": [
                                                    {
                                                      "type": "number_literal",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "STEP2",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "if_statement",
                                          "text": "if(x+y < STEP) {\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }",
                                          "children": [
                                            {
                                              "type": "if",
                                              "text": "if",
                                              "children": []
                                            },
                                            {
                                              "type": "condition_clause",
                                              "text": "(x+y < STEP)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "x+y < STEP",
                                                  "children": [
                                                    {
                                                      "type": "binary_expression",
                                                      "text": "x+y",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "+",
                                                          "text": "+",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "y",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "<",
                                                      "text": "<",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "STEP",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "compound_statement",
                                              "text": "{\n       f(x0, y0); f(x0+b, y0); f(x0, y0+b);\n       }",
                                              "children": [
                                                {
                                                  "type": "{",
                                                  "text": "{",
                                                  "children": []
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "f(x0, y0);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "f(x0, y0)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "f",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(x0, y0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "x0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ",",
                                                              "text": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "y0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "f(x0+b, y0);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "f(x0+b, y0)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "f",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(x0+b, y0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "text": "x0+b",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x0",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "+",
                                                                  "text": "+",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "b",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ",",
                                                              "text": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "y0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "f(x0, y0+b);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "f(x0, y0+b)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "f",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(x0, y0+b)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "x0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ",",
                                                              "text": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "text": "y0+b",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "y0",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "+",
                                                                  "text": "+",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "b",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "}",
                                                  "text": "}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "if_statement",
                                          "text": "if(x+y <= STEP && x && y) {\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }",
                                          "children": [
                                            {
                                              "type": "if",
                                              "text": "if",
                                              "children": []
                                            },
                                            {
                                              "type": "condition_clause",
                                              "text": "(x+y <= STEP && x && y)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "x+y <= STEP && x && y",
                                                  "children": [
                                                    {
                                                      "type": "binary_expression",
                                                      "text": "x+y <= STEP && x",
                                                      "children": [
                                                        {
                                                          "type": "binary_expression",
                                                          "text": "x+y <= STEP",
                                                          "children": [
                                                            {
                                                              "type": "binary_expression",
                                                              "text": "x+y",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "+",
                                                                  "text": "+",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "y",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "<=",
                                                              "text": "<=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "STEP",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "&&",
                                                          "text": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "&&",
                                                      "text": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "y",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "compound_statement",
                                              "text": "{\n       f(x0, y0); f(x0-b, y0); f(x0, y0-b);\n       }",
                                              "children": [
                                                {
                                                  "type": "{",
                                                  "text": "{",
                                                  "children": []
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "f(x0, y0);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "f(x0, y0)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "f",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(x0, y0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "x0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ",",
                                                              "text": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "y0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "f(x0-b, y0);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "f(x0-b, y0)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "f",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(x0-b, y0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "text": "x0-b",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x0",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "-",
                                                                  "text": "-",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "b",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ",",
                                                              "text": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "y0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "text": "f(x0, y0-b);",
                                                  "children": [
                                                    {
                                                      "type": "call_expression",
                                                      "text": "f(x0, y0-b)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "f",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(x0, y0-b)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "x0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ",",
                                                              "text": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "text": "y0-b",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "y0",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "-",
                                                                  "text": "-",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "b",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "text": ";",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "}",
                                                  "text": "}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "}",
                                          "text": "}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "/** find the smallest value of x in range [dmin..dmax] such that f(x) returns true */",
                  "children": []
                },
                {
                  "type": "template_declaration",
                  "text": "template<class T> ld binsearch(ld dmin, ld dmax, const T& f, int iterations = 200) {\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }",
                  "children": [
                    {
                      "type": "template",
                      "text": "template",
                      "children": []
                    },
                    {
                      "type": "template_parameter_list",
                      "text": "<class T>",
                      "children": [
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "type_parameter_declaration",
                          "text": "class T",
                          "children": [
                            {
                              "type": "class",
                              "text": "class",
                              "children": []
                            },
                            {
                              "type": "type_identifier",
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "function_definition",
                      "text": "ld binsearch(ld dmin, ld dmax, const T& f, int iterations = 200) {\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }",
                      "children": [
                        {
                          "type": "type_identifier",
                          "text": "ld",
                          "children": []
                        },
                        {
                          "type": "function_declarator",
                          "text": "binsearch(ld dmin, ld dmax, const T& f, int iterations = 200)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "binsearch",
                              "children": []
                            },
                            {
                              "type": "parameter_list",
                              "text": "(ld dmin, ld dmax, const T& f, int iterations = 200)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "ld dmin",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "ld",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dmin",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "ld dmax",
                                  "children": [
                                    {
                                      "type": "type_identifier",
                                      "text": "ld",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dmax",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "parameter_declaration",
                                  "text": "const T& f",
                                  "children": [
                                    {
                                      "type": "type_qualifier",
                                      "text": "const",
                                      "children": [
                                        {
                                          "type": "const",
                                          "text": "const",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "type_identifier",
                                      "text": "T",
                                      "children": []
                                    },
                                    {
                                      "type": "reference_declarator",
                                      "text": "& f",
                                      "children": [
                                        {
                                          "type": "&",
                                          "text": "&",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "f",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "optional_parameter_declaration",
                                  "text": "int iterations = 200",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "iterations",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "number_literal",
                                      "text": "200",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "text": "{\n  for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }\n  return dmin;\n  }",
                          "children": [
                            {
                              "type": "{",
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "for_statement",
                              "text": "for(int i=0; i<iterations; i++) {\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }",
                              "children": [
                                {
                                  "type": "for",
                                  "text": "for",
                                  "children": []
                                },
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "declaration",
                                  "text": "int i=0;",
                                  "children": [
                                    {
                                      "type": "primitive_type",
                                      "text": "int",
                                      "children": []
                                    },
                                    {
                                      "type": "init_declarator",
                                      "text": "i=0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "i",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "number_literal",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "binary_expression",
                                  "text": "i<iterations",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "iterations",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                },
                                {
                                  "type": "update_expression",
                                  "text": "i++",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "++",
                                      "text": "++",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                },
                                {
                                  "type": "compound_statement",
                                  "text": "{\n    ld d = (dmin + dmax) / 2;\n    if(dmin == d || dmax == d) break;\n    if(f(d)) dmax = d;\n    else dmin = d;\n    }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "declaration",
                                      "text": "ld d = (dmin + dmax) / 2;",
                                      "children": [
                                        {
                                          "type": "type_identifier",
                                          "text": "ld",
                                          "children": []
                                        },
                                        {
                                          "type": "init_declarator",
                                          "text": "d = (dmin + dmax) / 2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "d",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "text": "(dmin + dmax) / 2",
                                              "children": [
                                                {
                                                  "type": "parenthesized_expression",
                                                  "text": "(dmin + dmax)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_expression",
                                                      "text": "dmin + dmax",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "dmin",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "+",
                                                          "text": "+",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "dmax",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "number_literal",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "if_statement",
                                      "text": "if(dmin == d || dmax == d) break;",
                                      "children": [
                                        {
                                          "type": "if",
                                          "text": "if",
                                          "children": []
                                        },
                                        {
                                          "type": "condition_clause",
                                          "text": "(dmin == d || dmax == d)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "text": "dmin == d || dmax == d",
                                              "children": [
                                                {
                                                  "type": "binary_expression",
                                                  "text": "dmin == d",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dmin",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "==",
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "d",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "||",
                                                  "text": "||",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "text": "dmax == d",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dmax",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "==",
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "d",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "break_statement",
                                          "text": "break;",
                                          "children": [
                                            {
                                              "type": "break",
                                              "text": "break",
                                              "children": []
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "if_statement",
                                      "text": "if(f(d)) dmax = d;\n    else dmin = d;",
                                      "children": [
                                        {
                                          "type": "if",
                                          "text": "if",
                                          "children": []
                                        },
                                        {
                                          "type": "condition_clause",
                                          "text": "(f(d))",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "call_expression",
                                              "text": "f(d)",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "f",
                                                  "children": []
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(d)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "d",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "expression_statement",
                                          "text": "dmax = d;",
                                          "children": [
                                            {
                                              "type": "assignment_expression",
                                              "text": "dmax = d",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dmax",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "d",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "else",
                                          "text": "else",
                                          "children": []
                                        },
                                        {
                                          "type": "expression_statement",
                                          "text": "dmin = d;",
                                          "children": [
                                            {
                                              "type": "assignment_expression",
                                              "text": "dmin = d",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dmin",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "d",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return dmin;",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dmin",
                                  "children": []
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "static const int max_vec = (1<<14);",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "static",
                      "children": [
                        {
                          "type": "static",
                          "text": "static",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_qualifier",
                      "text": "const",
                      "children": [
                        {
                          "type": "const",
                          "text": "const",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "init_declarator",
                      "text": "max_vec = (1<<14)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "max_vec",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(1<<14)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "text": "1<<14",
                              "children": [
                                {
                                  "type": "number_literal",
                                  "text": "1",
                                  "children": []
                                },
                                {
                                  "type": "<<",
                                  "text": "<<",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "text": "14",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "declaration",
                  "text": "extern bool needConfirmationEvenIfSaved();",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "extern",
                      "children": [
                        {
                          "type": "extern",
                          "text": "extern",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "bool",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "needConfirmationEvenIfSaved()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "needConfirmationEvenIfSaved",
                          "children": []
                        },
                        {
                          "type": "parameter_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "type_definition",
                  "text": "typedef unsigned long long flagtype;",
                  "children": [
                    {
                      "type": "typedef",
                      "text": "typedef",
                      "children": []
                    },
                    {
                      "type": "sized_type_specifier",
                      "text": "unsigned long long",
                      "children": [
                        {
                          "type": "unsigned",
                          "text": "unsigned",
                          "children": []
                        },
                        {
                          "type": "long",
                          "text": "long",
                          "children": []
                        },
                        {
                          "type": "long",
                          "text": "long",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "type_identifier",
                      "text": "flagtype",
                      "children": []
                    },
                    {
                      "type": ";",
                      "text": ";",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define Flag(i) (flagtype(1ull<<i))\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "Flag",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(i)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "i",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " (flagtype(1ull<<i))",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "static inline void set_flag(flagtype& f, flagtype which, bool b) {\n  if(b) f |= which;\n  else f &= ~which;\n  }",
                  "children": [
                    {
                      "type": "storage_class_specifier",
                      "text": "static",
                      "children": [
                        {
                          "type": "static",
                          "text": "static",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "storage_class_specifier",
                      "text": "inline",
                      "children": [
                        {
                          "type": "inline",
                          "text": "inline",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "primitive_type",
                      "text": "void",
                      "children": []
                    },
                    {
                      "type": "function_declarator",
                      "text": "set_flag(flagtype& f, flagtype which, bool b)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "set_flag",
                          "children": []
                        },
                        {
                          "type": "parameter_list",
                          "text": "(flagtype& f, flagtype which, bool b)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "flagtype& f",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "flagtype",
                                  "children": []
                                },
                                {
                                  "type": "reference_declarator",
                                  "text": "& f",
                                  "children": [
                                    {
                                      "type": "&",
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "f",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "flagtype which",
                              "children": [
                                {
                                  "type": "type_identifier",
                                  "text": "flagtype",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "which",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "parameter_declaration",
                              "text": "bool b",
                              "children": [
                                {
                                  "type": "primitive_type",
                                  "text": "bool",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "b",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "compound_statement",
                      "text": "{\n  if(b) f |= which;\n  else f &= ~which;\n  }",
                      "children": [
                        {
                          "type": "{",
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "if_statement",
                          "text": "if(b) f |= which;\n  else f &= ~which;",
                          "children": [
                            {
                              "type": "if",
                              "text": "if",
                              "children": []
                            },
                            {
                              "type": "condition_clause",
                              "text": "(b)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "b",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "text": "f |= which;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "f |= which",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "f",
                                      "children": []
                                    },
                                    {
                                      "type": "|=",
                                      "text": "|=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "which",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "else",
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "text": "f &= ~which;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "text": "f &= ~which",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "f",
                                      "children": []
                                    },
                                    {
                                      "type": "&=",
                                      "text": "&=",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_expression",
                                      "text": "~which",
                                      "children": [
                                        {
                                          "type": "~",
                                          "text": "~",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "which",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "}",
                  "text": "}",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "comment",
          "text": "/** this macro is used to delay performing the action in case if everything is rolled back */",
          "children": []
        },
        {
          "type": "preproc_function_def",
          "text": "#define LATE(x) \\\n  if(changes.on) { changes.at_commit([=] { x; }); return; }\n\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "LATE",
              "children": []
            },
            {
              "type": "preproc_params",
              "text": "(x)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": "preproc_arg",
              "text": " \\\n  if(changes.on) { changes.at_commit([=] { x; }); return; }",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n\n",
              "children": []
            }
          ]
        },
        {
          "type": "comment",
          "text": "// assert macro",
          "children": []
        },
        {
          "type": "preproc_ifdef",
          "text": "#ifdef NDEBUG\n#define hassert(condition) if(!(condition)) __builtin_unreachable()\n#else\n#define hassert(condition) if(!(condition)) printf(\"%s:%d:%s: assertion failed: %s\\n\", __FILE__, __LINE__, __func__, #condition)\n#endif",
          "children": [
            {
              "type": "#ifdef",
              "text": "#ifdef",
              "children": []
            },
            {
              "type": "identifier",
              "text": "NDEBUG",
              "children": []
            },
            {
              "type": "preproc_function_def",
              "text": "#define hassert(condition) if(!(condition)) __builtin_unreachable()\n",
              "children": [
                {
                  "type": "#define",
                  "text": "#define",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "hassert",
                  "children": []
                },
                {
                  "type": "preproc_params",
                  "text": "(condition)",
                  "children": [
                    {
                      "type": "(",
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "condition",
                      "children": []
                    },
                    {
                      "type": ")",
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "preproc_arg",
                  "text": " if(!(condition)) __builtin_unreachable()",
                  "children": []
                },
                {
                  "type": "\n",
                  "text": "\n",
                  "children": []
                }
              ]
            },
            {
              "type": "preproc_else",
              "text": "#else\n#define hassert(condition) if(!(condition)) printf(\"%s:%d:%s: assertion failed: %s\\n\", __FILE__, __LINE__, __func__, #condition)\n",
              "children": [
                {
                  "type": "#else",
                  "text": "#else",
                  "children": []
                },
                {
                  "type": "preproc_function_def",
                  "text": "#define hassert(condition) if(!(condition)) printf(\"%s:%d:%s: assertion failed: %s\\n\", __FILE__, __LINE__, __func__, #condition)\n",
                  "children": [
                    {
                      "type": "#define",
                      "text": "#define",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "hassert",
                      "children": []
                    },
                    {
                      "type": "preproc_params",
                      "text": "(condition)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "condition",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "preproc_arg",
                      "text": " if(!(condition)) printf(\"%s:%d:%s: assertion failed: %s\\n\", __FILE__, __LINE__, __func__, #condition)",
                      "children": []
                    },
                    {
                      "type": "\n",
                      "text": "\n",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "#endif",
              "text": "#endif",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_function_def",
          "text": "#define IS(z) = z\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "IS",
              "children": []
            },
            {
              "type": "preproc_params",
              "text": "(z)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "z",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": "preproc_arg",
              "text": " = z",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_include",
          "text": "#include \"autohdr.h\"\n",
          "children": [
            {
              "type": "#include",
              "text": "#include",
              "children": []
            },
            {
              "type": "string_literal",
              "text": "\"autohdr.h\"",
              "children": [
                {
                  "type": "\"",
                  "text": "\"",
                  "children": []
                },
                {
                  "type": "\"",
                  "text": "\"",
                  "children": []
                }
              ]
            },
            {
              "type": "\n",
              "text": "\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_call",
          "text": "#undef IS\n",
          "children": [
            {
              "type": "preproc_directive",
              "text": "#undef",
              "children": []
            },
            {
              "type": "preproc_arg",
              "text": " IS",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_function_def",
          "text": "#define IS(z)\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "IS",
              "children": []
            },
            {
              "type": "preproc_params",
              "text": "(z)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "z",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": "\n",
              "text": "\n",
              "children": []
            }
          ]
        },
        {
          "type": "preproc_def",
          "text": "#define EX\n\n",
          "children": [
            {
              "type": "#define",
              "text": "#define",
              "children": []
            },
            {
              "type": "identifier",
              "text": "EX",
              "children": []
            },
            {
              "type": "\n",
              "text": "\n\n",
              "children": []
            }
          ]
        },
        {
          "type": "#endif",
          "text": "#endif",
          "children": []
        }
      ]
    }
  ]
}